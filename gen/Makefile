MCP ?= ../generator/target/release/mcp
SHELL = /bin/bash

help:
	$(info -- Individual Targets ----------------------------------------------------------------)
	$(info -- Run target <name> like `make foo-cargo ARGS="check" to invoke cargo ---------------)
	$(info --------------------------------------------------------------------------------------)
	$(info abusiveexperiencereport1)
	$(info acceleratedmobilepageurl1)
	$(info accessapproval1_beta1)
	$(info accesscontextmanager1_beta)
	$(info accesscontextmanager1)
	$(info adexchangebuyer1d2)
	$(info adexchangebuyer1d3)
	$(info adexchangebuyer1d4)
	$(info adexchangebuyer2_beta1)
	$(info adexperiencereport1)
	$(info admin1_datatransfer)
	$(info admin1_directory)
	$(info admin1_reports)
	$(info adsense1d4)
	$(info adsensehost4d1)
	$(info alertcenter1_beta1)
	$(info analytics2d4)
	$(info analytics3)
	$(info analyticsreporting4)
	$(info androiddeviceprovisioning1)
	$(info androidenterprise1)
	$(info androidmanagement1)
	$(info androidpublisher1)
	$(info androidpublisher1d1)
	$(info androidpublisher2)
	$(info androidpublisher3)
	$(info appengine1_alpha)
	$(info appengine1_beta)
	$(info appengine1)
	$(info appsactivity1)
	$(info appstate1)
	$(info bigquery2)
	$(info bigquerydatatransfer1)
	$(info bigqueryreservation1_alpha2)
	$(info bigqueryreservation1)
	$(info bigtableadmin1)
	$(info bigtableadmin2)
	$(info binaryauthorization1_beta1)
	$(info blogger2)
	$(info blogger3)
	$(info books1)
	$(info calendar3)
	$(info chat1)
	$(info civicinfo2)
	$(info classroom1)
	$(info cloudasset1)
	$(info cloudasset1_beta1)
	$(info cloudbilling1)
	$(info cloudbuild1_alpha1)
	$(info cloudbuild1)
	$(info clouddebugger2)
	$(info clouderrorreporting1_beta1)
	$(info cloudfunctions1)
	$(info cloudfunctions1_beta2)
	$(info cloudidentity1)
	$(info cloudidentity1_beta1)
	$(info cloudiot1)
	$(info cloudkms1)
	$(info cloudprivatecatalog1_beta1)
	$(info cloudprivatecatalogproducer1_beta1)
	$(info cloudprofiler2)
	$(info cloudresourcemanager1)
	$(info cloudresourcemanager1_beta1)
	$(info cloudresourcemanager2)
	$(info cloudresourcemanager2_beta1)
	$(info cloudscheduler1)
	$(info cloudscheduler1_beta1)
	$(info cloudsearch1)
	$(info cloudshell1_alpha1)
	$(info cloudshell1)
	$(info cloudtasks2)
	$(info cloudtasks2_beta2)
	$(info cloudtasks2_beta3)
	$(info cloudtrace1)
	$(info cloudtrace2)
	$(info commentanalyzer1_alpha1)
	$(info composer1)
	$(info composer1_beta1)
	$(info computealpha)
	$(info computebeta)
	$(info compute1)
	$(info container1)
	$(info container1_beta1)
	$(info containeranalysis1_alpha1)
	$(info containeranalysis1_beta1)
	$(info content2)
	$(info content2d1)
	$(info customsearch1)
	$(info dataflow1_b3)
	$(info datafusion1_beta1)
	$(info dataproc1)
	$(info dataproc1_beta2)
	$(info datastore1)
	$(info datastore1_beta1)
	$(info datastore1_beta3)
	$(info deploymentmanageralpha)
	$(info deploymentmanager2_beta)
	$(info deploymentmanager2)
	$(info dfareporting3d1)
	$(info dfareporting3d2)
	$(info dfareporting3d3)
	$(info dialogflow2)
	$(info dialogflow2_beta1)
	$(info digitalassetlinks1)
	$(info discovery1)
	$(info dlp2)
	$(info dns1)
	$(info dns1_beta2)
	$(info dns2_beta1)
	$(info docs1)
	$(info doubleclickbidmanager1)
	$(info doubleclicksearch2)
	$(info drive2)
	$(info drive3)
	$(info driveactivity2)
	$(info factchecktools1_alpha1)
	$(info fcm1)
	$(info file1)
	$(info file1_beta1)
	$(info firebase1_beta1)
	$(info firebasedynamiclinks1)
	$(info firebasehosting1_beta1)
	$(info firebaserules1)
	$(info firestore1)
	$(info firestore1_beta1)
	$(info firestore1_beta2)
	$(info fitness1)
	$(info fusiontables1)
	$(info fusiontables2)
	$(info games1)
	$(info gamesConfiguration1_configuration)
	$(info gamesManagement1_management)
	$(info genomics1_alpha2)
	$(info genomics2_alpha1)
	$(info genomics1)
	$(info gmail1)
	$(info groupsmigration1)
	$(info groupssettings1)
	$(info healthcare1_alpha2)
	$(info healthcare1_beta1)
	$(info iam1)
	$(info iamcredentials1)
	$(info iap1)
	$(info iap1_beta1)
	$(info identitytoolkit3)
	$(info indexing3)
	$(info jobs3_p1beta1)
	$(info jobs2)
	$(info jobs3)
	$(info kgsearch1)
	$(info language1)
	$(info language1_beta1)
	$(info language1_beta2)
	$(info libraryagent1)
	$(info licensing1)
	$(info logging2)
	$(info manufacturers1)
	$(info mirror1)
	$(info ml1)
	$(info monitoring3)
	$(info oauth1)
	$(info oauth2)
	$(info oslogin1_alpha)
	$(info oslogin1_beta)
	$(info oslogin1)
	$(info pagespeedonline1)
	$(info pagespeedonline2)
	$(info pagespeedonline4)
	$(info pagespeedonline5)
	$(info people1)
	$(info playcustomapp1)
	$(info plus1)
	$(info plusDomains1)
	$(info poly1)
	$(info proximitybeacon1_beta1)
	$(info pubsub1_beta1a)
	$(info pubsub1)
	$(info pubsub1_beta2)
	$(info redis1)
	$(info redis1_beta1)
	$(info remotebuildexecution1_alpha)
	$(info remotebuildexecution1)
	$(info remotebuildexecution2)
	$(info replicapool1_beta1)
	$(info reseller1)
	$(info run1_alpha1)
	$(info run1)
	$(info runtimeconfig1)
	$(info runtimeconfig1_beta1)
	$(info safebrowsing4)
	$(info script1)
	$(info searchconsole1)
	$(info securitycenter1_p1alpha1)
	$(info securitycenter1)
	$(info securitycenter1_beta1)
	$(info servicebroker1_alpha1)
	$(info servicebroker1)
	$(info servicebroker1_beta1)
	$(info serviceconsumermanagement1)
	$(info servicecontrol1)
	$(info servicemanagement1)
	$(info servicenetworking1_beta)
	$(info servicenetworking1)
	$(info serviceusage1)
	$(info serviceusage1_beta1)
	$(info sheets4)
	$(info siteVerification1)
	$(info slides1)
	$(info sourcerepo1)
	$(info spanner1)
	$(info speech1_p1beta1)
	$(info speech2_beta)
	$(info speech1)
	$(info sqladmin1_beta4)
	$(info storage1)
	$(info storage1_beta1)
	$(info storage1_beta2)
	$(info storagetransfer1)
	$(info streetviewpublish1)
	$(info surveys2)
	$(info tagmanager1)
	$(info tagmanager2)
	$(info tasks1)
	$(info testing1)
	$(info texttospeech1)
	$(info texttospeech1_beta1)
	$(info toolresults1_beta3)
	$(info tpu1_alpha1)
	$(info tpu1)
	$(info translate2)
	$(info translate3_beta1)
	$(info urlshortener1)
	$(info vault1)
	$(info videointelligence1_p1beta1)
	$(info videointelligence1_p2beta1)
	$(info videointelligence1_p3beta1)
	$(info videointelligence1)
	$(info videointelligence1_beta2)
	$(info vision1_p1beta1)
	$(info vision1_p2beta1)
	$(info vision1)
	$(info webfonts1)
	$(info webmasters3)
	$(info websecurityscanner1_alpha)
	$(info websecurityscanner1_beta)
	$(info websecurityscanner1)
	$(info youtube3)
	$(info youtubeAnalytics1)
	$(info youtubeAnalytics2)
	$(info youtubereporting1)
	$(info -- Combined Targets ------------------------------------------------------------------)
	$(info gen-all             | generate all libraries and CLIs)
	$(info cargo-all           | pass args with ARGS="check" for example)
	$(info --------------------------------------------------------------------------------------)

gen-all: abusiveexperiencereport1 acceleratedmobilepageurl1 accessapproval1_beta1 accesscontextmanager1_beta accesscontextmanager1 adexchangebuyer1d2 adexchangebuyer1d3 adexchangebuyer1d4 adexchangebuyer2_beta1 adexperiencereport1 admin1_datatransfer admin1_directory admin1_reports adsense1d4 adsensehost4d1 alertcenter1_beta1 analytics2d4 analytics3 analyticsreporting4 androiddeviceprovisioning1 androidenterprise1 androidmanagement1 androidpublisher1 androidpublisher1d1 androidpublisher2 androidpublisher3 appengine1_alpha appengine1_beta appengine1 appsactivity1 appstate1 bigquery2 bigquerydatatransfer1 bigqueryreservation1_alpha2 bigqueryreservation1 bigtableadmin1 bigtableadmin2 binaryauthorization1_beta1 blogger2 blogger3 books1 calendar3 chat1 civicinfo2 classroom1 cloudasset1 cloudasset1_beta1 cloudbilling1 cloudbuild1_alpha1 cloudbuild1 clouddebugger2 clouderrorreporting1_beta1 cloudfunctions1 cloudfunctions1_beta2 cloudidentity1 cloudidentity1_beta1 cloudiot1 cloudkms1 cloudprivatecatalog1_beta1 cloudprivatecatalogproducer1_beta1 cloudprofiler2 cloudresourcemanager1 cloudresourcemanager1_beta1 cloudresourcemanager2 cloudresourcemanager2_beta1 cloudscheduler1 cloudscheduler1_beta1 cloudsearch1 cloudshell1_alpha1 cloudshell1 cloudtasks2 cloudtasks2_beta2 cloudtasks2_beta3 cloudtrace1 cloudtrace2 commentanalyzer1_alpha1 composer1 composer1_beta1 computealpha computebeta compute1 container1 container1_beta1 containeranalysis1_alpha1 containeranalysis1_beta1 content2 content2d1 customsearch1 dataflow1_b3 datafusion1_beta1 dataproc1 dataproc1_beta2 datastore1 datastore1_beta1 datastore1_beta3 deploymentmanageralpha deploymentmanager2_beta deploymentmanager2 dfareporting3d1 dfareporting3d2 dfareporting3d3 dialogflow2 dialogflow2_beta1 digitalassetlinks1 discovery1 dlp2 dns1 dns1_beta2 dns2_beta1 docs1 doubleclickbidmanager1 doubleclicksearch2 drive2 drive3 driveactivity2 factchecktools1_alpha1 fcm1 file1 file1_beta1 firebase1_beta1 firebasedynamiclinks1 firebasehosting1_beta1 firebaserules1 firestore1 firestore1_beta1 firestore1_beta2 fitness1 fusiontables1 fusiontables2 games1 gamesConfiguration1_configuration gamesManagement1_management genomics1_alpha2 genomics2_alpha1 genomics1 gmail1 groupsmigration1 groupssettings1 healthcare1_alpha2 healthcare1_beta1 iam1 iamcredentials1 iap1 iap1_beta1 identitytoolkit3 indexing3 jobs3_p1beta1 jobs2 jobs3 kgsearch1 language1 language1_beta1 language1_beta2 libraryagent1 licensing1 logging2 manufacturers1 mirror1 ml1 monitoring3 oauth1 oauth2 oslogin1_alpha oslogin1_beta oslogin1 pagespeedonline1 pagespeedonline2 pagespeedonline4 pagespeedonline5 people1 playcustomapp1 plus1 plusDomains1 poly1 proximitybeacon1_beta1 pubsub1_beta1a pubsub1 pubsub1_beta2 redis1 redis1_beta1 remotebuildexecution1_alpha remotebuildexecution1 remotebuildexecution2 replicapool1_beta1 reseller1 run1_alpha1 run1 runtimeconfig1 runtimeconfig1_beta1 safebrowsing4 script1 searchconsole1 securitycenter1_p1alpha1 securitycenter1 securitycenter1_beta1 servicebroker1_alpha1 servicebroker1 servicebroker1_beta1 serviceconsumermanagement1 servicecontrol1 servicemanagement1 servicenetworking1_beta servicenetworking1 serviceusage1 serviceusage1_beta1 sheets4 siteVerification1 slides1 sourcerepo1 spanner1 speech1_p1beta1 speech2_beta speech1 sqladmin1_beta4 storage1 storage1_beta1 storage1_beta2 storagetransfer1 streetviewpublish1 surveys2 tagmanager1 tagmanager2 tasks1 testing1 texttospeech1 texttospeech1_beta1 toolresults1_beta3 tpu1_alpha1 tpu1 translate2 translate3_beta1 urlshortener1 vault1 videointelligence1_p1beta1 videointelligence1_p2beta1 videointelligence1_p3beta1 videointelligence1 videointelligence1_beta2 vision1_p1beta1 vision1_p2beta1 vision1 webfonts1 webmasters3 websecurityscanner1_alpha websecurityscanner1_beta websecurityscanner1 youtube3 youtubeAnalytics1 youtubeAnalytics2 youtubereporting1 
	@echo "Consider running the following line to ignore crates with errors"
	@echo just ../update-drivers
cargo-all: abusiveexperiencereport1-cargo acceleratedmobilepageurl1-cargo accessapproval1_beta1-cargo accesscontextmanager1_beta-cargo accesscontextmanager1-cargo adexchangebuyer1d2-cargo adexchangebuyer1d3-cargo adexchangebuyer1d4-cargo adexchangebuyer2_beta1-cargo adexperiencereport1-cargo admin1_datatransfer-cargo admin1_directory-cargo admin1_reports-cargo adsense1d4-cargo adsensehost4d1-cargo alertcenter1_beta1-cargo analytics2d4-cargo analytics3-cargo analyticsreporting4-cargo androiddeviceprovisioning1-cargo androidenterprise1-cargo androidmanagement1-cargo androidpublisher1-cargo androidpublisher1d1-cargo androidpublisher2-cargo androidpublisher3-cargo appengine1_alpha-cargo appengine1_beta-cargo appengine1-cargo appsactivity1-cargo appstate1-cargo bigquery2-cargo bigquerydatatransfer1-cargo bigqueryreservation1_alpha2-cargo bigqueryreservation1-cargo bigtableadmin1-cargo bigtableadmin2-cargo binaryauthorization1_beta1-cargo blogger2-cargo blogger3-cargo books1-cargo calendar3-cargo chat1-cargo civicinfo2-cargo classroom1-cargo cloudasset1-cargo cloudasset1_beta1-cargo cloudbilling1-cargo cloudbuild1_alpha1-cargo cloudbuild1-cargo clouddebugger2-cargo clouderrorreporting1_beta1-cargo cloudfunctions1-cargo cloudfunctions1_beta2-cargo cloudidentity1-cargo cloudidentity1_beta1-cargo cloudiot1-cargo cloudkms1-cargo cloudprivatecatalog1_beta1-cargo cloudprivatecatalogproducer1_beta1-cargo cloudprofiler2-cargo cloudresourcemanager1-cargo cloudresourcemanager1_beta1-cargo cloudresourcemanager2-cargo cloudresourcemanager2_beta1-cargo cloudscheduler1-cargo cloudscheduler1_beta1-cargo cloudsearch1-cargo cloudshell1_alpha1-cargo cloudshell1-cargo cloudtasks2-cargo cloudtasks2_beta2-cargo cloudtasks2_beta3-cargo cloudtrace1-cargo cloudtrace2-cargo commentanalyzer1_alpha1-cargo composer1-cargo composer1_beta1-cargo computealpha-cargo computebeta-cargo compute1-cargo container1-cargo container1_beta1-cargo containeranalysis1_alpha1-cargo containeranalysis1_beta1-cargo content2-cargo content2d1-cargo customsearch1-cargo dataflow1_b3-cargo datafusion1_beta1-cargo dataproc1-cargo dataproc1_beta2-cargo datastore1-cargo datastore1_beta1-cargo datastore1_beta3-cargo deploymentmanageralpha-cargo deploymentmanager2_beta-cargo deploymentmanager2-cargo dfareporting3d1-cargo dfareporting3d2-cargo dfareporting3d3-cargo dialogflow2-cargo dialogflow2_beta1-cargo digitalassetlinks1-cargo discovery1-cargo dlp2-cargo dns1-cargo dns1_beta2-cargo dns2_beta1-cargo docs1-cargo doubleclickbidmanager1-cargo doubleclicksearch2-cargo drive2-cargo drive3-cargo driveactivity2-cargo factchecktools1_alpha1-cargo fcm1-cargo file1-cargo file1_beta1-cargo firebase1_beta1-cargo firebasedynamiclinks1-cargo firebasehosting1_beta1-cargo firebaserules1-cargo firestore1-cargo firestore1_beta1-cargo firestore1_beta2-cargo fitness1-cargo fusiontables1-cargo fusiontables2-cargo games1-cargo gamesConfiguration1_configuration-cargo gamesManagement1_management-cargo genomics1_alpha2-cargo genomics2_alpha1-cargo genomics1-cargo gmail1-cargo groupsmigration1-cargo groupssettings1-cargo healthcare1_alpha2-cargo healthcare1_beta1-cargo iam1-cargo iamcredentials1-cargo iap1-cargo iap1_beta1-cargo identitytoolkit3-cargo indexing3-cargo jobs3_p1beta1-cargo jobs2-cargo jobs3-cargo kgsearch1-cargo language1-cargo language1_beta1-cargo language1_beta2-cargo libraryagent1-cargo licensing1-cargo logging2-cargo manufacturers1-cargo mirror1-cargo ml1-cargo monitoring3-cargo oauth1-cargo oauth2-cargo oslogin1_alpha-cargo oslogin1_beta-cargo oslogin1-cargo pagespeedonline1-cargo pagespeedonline2-cargo pagespeedonline4-cargo pagespeedonline5-cargo people1-cargo playcustomapp1-cargo plus1-cargo plusDomains1-cargo poly1-cargo proximitybeacon1_beta1-cargo pubsub1_beta1a-cargo pubsub1-cargo pubsub1_beta2-cargo redis1-cargo redis1_beta1-cargo remotebuildexecution1_alpha-cargo remotebuildexecution1-cargo remotebuildexecution2-cargo replicapool1_beta1-cargo reseller1-cargo run1_alpha1-cargo run1-cargo runtimeconfig1-cargo runtimeconfig1_beta1-cargo safebrowsing4-cargo script1-cargo searchconsole1-cargo securitycenter1_p1alpha1-cargo securitycenter1-cargo securitycenter1_beta1-cargo servicebroker1_alpha1-cargo servicebroker1-cargo servicebroker1_beta1-cargo serviceconsumermanagement1-cargo servicecontrol1-cargo servicemanagement1-cargo servicenetworking1_beta-cargo servicenetworking1-cargo serviceusage1-cargo serviceusage1_beta1-cargo sheets4-cargo siteVerification1-cargo slides1-cargo sourcerepo1-cargo spanner1-cargo speech1_p1beta1-cargo speech2_beta-cargo speech1-cargo sqladmin1_beta4-cargo storage1-cargo storage1_beta1-cargo storage1_beta2-cargo storagetransfer1-cargo streetviewpublish1-cargo surveys2-cargo tagmanager1-cargo tagmanager2-cargo tasks1-cargo testing1-cargo texttospeech1-cargo texttospeech1_beta1-cargo toolresults1_beta3-cargo tpu1_alpha1-cargo tpu1-cargo translate2-cargo translate3_beta1-cargo urlshortener1-cargo vault1-cargo videointelligence1_p1beta1-cargo videointelligence1_p2beta1-cargo videointelligence1_p3beta1-cargo videointelligence1-cargo videointelligence1_beta2-cargo vision1_p1beta1-cargo vision1_p2beta1-cargo vision1-cargo webfonts1-cargo webmasters3-cargo websecurityscanner1_alpha-cargo websecurityscanner1_beta-cargo websecurityscanner1-cargo youtube3-cargo youtubeAnalytics1-cargo youtubeAnalytics2-cargo youtubereporting1-cargo 
	@echo "Consider running the following line to ignore crates with errors"
	@echo just ../update-drivers


abusiveexperiencereport/v1/lib/Cargo.toml: ../etc/api/abusiveexperiencereport/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< abusiveexperiencereport/v1 2>&1 | tee abusiveexperiencereport/v1/generator-errors.log && rm abusiveexperiencereport/v1/generator-errors.log
abusiveexperiencereport1: abusiveexperiencereport/v1/lib/Cargo.toml
abusiveexperiencereport1-cargo: abusiveexperiencereport1
	set -o pipefail; ( cd abusiveexperiencereport/v1/lib && cargo $(ARGS) ) 2>&1 | tee abusiveexperiencereport/v1/cargo-errors.log && rm abusiveexperiencereport/v1/cargo-errors.log

acceleratedmobilepageurl/v1/lib/Cargo.toml: ../etc/api/acceleratedmobilepageurl/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< acceleratedmobilepageurl/v1 2>&1 | tee acceleratedmobilepageurl/v1/generator-errors.log && rm acceleratedmobilepageurl/v1/generator-errors.log
acceleratedmobilepageurl1: acceleratedmobilepageurl/v1/lib/Cargo.toml
acceleratedmobilepageurl1-cargo: acceleratedmobilepageurl1
	set -o pipefail; ( cd acceleratedmobilepageurl/v1/lib && cargo $(ARGS) ) 2>&1 | tee acceleratedmobilepageurl/v1/cargo-errors.log && rm acceleratedmobilepageurl/v1/cargo-errors.log

accessapproval/v1beta1/lib/Cargo.toml: ../etc/api/accessapproval/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< accessapproval/v1beta1 2>&1 | tee accessapproval/v1beta1/generator-errors.log && rm accessapproval/v1beta1/generator-errors.log
accessapproval1_beta1: accessapproval/v1beta1/lib/Cargo.toml
accessapproval1_beta1-cargo: accessapproval1_beta1
	set -o pipefail; ( cd accessapproval/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee accessapproval/v1beta1/cargo-errors.log && rm accessapproval/v1beta1/cargo-errors.log

accesscontextmanager/v1beta/lib/Cargo.toml: ../etc/api/accesscontextmanager/v1beta/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< accesscontextmanager/v1beta 2>&1 | tee accesscontextmanager/v1beta/generator-errors.log && rm accesscontextmanager/v1beta/generator-errors.log
accesscontextmanager1_beta: accesscontextmanager/v1beta/lib/Cargo.toml
accesscontextmanager1_beta-cargo: accesscontextmanager1_beta
	set -o pipefail; ( cd accesscontextmanager/v1beta/lib && cargo $(ARGS) ) 2>&1 | tee accesscontextmanager/v1beta/cargo-errors.log && rm accesscontextmanager/v1beta/cargo-errors.log

accesscontextmanager/v1/lib/Cargo.toml: ../etc/api/accesscontextmanager/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< accesscontextmanager/v1 2>&1 | tee accesscontextmanager/v1/generator-errors.log && rm accesscontextmanager/v1/generator-errors.log
accesscontextmanager1: accesscontextmanager/v1/lib/Cargo.toml
accesscontextmanager1-cargo: accesscontextmanager1
	set -o pipefail; ( cd accesscontextmanager/v1/lib && cargo $(ARGS) ) 2>&1 | tee accesscontextmanager/v1/cargo-errors.log && rm accesscontextmanager/v1/cargo-errors.log

adexchangebuyer/v1.2/lib/Cargo.toml: ../etc/api/adexchangebuyer/v1.2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< adexchangebuyer/v1.2 2>&1 | tee adexchangebuyer/v1.2/generator-errors.log && rm adexchangebuyer/v1.2/generator-errors.log
adexchangebuyer1d2: adexchangebuyer/v1.2/lib/Cargo.toml
adexchangebuyer1d2-cargo: adexchangebuyer1d2
	set -o pipefail; ( cd adexchangebuyer/v1.2/lib && cargo $(ARGS) ) 2>&1 | tee adexchangebuyer/v1.2/cargo-errors.log && rm adexchangebuyer/v1.2/cargo-errors.log

adexchangebuyer/v1.3/lib/Cargo.toml: ../etc/api/adexchangebuyer/v1.3/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< adexchangebuyer/v1.3 2>&1 | tee adexchangebuyer/v1.3/generator-errors.log && rm adexchangebuyer/v1.3/generator-errors.log
adexchangebuyer1d3: adexchangebuyer/v1.3/lib/Cargo.toml
adexchangebuyer1d3-cargo: adexchangebuyer1d3
	set -o pipefail; ( cd adexchangebuyer/v1.3/lib && cargo $(ARGS) ) 2>&1 | tee adexchangebuyer/v1.3/cargo-errors.log && rm adexchangebuyer/v1.3/cargo-errors.log

adexchangebuyer/v1.4/lib/Cargo.toml: ../etc/api/adexchangebuyer/v1.4/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< adexchangebuyer/v1.4 2>&1 | tee adexchangebuyer/v1.4/generator-errors.log && rm adexchangebuyer/v1.4/generator-errors.log
adexchangebuyer1d4: adexchangebuyer/v1.4/lib/Cargo.toml
adexchangebuyer1d4-cargo: adexchangebuyer1d4
	set -o pipefail; ( cd adexchangebuyer/v1.4/lib && cargo $(ARGS) ) 2>&1 | tee adexchangebuyer/v1.4/cargo-errors.log && rm adexchangebuyer/v1.4/cargo-errors.log

adexchangebuyer/v2beta1/lib/Cargo.toml: ../etc/api/adexchangebuyer/v2beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< adexchangebuyer/v2beta1 2>&1 | tee adexchangebuyer/v2beta1/generator-errors.log && rm adexchangebuyer/v2beta1/generator-errors.log
adexchangebuyer2_beta1: adexchangebuyer/v2beta1/lib/Cargo.toml
adexchangebuyer2_beta1-cargo: adexchangebuyer2_beta1
	set -o pipefail; ( cd adexchangebuyer/v2beta1/lib && cargo $(ARGS) ) 2>&1 | tee adexchangebuyer/v2beta1/cargo-errors.log && rm adexchangebuyer/v2beta1/cargo-errors.log

adexperiencereport/v1/lib/Cargo.toml: ../etc/api/adexperiencereport/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< adexperiencereport/v1 2>&1 | tee adexperiencereport/v1/generator-errors.log && rm adexperiencereport/v1/generator-errors.log
adexperiencereport1: adexperiencereport/v1/lib/Cargo.toml
adexperiencereport1-cargo: adexperiencereport1
	set -o pipefail; ( cd adexperiencereport/v1/lib && cargo $(ARGS) ) 2>&1 | tee adexperiencereport/v1/cargo-errors.log && rm adexperiencereport/v1/cargo-errors.log

admin/datatransfer_v1/lib/Cargo.toml: ../etc/api/admin/datatransfer_v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< admin/datatransfer_v1 2>&1 | tee admin/datatransfer_v1/generator-errors.log && rm admin/datatransfer_v1/generator-errors.log
admin1_datatransfer: admin/datatransfer_v1/lib/Cargo.toml
admin1_datatransfer-cargo: admin1_datatransfer
	set -o pipefail; ( cd admin/datatransfer_v1/lib && cargo $(ARGS) ) 2>&1 | tee admin/datatransfer_v1/cargo-errors.log && rm admin/datatransfer_v1/cargo-errors.log

admin/directory_v1/lib/Cargo.toml: ../etc/api/admin/directory_v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< admin/directory_v1 2>&1 | tee admin/directory_v1/generator-errors.log && rm admin/directory_v1/generator-errors.log
admin1_directory: admin/directory_v1/lib/Cargo.toml
admin1_directory-cargo: admin1_directory
	set -o pipefail; ( cd admin/directory_v1/lib && cargo $(ARGS) ) 2>&1 | tee admin/directory_v1/cargo-errors.log && rm admin/directory_v1/cargo-errors.log

admin/reports_v1/lib/Cargo.toml: ../etc/api/admin/reports_v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< admin/reports_v1 2>&1 | tee admin/reports_v1/generator-errors.log && rm admin/reports_v1/generator-errors.log
admin1_reports: admin/reports_v1/lib/Cargo.toml
admin1_reports-cargo: admin1_reports
	set -o pipefail; ( cd admin/reports_v1/lib && cargo $(ARGS) ) 2>&1 | tee admin/reports_v1/cargo-errors.log && rm admin/reports_v1/cargo-errors.log

adsense/v1.4/lib/Cargo.toml: ../etc/api/adsense/v1.4/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< adsense/v1.4 2>&1 | tee adsense/v1.4/generator-errors.log && rm adsense/v1.4/generator-errors.log
adsense1d4: adsense/v1.4/lib/Cargo.toml
adsense1d4-cargo: adsense1d4
	set -o pipefail; ( cd adsense/v1.4/lib && cargo $(ARGS) ) 2>&1 | tee adsense/v1.4/cargo-errors.log && rm adsense/v1.4/cargo-errors.log

adsensehost/v4.1/lib/Cargo.toml: ../etc/api/adsensehost/v4.1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< adsensehost/v4.1 2>&1 | tee adsensehost/v4.1/generator-errors.log && rm adsensehost/v4.1/generator-errors.log
adsensehost4d1: adsensehost/v4.1/lib/Cargo.toml
adsensehost4d1-cargo: adsensehost4d1
	set -o pipefail; ( cd adsensehost/v4.1/lib && cargo $(ARGS) ) 2>&1 | tee adsensehost/v4.1/cargo-errors.log && rm adsensehost/v4.1/cargo-errors.log

alertcenter/v1beta1/lib/Cargo.toml: ../etc/api/alertcenter/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< alertcenter/v1beta1 2>&1 | tee alertcenter/v1beta1/generator-errors.log && rm alertcenter/v1beta1/generator-errors.log
alertcenter1_beta1: alertcenter/v1beta1/lib/Cargo.toml
alertcenter1_beta1-cargo: alertcenter1_beta1
	set -o pipefail; ( cd alertcenter/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee alertcenter/v1beta1/cargo-errors.log && rm alertcenter/v1beta1/cargo-errors.log

analytics/v2.4/lib/Cargo.toml: ../etc/api/analytics/v2.4/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< analytics/v2.4 2>&1 | tee analytics/v2.4/generator-errors.log && rm analytics/v2.4/generator-errors.log
analytics2d4: analytics/v2.4/lib/Cargo.toml
analytics2d4-cargo: analytics2d4
	set -o pipefail; ( cd analytics/v2.4/lib && cargo $(ARGS) ) 2>&1 | tee analytics/v2.4/cargo-errors.log && rm analytics/v2.4/cargo-errors.log

analytics/v3/lib/Cargo.toml: ../etc/api/analytics/v3/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< analytics/v3 2>&1 | tee analytics/v3/generator-errors.log && rm analytics/v3/generator-errors.log
analytics3: analytics/v3/lib/Cargo.toml
analytics3-cargo: analytics3
	set -o pipefail; ( cd analytics/v3/lib && cargo $(ARGS) ) 2>&1 | tee analytics/v3/cargo-errors.log && rm analytics/v3/cargo-errors.log

analyticsreporting/v4/lib/Cargo.toml: ../etc/api/analyticsreporting/v4/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< analyticsreporting/v4 2>&1 | tee analyticsreporting/v4/generator-errors.log && rm analyticsreporting/v4/generator-errors.log
analyticsreporting4: analyticsreporting/v4/lib/Cargo.toml
analyticsreporting4-cargo: analyticsreporting4
	set -o pipefail; ( cd analyticsreporting/v4/lib && cargo $(ARGS) ) 2>&1 | tee analyticsreporting/v4/cargo-errors.log && rm analyticsreporting/v4/cargo-errors.log

androiddeviceprovisioning/v1/lib/Cargo.toml: ../etc/api/androiddeviceprovisioning/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< androiddeviceprovisioning/v1 2>&1 | tee androiddeviceprovisioning/v1/generator-errors.log && rm androiddeviceprovisioning/v1/generator-errors.log
androiddeviceprovisioning1: androiddeviceprovisioning/v1/lib/Cargo.toml
androiddeviceprovisioning1-cargo: androiddeviceprovisioning1
	set -o pipefail; ( cd androiddeviceprovisioning/v1/lib && cargo $(ARGS) ) 2>&1 | tee androiddeviceprovisioning/v1/cargo-errors.log && rm androiddeviceprovisioning/v1/cargo-errors.log

androidenterprise/v1/lib/Cargo.toml: ../etc/api/androidenterprise/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< androidenterprise/v1 2>&1 | tee androidenterprise/v1/generator-errors.log && rm androidenterprise/v1/generator-errors.log
androidenterprise1: androidenterprise/v1/lib/Cargo.toml
androidenterprise1-cargo: androidenterprise1
	set -o pipefail; ( cd androidenterprise/v1/lib && cargo $(ARGS) ) 2>&1 | tee androidenterprise/v1/cargo-errors.log && rm androidenterprise/v1/cargo-errors.log

androidmanagement/v1/lib/Cargo.toml: ../etc/api/androidmanagement/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< androidmanagement/v1 2>&1 | tee androidmanagement/v1/generator-errors.log && rm androidmanagement/v1/generator-errors.log
androidmanagement1: androidmanagement/v1/lib/Cargo.toml
androidmanagement1-cargo: androidmanagement1
	set -o pipefail; ( cd androidmanagement/v1/lib && cargo $(ARGS) ) 2>&1 | tee androidmanagement/v1/cargo-errors.log && rm androidmanagement/v1/cargo-errors.log

androidpublisher/v1/lib/Cargo.toml: ../etc/api/androidpublisher/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< androidpublisher/v1 2>&1 | tee androidpublisher/v1/generator-errors.log && rm androidpublisher/v1/generator-errors.log
androidpublisher1: androidpublisher/v1/lib/Cargo.toml
androidpublisher1-cargo: androidpublisher1
	set -o pipefail; ( cd androidpublisher/v1/lib && cargo $(ARGS) ) 2>&1 | tee androidpublisher/v1/cargo-errors.log && rm androidpublisher/v1/cargo-errors.log

androidpublisher/v1.1/lib/Cargo.toml: ../etc/api/androidpublisher/v1.1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< androidpublisher/v1.1 2>&1 | tee androidpublisher/v1.1/generator-errors.log && rm androidpublisher/v1.1/generator-errors.log
androidpublisher1d1: androidpublisher/v1.1/lib/Cargo.toml
androidpublisher1d1-cargo: androidpublisher1d1
	set -o pipefail; ( cd androidpublisher/v1.1/lib && cargo $(ARGS) ) 2>&1 | tee androidpublisher/v1.1/cargo-errors.log && rm androidpublisher/v1.1/cargo-errors.log

androidpublisher/v2/lib/Cargo.toml: ../etc/api/androidpublisher/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< androidpublisher/v2 2>&1 | tee androidpublisher/v2/generator-errors.log && rm androidpublisher/v2/generator-errors.log
androidpublisher2: androidpublisher/v2/lib/Cargo.toml
androidpublisher2-cargo: androidpublisher2
	set -o pipefail; ( cd androidpublisher/v2/lib && cargo $(ARGS) ) 2>&1 | tee androidpublisher/v2/cargo-errors.log && rm androidpublisher/v2/cargo-errors.log

androidpublisher/v3/lib/Cargo.toml: ../etc/api/androidpublisher/v3/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< androidpublisher/v3 2>&1 | tee androidpublisher/v3/generator-errors.log && rm androidpublisher/v3/generator-errors.log
androidpublisher3: androidpublisher/v3/lib/Cargo.toml
androidpublisher3-cargo: androidpublisher3
	set -o pipefail; ( cd androidpublisher/v3/lib && cargo $(ARGS) ) 2>&1 | tee androidpublisher/v3/cargo-errors.log && rm androidpublisher/v3/cargo-errors.log

appengine/v1alpha/lib/Cargo.toml: ../etc/api/appengine/v1alpha/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< appengine/v1alpha 2>&1 | tee appengine/v1alpha/generator-errors.log && rm appengine/v1alpha/generator-errors.log
appengine1_alpha: appengine/v1alpha/lib/Cargo.toml
appengine1_alpha-cargo: appengine1_alpha
	set -o pipefail; ( cd appengine/v1alpha/lib && cargo $(ARGS) ) 2>&1 | tee appengine/v1alpha/cargo-errors.log && rm appengine/v1alpha/cargo-errors.log

appengine/v1beta/lib/Cargo.toml: ../etc/api/appengine/v1beta/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< appengine/v1beta 2>&1 | tee appengine/v1beta/generator-errors.log && rm appengine/v1beta/generator-errors.log
appengine1_beta: appengine/v1beta/lib/Cargo.toml
appengine1_beta-cargo: appengine1_beta
	set -o pipefail; ( cd appengine/v1beta/lib && cargo $(ARGS) ) 2>&1 | tee appengine/v1beta/cargo-errors.log && rm appengine/v1beta/cargo-errors.log

appengine/v1/lib/Cargo.toml: ../etc/api/appengine/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< appengine/v1 2>&1 | tee appengine/v1/generator-errors.log && rm appengine/v1/generator-errors.log
appengine1: appengine/v1/lib/Cargo.toml
appengine1-cargo: appengine1
	set -o pipefail; ( cd appengine/v1/lib && cargo $(ARGS) ) 2>&1 | tee appengine/v1/cargo-errors.log && rm appengine/v1/cargo-errors.log

appsactivity/v1/lib/Cargo.toml: ../etc/api/appsactivity/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< appsactivity/v1 2>&1 | tee appsactivity/v1/generator-errors.log && rm appsactivity/v1/generator-errors.log
appsactivity1: appsactivity/v1/lib/Cargo.toml
appsactivity1-cargo: appsactivity1
	set -o pipefail; ( cd appsactivity/v1/lib && cargo $(ARGS) ) 2>&1 | tee appsactivity/v1/cargo-errors.log && rm appsactivity/v1/cargo-errors.log

appstate/v1/lib/Cargo.toml: ../etc/api/appstate/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< appstate/v1 2>&1 | tee appstate/v1/generator-errors.log && rm appstate/v1/generator-errors.log
appstate1: appstate/v1/lib/Cargo.toml
appstate1-cargo: appstate1
	set -o pipefail; ( cd appstate/v1/lib && cargo $(ARGS) ) 2>&1 | tee appstate/v1/cargo-errors.log && rm appstate/v1/cargo-errors.log

bigquery/v2/lib/Cargo.toml: ../etc/api/bigquery/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< bigquery/v2 2>&1 | tee bigquery/v2/generator-errors.log && rm bigquery/v2/generator-errors.log
bigquery2: bigquery/v2/lib/Cargo.toml
bigquery2-cargo: bigquery2
	set -o pipefail; ( cd bigquery/v2/lib && cargo $(ARGS) ) 2>&1 | tee bigquery/v2/cargo-errors.log && rm bigquery/v2/cargo-errors.log

bigquerydatatransfer/v1/lib/Cargo.toml: ../etc/api/bigquerydatatransfer/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< bigquerydatatransfer/v1 2>&1 | tee bigquerydatatransfer/v1/generator-errors.log && rm bigquerydatatransfer/v1/generator-errors.log
bigquerydatatransfer1: bigquerydatatransfer/v1/lib/Cargo.toml
bigquerydatatransfer1-cargo: bigquerydatatransfer1
	set -o pipefail; ( cd bigquerydatatransfer/v1/lib && cargo $(ARGS) ) 2>&1 | tee bigquerydatatransfer/v1/cargo-errors.log && rm bigquerydatatransfer/v1/cargo-errors.log

bigqueryreservation/v1alpha2/lib/Cargo.toml: ../etc/api/bigqueryreservation/v1alpha2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< bigqueryreservation/v1alpha2 2>&1 | tee bigqueryreservation/v1alpha2/generator-errors.log && rm bigqueryreservation/v1alpha2/generator-errors.log
bigqueryreservation1_alpha2: bigqueryreservation/v1alpha2/lib/Cargo.toml
bigqueryreservation1_alpha2-cargo: bigqueryreservation1_alpha2
	set -o pipefail; ( cd bigqueryreservation/v1alpha2/lib && cargo $(ARGS) ) 2>&1 | tee bigqueryreservation/v1alpha2/cargo-errors.log && rm bigqueryreservation/v1alpha2/cargo-errors.log

bigqueryreservation/v1/lib/Cargo.toml: ../etc/api/bigqueryreservation/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< bigqueryreservation/v1 2>&1 | tee bigqueryreservation/v1/generator-errors.log && rm bigqueryreservation/v1/generator-errors.log
bigqueryreservation1: bigqueryreservation/v1/lib/Cargo.toml
bigqueryreservation1-cargo: bigqueryreservation1
	set -o pipefail; ( cd bigqueryreservation/v1/lib && cargo $(ARGS) ) 2>&1 | tee bigqueryreservation/v1/cargo-errors.log && rm bigqueryreservation/v1/cargo-errors.log

bigtableadmin/v1/lib/Cargo.toml: ../etc/api/bigtableadmin/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< bigtableadmin/v1 2>&1 | tee bigtableadmin/v1/generator-errors.log && rm bigtableadmin/v1/generator-errors.log
bigtableadmin1: bigtableadmin/v1/lib/Cargo.toml
bigtableadmin1-cargo: bigtableadmin1
	set -o pipefail; ( cd bigtableadmin/v1/lib && cargo $(ARGS) ) 2>&1 | tee bigtableadmin/v1/cargo-errors.log && rm bigtableadmin/v1/cargo-errors.log

bigtableadmin/v2/lib/Cargo.toml: ../etc/api/bigtableadmin/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< bigtableadmin/v2 2>&1 | tee bigtableadmin/v2/generator-errors.log && rm bigtableadmin/v2/generator-errors.log
bigtableadmin2: bigtableadmin/v2/lib/Cargo.toml
bigtableadmin2-cargo: bigtableadmin2
	set -o pipefail; ( cd bigtableadmin/v2/lib && cargo $(ARGS) ) 2>&1 | tee bigtableadmin/v2/cargo-errors.log && rm bigtableadmin/v2/cargo-errors.log

binaryauthorization/v1beta1/lib/Cargo.toml: ../etc/api/binaryauthorization/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< binaryauthorization/v1beta1 2>&1 | tee binaryauthorization/v1beta1/generator-errors.log && rm binaryauthorization/v1beta1/generator-errors.log
binaryauthorization1_beta1: binaryauthorization/v1beta1/lib/Cargo.toml
binaryauthorization1_beta1-cargo: binaryauthorization1_beta1
	set -o pipefail; ( cd binaryauthorization/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee binaryauthorization/v1beta1/cargo-errors.log && rm binaryauthorization/v1beta1/cargo-errors.log

blogger/v2/lib/Cargo.toml: ../etc/api/blogger/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< blogger/v2 2>&1 | tee blogger/v2/generator-errors.log && rm blogger/v2/generator-errors.log
blogger2: blogger/v2/lib/Cargo.toml
blogger2-cargo: blogger2
	set -o pipefail; ( cd blogger/v2/lib && cargo $(ARGS) ) 2>&1 | tee blogger/v2/cargo-errors.log && rm blogger/v2/cargo-errors.log

blogger/v3/lib/Cargo.toml: ../etc/api/blogger/v3/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< blogger/v3 2>&1 | tee blogger/v3/generator-errors.log && rm blogger/v3/generator-errors.log
blogger3: blogger/v3/lib/Cargo.toml
blogger3-cargo: blogger3
	set -o pipefail; ( cd blogger/v3/lib && cargo $(ARGS) ) 2>&1 | tee blogger/v3/cargo-errors.log && rm blogger/v3/cargo-errors.log

books/v1/lib/Cargo.toml: ../etc/api/books/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< books/v1 2>&1 | tee books/v1/generator-errors.log && rm books/v1/generator-errors.log
books1: books/v1/lib/Cargo.toml
books1-cargo: books1
	set -o pipefail; ( cd books/v1/lib && cargo $(ARGS) ) 2>&1 | tee books/v1/cargo-errors.log && rm books/v1/cargo-errors.log

calendar/v3/lib/Cargo.toml: ../etc/api/calendar/v3/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< calendar/v3 2>&1 | tee calendar/v3/generator-errors.log && rm calendar/v3/generator-errors.log
calendar3: calendar/v3/lib/Cargo.toml
calendar3-cargo: calendar3
	set -o pipefail; ( cd calendar/v3/lib && cargo $(ARGS) ) 2>&1 | tee calendar/v3/cargo-errors.log && rm calendar/v3/cargo-errors.log

chat/v1/lib/Cargo.toml: ../etc/api/chat/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< chat/v1 2>&1 | tee chat/v1/generator-errors.log && rm chat/v1/generator-errors.log
chat1: chat/v1/lib/Cargo.toml
chat1-cargo: chat1
	set -o pipefail; ( cd chat/v1/lib && cargo $(ARGS) ) 2>&1 | tee chat/v1/cargo-errors.log && rm chat/v1/cargo-errors.log

civicinfo/v2/lib/Cargo.toml: ../etc/api/civicinfo/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< civicinfo/v2 2>&1 | tee civicinfo/v2/generator-errors.log && rm civicinfo/v2/generator-errors.log
civicinfo2: civicinfo/v2/lib/Cargo.toml
civicinfo2-cargo: civicinfo2
	set -o pipefail; ( cd civicinfo/v2/lib && cargo $(ARGS) ) 2>&1 | tee civicinfo/v2/cargo-errors.log && rm civicinfo/v2/cargo-errors.log

classroom/v1/lib/Cargo.toml: ../etc/api/classroom/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< classroom/v1 2>&1 | tee classroom/v1/generator-errors.log && rm classroom/v1/generator-errors.log
classroom1: classroom/v1/lib/Cargo.toml
classroom1-cargo: classroom1
	set -o pipefail; ( cd classroom/v1/lib && cargo $(ARGS) ) 2>&1 | tee classroom/v1/cargo-errors.log && rm classroom/v1/cargo-errors.log

cloudasset/v1/lib/Cargo.toml: ../etc/api/cloudasset/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudasset/v1 2>&1 | tee cloudasset/v1/generator-errors.log && rm cloudasset/v1/generator-errors.log
cloudasset1: cloudasset/v1/lib/Cargo.toml
cloudasset1-cargo: cloudasset1
	set -o pipefail; ( cd cloudasset/v1/lib && cargo $(ARGS) ) 2>&1 | tee cloudasset/v1/cargo-errors.log && rm cloudasset/v1/cargo-errors.log

cloudasset/v1beta1/lib/Cargo.toml: ../etc/api/cloudasset/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudasset/v1beta1 2>&1 | tee cloudasset/v1beta1/generator-errors.log && rm cloudasset/v1beta1/generator-errors.log
cloudasset1_beta1: cloudasset/v1beta1/lib/Cargo.toml
cloudasset1_beta1-cargo: cloudasset1_beta1
	set -o pipefail; ( cd cloudasset/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee cloudasset/v1beta1/cargo-errors.log && rm cloudasset/v1beta1/cargo-errors.log

cloudbilling/v1/lib/Cargo.toml: ../etc/api/cloudbilling/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudbilling/v1 2>&1 | tee cloudbilling/v1/generator-errors.log && rm cloudbilling/v1/generator-errors.log
cloudbilling1: cloudbilling/v1/lib/Cargo.toml
cloudbilling1-cargo: cloudbilling1
	set -o pipefail; ( cd cloudbilling/v1/lib && cargo $(ARGS) ) 2>&1 | tee cloudbilling/v1/cargo-errors.log && rm cloudbilling/v1/cargo-errors.log

cloudbuild/v1alpha1/lib/Cargo.toml: ../etc/api/cloudbuild/v1alpha1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudbuild/v1alpha1 2>&1 | tee cloudbuild/v1alpha1/generator-errors.log && rm cloudbuild/v1alpha1/generator-errors.log
cloudbuild1_alpha1: cloudbuild/v1alpha1/lib/Cargo.toml
cloudbuild1_alpha1-cargo: cloudbuild1_alpha1
	set -o pipefail; ( cd cloudbuild/v1alpha1/lib && cargo $(ARGS) ) 2>&1 | tee cloudbuild/v1alpha1/cargo-errors.log && rm cloudbuild/v1alpha1/cargo-errors.log

cloudbuild/v1/lib/Cargo.toml: ../etc/api/cloudbuild/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudbuild/v1 2>&1 | tee cloudbuild/v1/generator-errors.log && rm cloudbuild/v1/generator-errors.log
cloudbuild1: cloudbuild/v1/lib/Cargo.toml
cloudbuild1-cargo: cloudbuild1
	set -o pipefail; ( cd cloudbuild/v1/lib && cargo $(ARGS) ) 2>&1 | tee cloudbuild/v1/cargo-errors.log && rm cloudbuild/v1/cargo-errors.log

clouddebugger/v2/lib/Cargo.toml: ../etc/api/clouddebugger/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< clouddebugger/v2 2>&1 | tee clouddebugger/v2/generator-errors.log && rm clouddebugger/v2/generator-errors.log
clouddebugger2: clouddebugger/v2/lib/Cargo.toml
clouddebugger2-cargo: clouddebugger2
	set -o pipefail; ( cd clouddebugger/v2/lib && cargo $(ARGS) ) 2>&1 | tee clouddebugger/v2/cargo-errors.log && rm clouddebugger/v2/cargo-errors.log

clouderrorreporting/v1beta1/lib/Cargo.toml: ../etc/api/clouderrorreporting/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< clouderrorreporting/v1beta1 2>&1 | tee clouderrorreporting/v1beta1/generator-errors.log && rm clouderrorreporting/v1beta1/generator-errors.log
clouderrorreporting1_beta1: clouderrorreporting/v1beta1/lib/Cargo.toml
clouderrorreporting1_beta1-cargo: clouderrorreporting1_beta1
	set -o pipefail; ( cd clouderrorreporting/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee clouderrorreporting/v1beta1/cargo-errors.log && rm clouderrorreporting/v1beta1/cargo-errors.log

cloudfunctions/v1/lib/Cargo.toml: ../etc/api/cloudfunctions/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudfunctions/v1 2>&1 | tee cloudfunctions/v1/generator-errors.log && rm cloudfunctions/v1/generator-errors.log
cloudfunctions1: cloudfunctions/v1/lib/Cargo.toml
cloudfunctions1-cargo: cloudfunctions1
	set -o pipefail; ( cd cloudfunctions/v1/lib && cargo $(ARGS) ) 2>&1 | tee cloudfunctions/v1/cargo-errors.log && rm cloudfunctions/v1/cargo-errors.log

cloudfunctions/v1beta2/lib/Cargo.toml: ../etc/api/cloudfunctions/v1beta2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudfunctions/v1beta2 2>&1 | tee cloudfunctions/v1beta2/generator-errors.log && rm cloudfunctions/v1beta2/generator-errors.log
cloudfunctions1_beta2: cloudfunctions/v1beta2/lib/Cargo.toml
cloudfunctions1_beta2-cargo: cloudfunctions1_beta2
	set -o pipefail; ( cd cloudfunctions/v1beta2/lib && cargo $(ARGS) ) 2>&1 | tee cloudfunctions/v1beta2/cargo-errors.log && rm cloudfunctions/v1beta2/cargo-errors.log

cloudidentity/v1/lib/Cargo.toml: ../etc/api/cloudidentity/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudidentity/v1 2>&1 | tee cloudidentity/v1/generator-errors.log && rm cloudidentity/v1/generator-errors.log
cloudidentity1: cloudidentity/v1/lib/Cargo.toml
cloudidentity1-cargo: cloudidentity1
	set -o pipefail; ( cd cloudidentity/v1/lib && cargo $(ARGS) ) 2>&1 | tee cloudidentity/v1/cargo-errors.log && rm cloudidentity/v1/cargo-errors.log

cloudidentity/v1beta1/lib/Cargo.toml: ../etc/api/cloudidentity/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudidentity/v1beta1 2>&1 | tee cloudidentity/v1beta1/generator-errors.log && rm cloudidentity/v1beta1/generator-errors.log
cloudidentity1_beta1: cloudidentity/v1beta1/lib/Cargo.toml
cloudidentity1_beta1-cargo: cloudidentity1_beta1
	set -o pipefail; ( cd cloudidentity/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee cloudidentity/v1beta1/cargo-errors.log && rm cloudidentity/v1beta1/cargo-errors.log

cloudiot/v1/lib/Cargo.toml: ../etc/api/cloudiot/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudiot/v1 2>&1 | tee cloudiot/v1/generator-errors.log && rm cloudiot/v1/generator-errors.log
cloudiot1: cloudiot/v1/lib/Cargo.toml
cloudiot1-cargo: cloudiot1
	set -o pipefail; ( cd cloudiot/v1/lib && cargo $(ARGS) ) 2>&1 | tee cloudiot/v1/cargo-errors.log && rm cloudiot/v1/cargo-errors.log

cloudkms/v1/lib/Cargo.toml: ../etc/api/cloudkms/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudkms/v1 2>&1 | tee cloudkms/v1/generator-errors.log && rm cloudkms/v1/generator-errors.log
cloudkms1: cloudkms/v1/lib/Cargo.toml
cloudkms1-cargo: cloudkms1
	set -o pipefail; ( cd cloudkms/v1/lib && cargo $(ARGS) ) 2>&1 | tee cloudkms/v1/cargo-errors.log && rm cloudkms/v1/cargo-errors.log

cloudprivatecatalog/v1beta1/lib/Cargo.toml: ../etc/api/cloudprivatecatalog/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudprivatecatalog/v1beta1 2>&1 | tee cloudprivatecatalog/v1beta1/generator-errors.log && rm cloudprivatecatalog/v1beta1/generator-errors.log
cloudprivatecatalog1_beta1: cloudprivatecatalog/v1beta1/lib/Cargo.toml
cloudprivatecatalog1_beta1-cargo: cloudprivatecatalog1_beta1
	set -o pipefail; ( cd cloudprivatecatalog/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee cloudprivatecatalog/v1beta1/cargo-errors.log && rm cloudprivatecatalog/v1beta1/cargo-errors.log

cloudprivatecatalogproducer/v1beta1/lib/Cargo.toml: ../etc/api/cloudprivatecatalogproducer/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudprivatecatalogproducer/v1beta1 2>&1 | tee cloudprivatecatalogproducer/v1beta1/generator-errors.log && rm cloudprivatecatalogproducer/v1beta1/generator-errors.log
cloudprivatecatalogproducer1_beta1: cloudprivatecatalogproducer/v1beta1/lib/Cargo.toml
cloudprivatecatalogproducer1_beta1-cargo: cloudprivatecatalogproducer1_beta1
	set -o pipefail; ( cd cloudprivatecatalogproducer/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee cloudprivatecatalogproducer/v1beta1/cargo-errors.log && rm cloudprivatecatalogproducer/v1beta1/cargo-errors.log

cloudprofiler/v2/lib/Cargo.toml: ../etc/api/cloudprofiler/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudprofiler/v2 2>&1 | tee cloudprofiler/v2/generator-errors.log && rm cloudprofiler/v2/generator-errors.log
cloudprofiler2: cloudprofiler/v2/lib/Cargo.toml
cloudprofiler2-cargo: cloudprofiler2
	set -o pipefail; ( cd cloudprofiler/v2/lib && cargo $(ARGS) ) 2>&1 | tee cloudprofiler/v2/cargo-errors.log && rm cloudprofiler/v2/cargo-errors.log

cloudresourcemanager/v1/lib/Cargo.toml: ../etc/api/cloudresourcemanager/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudresourcemanager/v1 2>&1 | tee cloudresourcemanager/v1/generator-errors.log && rm cloudresourcemanager/v1/generator-errors.log
cloudresourcemanager1: cloudresourcemanager/v1/lib/Cargo.toml
cloudresourcemanager1-cargo: cloudresourcemanager1
	set -o pipefail; ( cd cloudresourcemanager/v1/lib && cargo $(ARGS) ) 2>&1 | tee cloudresourcemanager/v1/cargo-errors.log && rm cloudresourcemanager/v1/cargo-errors.log

cloudresourcemanager/v1beta1/lib/Cargo.toml: ../etc/api/cloudresourcemanager/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudresourcemanager/v1beta1 2>&1 | tee cloudresourcemanager/v1beta1/generator-errors.log && rm cloudresourcemanager/v1beta1/generator-errors.log
cloudresourcemanager1_beta1: cloudresourcemanager/v1beta1/lib/Cargo.toml
cloudresourcemanager1_beta1-cargo: cloudresourcemanager1_beta1
	set -o pipefail; ( cd cloudresourcemanager/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee cloudresourcemanager/v1beta1/cargo-errors.log && rm cloudresourcemanager/v1beta1/cargo-errors.log

cloudresourcemanager/v2/lib/Cargo.toml: ../etc/api/cloudresourcemanager/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudresourcemanager/v2 2>&1 | tee cloudresourcemanager/v2/generator-errors.log && rm cloudresourcemanager/v2/generator-errors.log
cloudresourcemanager2: cloudresourcemanager/v2/lib/Cargo.toml
cloudresourcemanager2-cargo: cloudresourcemanager2
	set -o pipefail; ( cd cloudresourcemanager/v2/lib && cargo $(ARGS) ) 2>&1 | tee cloudresourcemanager/v2/cargo-errors.log && rm cloudresourcemanager/v2/cargo-errors.log

cloudresourcemanager/v2beta1/lib/Cargo.toml: ../etc/api/cloudresourcemanager/v2beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudresourcemanager/v2beta1 2>&1 | tee cloudresourcemanager/v2beta1/generator-errors.log && rm cloudresourcemanager/v2beta1/generator-errors.log
cloudresourcemanager2_beta1: cloudresourcemanager/v2beta1/lib/Cargo.toml
cloudresourcemanager2_beta1-cargo: cloudresourcemanager2_beta1
	set -o pipefail; ( cd cloudresourcemanager/v2beta1/lib && cargo $(ARGS) ) 2>&1 | tee cloudresourcemanager/v2beta1/cargo-errors.log && rm cloudresourcemanager/v2beta1/cargo-errors.log

cloudscheduler/v1/lib/Cargo.toml: ../etc/api/cloudscheduler/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudscheduler/v1 2>&1 | tee cloudscheduler/v1/generator-errors.log && rm cloudscheduler/v1/generator-errors.log
cloudscheduler1: cloudscheduler/v1/lib/Cargo.toml
cloudscheduler1-cargo: cloudscheduler1
	set -o pipefail; ( cd cloudscheduler/v1/lib && cargo $(ARGS) ) 2>&1 | tee cloudscheduler/v1/cargo-errors.log && rm cloudscheduler/v1/cargo-errors.log

cloudscheduler/v1beta1/lib/Cargo.toml: ../etc/api/cloudscheduler/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudscheduler/v1beta1 2>&1 | tee cloudscheduler/v1beta1/generator-errors.log && rm cloudscheduler/v1beta1/generator-errors.log
cloudscheduler1_beta1: cloudscheduler/v1beta1/lib/Cargo.toml
cloudscheduler1_beta1-cargo: cloudscheduler1_beta1
	set -o pipefail; ( cd cloudscheduler/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee cloudscheduler/v1beta1/cargo-errors.log && rm cloudscheduler/v1beta1/cargo-errors.log

cloudsearch/v1/lib/Cargo.toml: ../etc/api/cloudsearch/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudsearch/v1 2>&1 | tee cloudsearch/v1/generator-errors.log && rm cloudsearch/v1/generator-errors.log
cloudsearch1: cloudsearch/v1/lib/Cargo.toml
cloudsearch1-cargo: cloudsearch1
	set -o pipefail; ( cd cloudsearch/v1/lib && cargo $(ARGS) ) 2>&1 | tee cloudsearch/v1/cargo-errors.log && rm cloudsearch/v1/cargo-errors.log

cloudshell/v1alpha1/lib/Cargo.toml: ../etc/api/cloudshell/v1alpha1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudshell/v1alpha1 2>&1 | tee cloudshell/v1alpha1/generator-errors.log && rm cloudshell/v1alpha1/generator-errors.log
cloudshell1_alpha1: cloudshell/v1alpha1/lib/Cargo.toml
cloudshell1_alpha1-cargo: cloudshell1_alpha1
	set -o pipefail; ( cd cloudshell/v1alpha1/lib && cargo $(ARGS) ) 2>&1 | tee cloudshell/v1alpha1/cargo-errors.log && rm cloudshell/v1alpha1/cargo-errors.log

cloudshell/v1/lib/Cargo.toml: ../etc/api/cloudshell/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudshell/v1 2>&1 | tee cloudshell/v1/generator-errors.log && rm cloudshell/v1/generator-errors.log
cloudshell1: cloudshell/v1/lib/Cargo.toml
cloudshell1-cargo: cloudshell1
	set -o pipefail; ( cd cloudshell/v1/lib && cargo $(ARGS) ) 2>&1 | tee cloudshell/v1/cargo-errors.log && rm cloudshell/v1/cargo-errors.log

cloudtasks/v2/lib/Cargo.toml: ../etc/api/cloudtasks/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudtasks/v2 2>&1 | tee cloudtasks/v2/generator-errors.log && rm cloudtasks/v2/generator-errors.log
cloudtasks2: cloudtasks/v2/lib/Cargo.toml
cloudtasks2-cargo: cloudtasks2
	set -o pipefail; ( cd cloudtasks/v2/lib && cargo $(ARGS) ) 2>&1 | tee cloudtasks/v2/cargo-errors.log && rm cloudtasks/v2/cargo-errors.log

cloudtasks/v2beta2/lib/Cargo.toml: ../etc/api/cloudtasks/v2beta2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudtasks/v2beta2 2>&1 | tee cloudtasks/v2beta2/generator-errors.log && rm cloudtasks/v2beta2/generator-errors.log
cloudtasks2_beta2: cloudtasks/v2beta2/lib/Cargo.toml
cloudtasks2_beta2-cargo: cloudtasks2_beta2
	set -o pipefail; ( cd cloudtasks/v2beta2/lib && cargo $(ARGS) ) 2>&1 | tee cloudtasks/v2beta2/cargo-errors.log && rm cloudtasks/v2beta2/cargo-errors.log

cloudtasks/v2beta3/lib/Cargo.toml: ../etc/api/cloudtasks/v2beta3/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudtasks/v2beta3 2>&1 | tee cloudtasks/v2beta3/generator-errors.log && rm cloudtasks/v2beta3/generator-errors.log
cloudtasks2_beta3: cloudtasks/v2beta3/lib/Cargo.toml
cloudtasks2_beta3-cargo: cloudtasks2_beta3
	set -o pipefail; ( cd cloudtasks/v2beta3/lib && cargo $(ARGS) ) 2>&1 | tee cloudtasks/v2beta3/cargo-errors.log && rm cloudtasks/v2beta3/cargo-errors.log

cloudtrace/v1/lib/Cargo.toml: ../etc/api/cloudtrace/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudtrace/v1 2>&1 | tee cloudtrace/v1/generator-errors.log && rm cloudtrace/v1/generator-errors.log
cloudtrace1: cloudtrace/v1/lib/Cargo.toml
cloudtrace1-cargo: cloudtrace1
	set -o pipefail; ( cd cloudtrace/v1/lib && cargo $(ARGS) ) 2>&1 | tee cloudtrace/v1/cargo-errors.log && rm cloudtrace/v1/cargo-errors.log

cloudtrace/v2/lib/Cargo.toml: ../etc/api/cloudtrace/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< cloudtrace/v2 2>&1 | tee cloudtrace/v2/generator-errors.log && rm cloudtrace/v2/generator-errors.log
cloudtrace2: cloudtrace/v2/lib/Cargo.toml
cloudtrace2-cargo: cloudtrace2
	set -o pipefail; ( cd cloudtrace/v2/lib && cargo $(ARGS) ) 2>&1 | tee cloudtrace/v2/cargo-errors.log && rm cloudtrace/v2/cargo-errors.log

commentanalyzer/v1alpha1/lib/Cargo.toml: ../etc/api/commentanalyzer/v1alpha1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< commentanalyzer/v1alpha1 2>&1 | tee commentanalyzer/v1alpha1/generator-errors.log && rm commentanalyzer/v1alpha1/generator-errors.log
commentanalyzer1_alpha1: commentanalyzer/v1alpha1/lib/Cargo.toml
commentanalyzer1_alpha1-cargo: commentanalyzer1_alpha1
	set -o pipefail; ( cd commentanalyzer/v1alpha1/lib && cargo $(ARGS) ) 2>&1 | tee commentanalyzer/v1alpha1/cargo-errors.log && rm commentanalyzer/v1alpha1/cargo-errors.log

composer/v1/lib/Cargo.toml: ../etc/api/composer/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< composer/v1 2>&1 | tee composer/v1/generator-errors.log && rm composer/v1/generator-errors.log
composer1: composer/v1/lib/Cargo.toml
composer1-cargo: composer1
	set -o pipefail; ( cd composer/v1/lib && cargo $(ARGS) ) 2>&1 | tee composer/v1/cargo-errors.log && rm composer/v1/cargo-errors.log

composer/v1beta1/lib/Cargo.toml: ../etc/api/composer/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< composer/v1beta1 2>&1 | tee composer/v1beta1/generator-errors.log && rm composer/v1beta1/generator-errors.log
composer1_beta1: composer/v1beta1/lib/Cargo.toml
composer1_beta1-cargo: composer1_beta1
	set -o pipefail; ( cd composer/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee composer/v1beta1/cargo-errors.log && rm composer/v1beta1/cargo-errors.log

compute/alpha/lib/Cargo.toml: ../etc/api/compute/alpha/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< compute/alpha 2>&1 | tee compute/alpha/generator-errors.log && rm compute/alpha/generator-errors.log
computealpha: compute/alpha/lib/Cargo.toml
computealpha-cargo: computealpha
	set -o pipefail; ( cd compute/alpha/lib && cargo $(ARGS) ) 2>&1 | tee compute/alpha/cargo-errors.log && rm compute/alpha/cargo-errors.log

compute/beta/lib/Cargo.toml: ../etc/api/compute/beta/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< compute/beta 2>&1 | tee compute/beta/generator-errors.log && rm compute/beta/generator-errors.log
computebeta: compute/beta/lib/Cargo.toml
computebeta-cargo: computebeta
	set -o pipefail; ( cd compute/beta/lib && cargo $(ARGS) ) 2>&1 | tee compute/beta/cargo-errors.log && rm compute/beta/cargo-errors.log

compute/v1/lib/Cargo.toml: ../etc/api/compute/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< compute/v1 2>&1 | tee compute/v1/generator-errors.log && rm compute/v1/generator-errors.log
compute1: compute/v1/lib/Cargo.toml
compute1-cargo: compute1
	set -o pipefail; ( cd compute/v1/lib && cargo $(ARGS) ) 2>&1 | tee compute/v1/cargo-errors.log && rm compute/v1/cargo-errors.log

container/v1/lib/Cargo.toml: ../etc/api/container/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< container/v1 2>&1 | tee container/v1/generator-errors.log && rm container/v1/generator-errors.log
container1: container/v1/lib/Cargo.toml
container1-cargo: container1
	set -o pipefail; ( cd container/v1/lib && cargo $(ARGS) ) 2>&1 | tee container/v1/cargo-errors.log && rm container/v1/cargo-errors.log

container/v1beta1/lib/Cargo.toml: ../etc/api/container/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< container/v1beta1 2>&1 | tee container/v1beta1/generator-errors.log && rm container/v1beta1/generator-errors.log
container1_beta1: container/v1beta1/lib/Cargo.toml
container1_beta1-cargo: container1_beta1
	set -o pipefail; ( cd container/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee container/v1beta1/cargo-errors.log && rm container/v1beta1/cargo-errors.log

containeranalysis/v1alpha1/lib/Cargo.toml: ../etc/api/containeranalysis/v1alpha1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< containeranalysis/v1alpha1 2>&1 | tee containeranalysis/v1alpha1/generator-errors.log && rm containeranalysis/v1alpha1/generator-errors.log
containeranalysis1_alpha1: containeranalysis/v1alpha1/lib/Cargo.toml
containeranalysis1_alpha1-cargo: containeranalysis1_alpha1
	set -o pipefail; ( cd containeranalysis/v1alpha1/lib && cargo $(ARGS) ) 2>&1 | tee containeranalysis/v1alpha1/cargo-errors.log && rm containeranalysis/v1alpha1/cargo-errors.log

containeranalysis/v1beta1/lib/Cargo.toml: ../etc/api/containeranalysis/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< containeranalysis/v1beta1 2>&1 | tee containeranalysis/v1beta1/generator-errors.log && rm containeranalysis/v1beta1/generator-errors.log
containeranalysis1_beta1: containeranalysis/v1beta1/lib/Cargo.toml
containeranalysis1_beta1-cargo: containeranalysis1_beta1
	set -o pipefail; ( cd containeranalysis/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee containeranalysis/v1beta1/cargo-errors.log && rm containeranalysis/v1beta1/cargo-errors.log

content/v2/lib/Cargo.toml: ../etc/api/content/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< content/v2 2>&1 | tee content/v2/generator-errors.log && rm content/v2/generator-errors.log
content2: content/v2/lib/Cargo.toml
content2-cargo: content2
	set -o pipefail; ( cd content/v2/lib && cargo $(ARGS) ) 2>&1 | tee content/v2/cargo-errors.log && rm content/v2/cargo-errors.log

content/v2.1/lib/Cargo.toml: ../etc/api/content/v2.1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< content/v2.1 2>&1 | tee content/v2.1/generator-errors.log && rm content/v2.1/generator-errors.log
content2d1: content/v2.1/lib/Cargo.toml
content2d1-cargo: content2d1
	set -o pipefail; ( cd content/v2.1/lib && cargo $(ARGS) ) 2>&1 | tee content/v2.1/cargo-errors.log && rm content/v2.1/cargo-errors.log

customsearch/v1/lib/Cargo.toml: ../etc/api/customsearch/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< customsearch/v1 2>&1 | tee customsearch/v1/generator-errors.log && rm customsearch/v1/generator-errors.log
customsearch1: customsearch/v1/lib/Cargo.toml
customsearch1-cargo: customsearch1
	set -o pipefail; ( cd customsearch/v1/lib && cargo $(ARGS) ) 2>&1 | tee customsearch/v1/cargo-errors.log && rm customsearch/v1/cargo-errors.log

dataflow/v1b3/lib/Cargo.toml: ../etc/api/dataflow/v1b3/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< dataflow/v1b3 2>&1 | tee dataflow/v1b3/generator-errors.log && rm dataflow/v1b3/generator-errors.log
dataflow1_b3: dataflow/v1b3/lib/Cargo.toml
dataflow1_b3-cargo: dataflow1_b3
	set -o pipefail; ( cd dataflow/v1b3/lib && cargo $(ARGS) ) 2>&1 | tee dataflow/v1b3/cargo-errors.log && rm dataflow/v1b3/cargo-errors.log

datafusion/v1beta1/lib/Cargo.toml: ../etc/api/datafusion/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< datafusion/v1beta1 2>&1 | tee datafusion/v1beta1/generator-errors.log && rm datafusion/v1beta1/generator-errors.log
datafusion1_beta1: datafusion/v1beta1/lib/Cargo.toml
datafusion1_beta1-cargo: datafusion1_beta1
	set -o pipefail; ( cd datafusion/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee datafusion/v1beta1/cargo-errors.log && rm datafusion/v1beta1/cargo-errors.log

dataproc/v1/lib/Cargo.toml: ../etc/api/dataproc/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< dataproc/v1 2>&1 | tee dataproc/v1/generator-errors.log && rm dataproc/v1/generator-errors.log
dataproc1: dataproc/v1/lib/Cargo.toml
dataproc1-cargo: dataproc1
	set -o pipefail; ( cd dataproc/v1/lib && cargo $(ARGS) ) 2>&1 | tee dataproc/v1/cargo-errors.log && rm dataproc/v1/cargo-errors.log

dataproc/v1beta2/lib/Cargo.toml: ../etc/api/dataproc/v1beta2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< dataproc/v1beta2 2>&1 | tee dataproc/v1beta2/generator-errors.log && rm dataproc/v1beta2/generator-errors.log
dataproc1_beta2: dataproc/v1beta2/lib/Cargo.toml
dataproc1_beta2-cargo: dataproc1_beta2
	set -o pipefail; ( cd dataproc/v1beta2/lib && cargo $(ARGS) ) 2>&1 | tee dataproc/v1beta2/cargo-errors.log && rm dataproc/v1beta2/cargo-errors.log

datastore/v1/lib/Cargo.toml: ../etc/api/datastore/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< datastore/v1 2>&1 | tee datastore/v1/generator-errors.log && rm datastore/v1/generator-errors.log
datastore1: datastore/v1/lib/Cargo.toml
datastore1-cargo: datastore1
	set -o pipefail; ( cd datastore/v1/lib && cargo $(ARGS) ) 2>&1 | tee datastore/v1/cargo-errors.log && rm datastore/v1/cargo-errors.log

datastore/v1beta1/lib/Cargo.toml: ../etc/api/datastore/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< datastore/v1beta1 2>&1 | tee datastore/v1beta1/generator-errors.log && rm datastore/v1beta1/generator-errors.log
datastore1_beta1: datastore/v1beta1/lib/Cargo.toml
datastore1_beta1-cargo: datastore1_beta1
	set -o pipefail; ( cd datastore/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee datastore/v1beta1/cargo-errors.log && rm datastore/v1beta1/cargo-errors.log

datastore/v1beta3/lib/Cargo.toml: ../etc/api/datastore/v1beta3/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< datastore/v1beta3 2>&1 | tee datastore/v1beta3/generator-errors.log && rm datastore/v1beta3/generator-errors.log
datastore1_beta3: datastore/v1beta3/lib/Cargo.toml
datastore1_beta3-cargo: datastore1_beta3
	set -o pipefail; ( cd datastore/v1beta3/lib && cargo $(ARGS) ) 2>&1 | tee datastore/v1beta3/cargo-errors.log && rm datastore/v1beta3/cargo-errors.log

deploymentmanager/alpha/lib/Cargo.toml: ../etc/api/deploymentmanager/alpha/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< deploymentmanager/alpha 2>&1 | tee deploymentmanager/alpha/generator-errors.log && rm deploymentmanager/alpha/generator-errors.log
deploymentmanageralpha: deploymentmanager/alpha/lib/Cargo.toml
deploymentmanageralpha-cargo: deploymentmanageralpha
	set -o pipefail; ( cd deploymentmanager/alpha/lib && cargo $(ARGS) ) 2>&1 | tee deploymentmanager/alpha/cargo-errors.log && rm deploymentmanager/alpha/cargo-errors.log

deploymentmanager/v2beta/lib/Cargo.toml: ../etc/api/deploymentmanager/v2beta/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< deploymentmanager/v2beta 2>&1 | tee deploymentmanager/v2beta/generator-errors.log && rm deploymentmanager/v2beta/generator-errors.log
deploymentmanager2_beta: deploymentmanager/v2beta/lib/Cargo.toml
deploymentmanager2_beta-cargo: deploymentmanager2_beta
	set -o pipefail; ( cd deploymentmanager/v2beta/lib && cargo $(ARGS) ) 2>&1 | tee deploymentmanager/v2beta/cargo-errors.log && rm deploymentmanager/v2beta/cargo-errors.log

deploymentmanager/v2/lib/Cargo.toml: ../etc/api/deploymentmanager/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< deploymentmanager/v2 2>&1 | tee deploymentmanager/v2/generator-errors.log && rm deploymentmanager/v2/generator-errors.log
deploymentmanager2: deploymentmanager/v2/lib/Cargo.toml
deploymentmanager2-cargo: deploymentmanager2
	set -o pipefail; ( cd deploymentmanager/v2/lib && cargo $(ARGS) ) 2>&1 | tee deploymentmanager/v2/cargo-errors.log && rm deploymentmanager/v2/cargo-errors.log

dfareporting/v3.1/lib/Cargo.toml: ../etc/api/dfareporting/v3.1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< dfareporting/v3.1 2>&1 | tee dfareporting/v3.1/generator-errors.log && rm dfareporting/v3.1/generator-errors.log
dfareporting3d1: dfareporting/v3.1/lib/Cargo.toml
dfareporting3d1-cargo: dfareporting3d1
	set -o pipefail; ( cd dfareporting/v3.1/lib && cargo $(ARGS) ) 2>&1 | tee dfareporting/v3.1/cargo-errors.log && rm dfareporting/v3.1/cargo-errors.log

dfareporting/v3.2/lib/Cargo.toml: ../etc/api/dfareporting/v3.2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< dfareporting/v3.2 2>&1 | tee dfareporting/v3.2/generator-errors.log && rm dfareporting/v3.2/generator-errors.log
dfareporting3d2: dfareporting/v3.2/lib/Cargo.toml
dfareporting3d2-cargo: dfareporting3d2
	set -o pipefail; ( cd dfareporting/v3.2/lib && cargo $(ARGS) ) 2>&1 | tee dfareporting/v3.2/cargo-errors.log && rm dfareporting/v3.2/cargo-errors.log

dfareporting/v3.3/lib/Cargo.toml: ../etc/api/dfareporting/v3.3/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< dfareporting/v3.3 2>&1 | tee dfareporting/v3.3/generator-errors.log && rm dfareporting/v3.3/generator-errors.log
dfareporting3d3: dfareporting/v3.3/lib/Cargo.toml
dfareporting3d3-cargo: dfareporting3d3
	set -o pipefail; ( cd dfareporting/v3.3/lib && cargo $(ARGS) ) 2>&1 | tee dfareporting/v3.3/cargo-errors.log && rm dfareporting/v3.3/cargo-errors.log

dialogflow/v2/lib/Cargo.toml: ../etc/api/dialogflow/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< dialogflow/v2 2>&1 | tee dialogflow/v2/generator-errors.log && rm dialogflow/v2/generator-errors.log
dialogflow2: dialogflow/v2/lib/Cargo.toml
dialogflow2-cargo: dialogflow2
	set -o pipefail; ( cd dialogflow/v2/lib && cargo $(ARGS) ) 2>&1 | tee dialogflow/v2/cargo-errors.log && rm dialogflow/v2/cargo-errors.log

dialogflow/v2beta1/lib/Cargo.toml: ../etc/api/dialogflow/v2beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< dialogflow/v2beta1 2>&1 | tee dialogflow/v2beta1/generator-errors.log && rm dialogflow/v2beta1/generator-errors.log
dialogflow2_beta1: dialogflow/v2beta1/lib/Cargo.toml
dialogflow2_beta1-cargo: dialogflow2_beta1
	set -o pipefail; ( cd dialogflow/v2beta1/lib && cargo $(ARGS) ) 2>&1 | tee dialogflow/v2beta1/cargo-errors.log && rm dialogflow/v2beta1/cargo-errors.log

digitalassetlinks/v1/lib/Cargo.toml: ../etc/api/digitalassetlinks/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< digitalassetlinks/v1 2>&1 | tee digitalassetlinks/v1/generator-errors.log && rm digitalassetlinks/v1/generator-errors.log
digitalassetlinks1: digitalassetlinks/v1/lib/Cargo.toml
digitalassetlinks1-cargo: digitalassetlinks1
	set -o pipefail; ( cd digitalassetlinks/v1/lib && cargo $(ARGS) ) 2>&1 | tee digitalassetlinks/v1/cargo-errors.log && rm digitalassetlinks/v1/cargo-errors.log

discovery/v1/lib/Cargo.toml: ../etc/api/discovery/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< discovery/v1 2>&1 | tee discovery/v1/generator-errors.log && rm discovery/v1/generator-errors.log
discovery1: discovery/v1/lib/Cargo.toml
discovery1-cargo: discovery1
	set -o pipefail; ( cd discovery/v1/lib && cargo $(ARGS) ) 2>&1 | tee discovery/v1/cargo-errors.log && rm discovery/v1/cargo-errors.log

dlp/v2/lib/Cargo.toml: ../etc/api/dlp/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< dlp/v2 2>&1 | tee dlp/v2/generator-errors.log && rm dlp/v2/generator-errors.log
dlp2: dlp/v2/lib/Cargo.toml
dlp2-cargo: dlp2
	set -o pipefail; ( cd dlp/v2/lib && cargo $(ARGS) ) 2>&1 | tee dlp/v2/cargo-errors.log && rm dlp/v2/cargo-errors.log

dns/v1/lib/Cargo.toml: ../etc/api/dns/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< dns/v1 2>&1 | tee dns/v1/generator-errors.log && rm dns/v1/generator-errors.log
dns1: dns/v1/lib/Cargo.toml
dns1-cargo: dns1
	set -o pipefail; ( cd dns/v1/lib && cargo $(ARGS) ) 2>&1 | tee dns/v1/cargo-errors.log && rm dns/v1/cargo-errors.log

dns/v1beta2/lib/Cargo.toml: ../etc/api/dns/v1beta2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< dns/v1beta2 2>&1 | tee dns/v1beta2/generator-errors.log && rm dns/v1beta2/generator-errors.log
dns1_beta2: dns/v1beta2/lib/Cargo.toml
dns1_beta2-cargo: dns1_beta2
	set -o pipefail; ( cd dns/v1beta2/lib && cargo $(ARGS) ) 2>&1 | tee dns/v1beta2/cargo-errors.log && rm dns/v1beta2/cargo-errors.log

dns/v2beta1/lib/Cargo.toml: ../etc/api/dns/v2beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< dns/v2beta1 2>&1 | tee dns/v2beta1/generator-errors.log && rm dns/v2beta1/generator-errors.log
dns2_beta1: dns/v2beta1/lib/Cargo.toml
dns2_beta1-cargo: dns2_beta1
	set -o pipefail; ( cd dns/v2beta1/lib && cargo $(ARGS) ) 2>&1 | tee dns/v2beta1/cargo-errors.log && rm dns/v2beta1/cargo-errors.log

docs/v1/lib/Cargo.toml: ../etc/api/docs/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< docs/v1 2>&1 | tee docs/v1/generator-errors.log && rm docs/v1/generator-errors.log
docs1: docs/v1/lib/Cargo.toml
docs1-cargo: docs1
	set -o pipefail; ( cd docs/v1/lib && cargo $(ARGS) ) 2>&1 | tee docs/v1/cargo-errors.log && rm docs/v1/cargo-errors.log

doubleclickbidmanager/v1/lib/Cargo.toml: ../etc/api/doubleclickbidmanager/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< doubleclickbidmanager/v1 2>&1 | tee doubleclickbidmanager/v1/generator-errors.log && rm doubleclickbidmanager/v1/generator-errors.log
doubleclickbidmanager1: doubleclickbidmanager/v1/lib/Cargo.toml
doubleclickbidmanager1-cargo: doubleclickbidmanager1
	set -o pipefail; ( cd doubleclickbidmanager/v1/lib && cargo $(ARGS) ) 2>&1 | tee doubleclickbidmanager/v1/cargo-errors.log && rm doubleclickbidmanager/v1/cargo-errors.log

doubleclicksearch/v2/lib/Cargo.toml: ../etc/api/doubleclicksearch/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< doubleclicksearch/v2 2>&1 | tee doubleclicksearch/v2/generator-errors.log && rm doubleclicksearch/v2/generator-errors.log
doubleclicksearch2: doubleclicksearch/v2/lib/Cargo.toml
doubleclicksearch2-cargo: doubleclicksearch2
	set -o pipefail; ( cd doubleclicksearch/v2/lib && cargo $(ARGS) ) 2>&1 | tee doubleclicksearch/v2/cargo-errors.log && rm doubleclicksearch/v2/cargo-errors.log

drive/v2/lib/Cargo.toml: ../etc/api/drive/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< drive/v2 2>&1 | tee drive/v2/generator-errors.log && rm drive/v2/generator-errors.log
drive2: drive/v2/lib/Cargo.toml
drive2-cargo: drive2
	set -o pipefail; ( cd drive/v2/lib && cargo $(ARGS) ) 2>&1 | tee drive/v2/cargo-errors.log && rm drive/v2/cargo-errors.log

drive/v3/lib/Cargo.toml: ../etc/api/drive/v3/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< drive/v3 2>&1 | tee drive/v3/generator-errors.log && rm drive/v3/generator-errors.log
drive3: drive/v3/lib/Cargo.toml
drive3-cargo: drive3
	set -o pipefail; ( cd drive/v3/lib && cargo $(ARGS) ) 2>&1 | tee drive/v3/cargo-errors.log && rm drive/v3/cargo-errors.log

driveactivity/v2/lib/Cargo.toml: ../etc/api/driveactivity/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< driveactivity/v2 2>&1 | tee driveactivity/v2/generator-errors.log && rm driveactivity/v2/generator-errors.log
driveactivity2: driveactivity/v2/lib/Cargo.toml
driveactivity2-cargo: driveactivity2
	set -o pipefail; ( cd driveactivity/v2/lib && cargo $(ARGS) ) 2>&1 | tee driveactivity/v2/cargo-errors.log && rm driveactivity/v2/cargo-errors.log

factchecktools/v1alpha1/lib/Cargo.toml: ../etc/api/factchecktools/v1alpha1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< factchecktools/v1alpha1 2>&1 | tee factchecktools/v1alpha1/generator-errors.log && rm factchecktools/v1alpha1/generator-errors.log
factchecktools1_alpha1: factchecktools/v1alpha1/lib/Cargo.toml
factchecktools1_alpha1-cargo: factchecktools1_alpha1
	set -o pipefail; ( cd factchecktools/v1alpha1/lib && cargo $(ARGS) ) 2>&1 | tee factchecktools/v1alpha1/cargo-errors.log && rm factchecktools/v1alpha1/cargo-errors.log

fcm/v1/lib/Cargo.toml: ../etc/api/fcm/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< fcm/v1 2>&1 | tee fcm/v1/generator-errors.log && rm fcm/v1/generator-errors.log
fcm1: fcm/v1/lib/Cargo.toml
fcm1-cargo: fcm1
	set -o pipefail; ( cd fcm/v1/lib && cargo $(ARGS) ) 2>&1 | tee fcm/v1/cargo-errors.log && rm fcm/v1/cargo-errors.log

file/v1/lib/Cargo.toml: ../etc/api/file/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< file/v1 2>&1 | tee file/v1/generator-errors.log && rm file/v1/generator-errors.log
file1: file/v1/lib/Cargo.toml
file1-cargo: file1
	set -o pipefail; ( cd file/v1/lib && cargo $(ARGS) ) 2>&1 | tee file/v1/cargo-errors.log && rm file/v1/cargo-errors.log

file/v1beta1/lib/Cargo.toml: ../etc/api/file/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< file/v1beta1 2>&1 | tee file/v1beta1/generator-errors.log && rm file/v1beta1/generator-errors.log
file1_beta1: file/v1beta1/lib/Cargo.toml
file1_beta1-cargo: file1_beta1
	set -o pipefail; ( cd file/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee file/v1beta1/cargo-errors.log && rm file/v1beta1/cargo-errors.log

firebase/v1beta1/lib/Cargo.toml: ../etc/api/firebase/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< firebase/v1beta1 2>&1 | tee firebase/v1beta1/generator-errors.log && rm firebase/v1beta1/generator-errors.log
firebase1_beta1: firebase/v1beta1/lib/Cargo.toml
firebase1_beta1-cargo: firebase1_beta1
	set -o pipefail; ( cd firebase/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee firebase/v1beta1/cargo-errors.log && rm firebase/v1beta1/cargo-errors.log

firebasedynamiclinks/v1/lib/Cargo.toml: ../etc/api/firebasedynamiclinks/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< firebasedynamiclinks/v1 2>&1 | tee firebasedynamiclinks/v1/generator-errors.log && rm firebasedynamiclinks/v1/generator-errors.log
firebasedynamiclinks1: firebasedynamiclinks/v1/lib/Cargo.toml
firebasedynamiclinks1-cargo: firebasedynamiclinks1
	set -o pipefail; ( cd firebasedynamiclinks/v1/lib && cargo $(ARGS) ) 2>&1 | tee firebasedynamiclinks/v1/cargo-errors.log && rm firebasedynamiclinks/v1/cargo-errors.log

firebasehosting/v1beta1/lib/Cargo.toml: ../etc/api/firebasehosting/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< firebasehosting/v1beta1 2>&1 | tee firebasehosting/v1beta1/generator-errors.log && rm firebasehosting/v1beta1/generator-errors.log
firebasehosting1_beta1: firebasehosting/v1beta1/lib/Cargo.toml
firebasehosting1_beta1-cargo: firebasehosting1_beta1
	set -o pipefail; ( cd firebasehosting/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee firebasehosting/v1beta1/cargo-errors.log && rm firebasehosting/v1beta1/cargo-errors.log

firebaserules/v1/lib/Cargo.toml: ../etc/api/firebaserules/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< firebaserules/v1 2>&1 | tee firebaserules/v1/generator-errors.log && rm firebaserules/v1/generator-errors.log
firebaserules1: firebaserules/v1/lib/Cargo.toml
firebaserules1-cargo: firebaserules1
	set -o pipefail; ( cd firebaserules/v1/lib && cargo $(ARGS) ) 2>&1 | tee firebaserules/v1/cargo-errors.log && rm firebaserules/v1/cargo-errors.log

firestore/v1/lib/Cargo.toml: ../etc/api/firestore/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< firestore/v1 2>&1 | tee firestore/v1/generator-errors.log && rm firestore/v1/generator-errors.log
firestore1: firestore/v1/lib/Cargo.toml
firestore1-cargo: firestore1
	set -o pipefail; ( cd firestore/v1/lib && cargo $(ARGS) ) 2>&1 | tee firestore/v1/cargo-errors.log && rm firestore/v1/cargo-errors.log

firestore/v1beta1/lib/Cargo.toml: ../etc/api/firestore/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< firestore/v1beta1 2>&1 | tee firestore/v1beta1/generator-errors.log && rm firestore/v1beta1/generator-errors.log
firestore1_beta1: firestore/v1beta1/lib/Cargo.toml
firestore1_beta1-cargo: firestore1_beta1
	set -o pipefail; ( cd firestore/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee firestore/v1beta1/cargo-errors.log && rm firestore/v1beta1/cargo-errors.log

firestore/v1beta2/lib/Cargo.toml: ../etc/api/firestore/v1beta2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< firestore/v1beta2 2>&1 | tee firestore/v1beta2/generator-errors.log && rm firestore/v1beta2/generator-errors.log
firestore1_beta2: firestore/v1beta2/lib/Cargo.toml
firestore1_beta2-cargo: firestore1_beta2
	set -o pipefail; ( cd firestore/v1beta2/lib && cargo $(ARGS) ) 2>&1 | tee firestore/v1beta2/cargo-errors.log && rm firestore/v1beta2/cargo-errors.log

fitness/v1/lib/Cargo.toml: ../etc/api/fitness/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< fitness/v1 2>&1 | tee fitness/v1/generator-errors.log && rm fitness/v1/generator-errors.log
fitness1: fitness/v1/lib/Cargo.toml
fitness1-cargo: fitness1
	set -o pipefail; ( cd fitness/v1/lib && cargo $(ARGS) ) 2>&1 | tee fitness/v1/cargo-errors.log && rm fitness/v1/cargo-errors.log

fusiontables/v1/lib/Cargo.toml: ../etc/api/fusiontables/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< fusiontables/v1 2>&1 | tee fusiontables/v1/generator-errors.log && rm fusiontables/v1/generator-errors.log
fusiontables1: fusiontables/v1/lib/Cargo.toml
fusiontables1-cargo: fusiontables1
	set -o pipefail; ( cd fusiontables/v1/lib && cargo $(ARGS) ) 2>&1 | tee fusiontables/v1/cargo-errors.log && rm fusiontables/v1/cargo-errors.log

fusiontables/v2/lib/Cargo.toml: ../etc/api/fusiontables/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< fusiontables/v2 2>&1 | tee fusiontables/v2/generator-errors.log && rm fusiontables/v2/generator-errors.log
fusiontables2: fusiontables/v2/lib/Cargo.toml
fusiontables2-cargo: fusiontables2
	set -o pipefail; ( cd fusiontables/v2/lib && cargo $(ARGS) ) 2>&1 | tee fusiontables/v2/cargo-errors.log && rm fusiontables/v2/cargo-errors.log

games/v1/lib/Cargo.toml: ../etc/api/games/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< games/v1 2>&1 | tee games/v1/generator-errors.log && rm games/v1/generator-errors.log
games1: games/v1/lib/Cargo.toml
games1-cargo: games1
	set -o pipefail; ( cd games/v1/lib && cargo $(ARGS) ) 2>&1 | tee games/v1/cargo-errors.log && rm games/v1/cargo-errors.log

gamesConfiguration/v1configuration/lib/Cargo.toml: ../etc/api/gamesConfiguration/v1configuration/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< gamesConfiguration/v1configuration 2>&1 | tee gamesConfiguration/v1configuration/generator-errors.log && rm gamesConfiguration/v1configuration/generator-errors.log
gamesConfiguration1_configuration: gamesConfiguration/v1configuration/lib/Cargo.toml
gamesConfiguration1_configuration-cargo: gamesConfiguration1_configuration
	set -o pipefail; ( cd gamesConfiguration/v1configuration/lib && cargo $(ARGS) ) 2>&1 | tee gamesConfiguration/v1configuration/cargo-errors.log && rm gamesConfiguration/v1configuration/cargo-errors.log

gamesManagement/v1management/lib/Cargo.toml: ../etc/api/gamesManagement/v1management/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< gamesManagement/v1management 2>&1 | tee gamesManagement/v1management/generator-errors.log && rm gamesManagement/v1management/generator-errors.log
gamesManagement1_management: gamesManagement/v1management/lib/Cargo.toml
gamesManagement1_management-cargo: gamesManagement1_management
	set -o pipefail; ( cd gamesManagement/v1management/lib && cargo $(ARGS) ) 2>&1 | tee gamesManagement/v1management/cargo-errors.log && rm gamesManagement/v1management/cargo-errors.log

genomics/v1alpha2/lib/Cargo.toml: ../etc/api/genomics/v1alpha2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< genomics/v1alpha2 2>&1 | tee genomics/v1alpha2/generator-errors.log && rm genomics/v1alpha2/generator-errors.log
genomics1_alpha2: genomics/v1alpha2/lib/Cargo.toml
genomics1_alpha2-cargo: genomics1_alpha2
	set -o pipefail; ( cd genomics/v1alpha2/lib && cargo $(ARGS) ) 2>&1 | tee genomics/v1alpha2/cargo-errors.log && rm genomics/v1alpha2/cargo-errors.log

genomics/v2alpha1/lib/Cargo.toml: ../etc/api/genomics/v2alpha1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< genomics/v2alpha1 2>&1 | tee genomics/v2alpha1/generator-errors.log && rm genomics/v2alpha1/generator-errors.log
genomics2_alpha1: genomics/v2alpha1/lib/Cargo.toml
genomics2_alpha1-cargo: genomics2_alpha1
	set -o pipefail; ( cd genomics/v2alpha1/lib && cargo $(ARGS) ) 2>&1 | tee genomics/v2alpha1/cargo-errors.log && rm genomics/v2alpha1/cargo-errors.log

genomics/v1/lib/Cargo.toml: ../etc/api/genomics/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< genomics/v1 2>&1 | tee genomics/v1/generator-errors.log && rm genomics/v1/generator-errors.log
genomics1: genomics/v1/lib/Cargo.toml
genomics1-cargo: genomics1
	set -o pipefail; ( cd genomics/v1/lib && cargo $(ARGS) ) 2>&1 | tee genomics/v1/cargo-errors.log && rm genomics/v1/cargo-errors.log

gmail/v1/lib/Cargo.toml: ../etc/api/gmail/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< gmail/v1 2>&1 | tee gmail/v1/generator-errors.log && rm gmail/v1/generator-errors.log
gmail1: gmail/v1/lib/Cargo.toml
gmail1-cargo: gmail1
	set -o pipefail; ( cd gmail/v1/lib && cargo $(ARGS) ) 2>&1 | tee gmail/v1/cargo-errors.log && rm gmail/v1/cargo-errors.log

groupsmigration/v1/lib/Cargo.toml: ../etc/api/groupsmigration/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< groupsmigration/v1 2>&1 | tee groupsmigration/v1/generator-errors.log && rm groupsmigration/v1/generator-errors.log
groupsmigration1: groupsmigration/v1/lib/Cargo.toml
groupsmigration1-cargo: groupsmigration1
	set -o pipefail; ( cd groupsmigration/v1/lib && cargo $(ARGS) ) 2>&1 | tee groupsmigration/v1/cargo-errors.log && rm groupsmigration/v1/cargo-errors.log

groupssettings/v1/lib/Cargo.toml: ../etc/api/groupssettings/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< groupssettings/v1 2>&1 | tee groupssettings/v1/generator-errors.log && rm groupssettings/v1/generator-errors.log
groupssettings1: groupssettings/v1/lib/Cargo.toml
groupssettings1-cargo: groupssettings1
	set -o pipefail; ( cd groupssettings/v1/lib && cargo $(ARGS) ) 2>&1 | tee groupssettings/v1/cargo-errors.log && rm groupssettings/v1/cargo-errors.log

healthcare/v1alpha2/lib/Cargo.toml: ../etc/api/healthcare/v1alpha2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< healthcare/v1alpha2 2>&1 | tee healthcare/v1alpha2/generator-errors.log && rm healthcare/v1alpha2/generator-errors.log
healthcare1_alpha2: healthcare/v1alpha2/lib/Cargo.toml
healthcare1_alpha2-cargo: healthcare1_alpha2
	set -o pipefail; ( cd healthcare/v1alpha2/lib && cargo $(ARGS) ) 2>&1 | tee healthcare/v1alpha2/cargo-errors.log && rm healthcare/v1alpha2/cargo-errors.log

healthcare/v1beta1/lib/Cargo.toml: ../etc/api/healthcare/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< healthcare/v1beta1 2>&1 | tee healthcare/v1beta1/generator-errors.log && rm healthcare/v1beta1/generator-errors.log
healthcare1_beta1: healthcare/v1beta1/lib/Cargo.toml
healthcare1_beta1-cargo: healthcare1_beta1
	set -o pipefail; ( cd healthcare/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee healthcare/v1beta1/cargo-errors.log && rm healthcare/v1beta1/cargo-errors.log

iam/v1/lib/Cargo.toml: ../etc/api/iam/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< iam/v1 2>&1 | tee iam/v1/generator-errors.log && rm iam/v1/generator-errors.log
iam1: iam/v1/lib/Cargo.toml
iam1-cargo: iam1
	set -o pipefail; ( cd iam/v1/lib && cargo $(ARGS) ) 2>&1 | tee iam/v1/cargo-errors.log && rm iam/v1/cargo-errors.log

iamcredentials/v1/lib/Cargo.toml: ../etc/api/iamcredentials/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< iamcredentials/v1 2>&1 | tee iamcredentials/v1/generator-errors.log && rm iamcredentials/v1/generator-errors.log
iamcredentials1: iamcredentials/v1/lib/Cargo.toml
iamcredentials1-cargo: iamcredentials1
	set -o pipefail; ( cd iamcredentials/v1/lib && cargo $(ARGS) ) 2>&1 | tee iamcredentials/v1/cargo-errors.log && rm iamcredentials/v1/cargo-errors.log

iap/v1/lib/Cargo.toml: ../etc/api/iap/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< iap/v1 2>&1 | tee iap/v1/generator-errors.log && rm iap/v1/generator-errors.log
iap1: iap/v1/lib/Cargo.toml
iap1-cargo: iap1
	set -o pipefail; ( cd iap/v1/lib && cargo $(ARGS) ) 2>&1 | tee iap/v1/cargo-errors.log && rm iap/v1/cargo-errors.log

iap/v1beta1/lib/Cargo.toml: ../etc/api/iap/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< iap/v1beta1 2>&1 | tee iap/v1beta1/generator-errors.log && rm iap/v1beta1/generator-errors.log
iap1_beta1: iap/v1beta1/lib/Cargo.toml
iap1_beta1-cargo: iap1_beta1
	set -o pipefail; ( cd iap/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee iap/v1beta1/cargo-errors.log && rm iap/v1beta1/cargo-errors.log

identitytoolkit/v3/lib/Cargo.toml: ../etc/api/identitytoolkit/v3/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< identitytoolkit/v3 2>&1 | tee identitytoolkit/v3/generator-errors.log && rm identitytoolkit/v3/generator-errors.log
identitytoolkit3: identitytoolkit/v3/lib/Cargo.toml
identitytoolkit3-cargo: identitytoolkit3
	set -o pipefail; ( cd identitytoolkit/v3/lib && cargo $(ARGS) ) 2>&1 | tee identitytoolkit/v3/cargo-errors.log && rm identitytoolkit/v3/cargo-errors.log

indexing/v3/lib/Cargo.toml: ../etc/api/indexing/v3/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< indexing/v3 2>&1 | tee indexing/v3/generator-errors.log && rm indexing/v3/generator-errors.log
indexing3: indexing/v3/lib/Cargo.toml
indexing3-cargo: indexing3
	set -o pipefail; ( cd indexing/v3/lib && cargo $(ARGS) ) 2>&1 | tee indexing/v3/cargo-errors.log && rm indexing/v3/cargo-errors.log

jobs/v3p1beta1/lib/Cargo.toml: ../etc/api/jobs/v3p1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< jobs/v3p1beta1 2>&1 | tee jobs/v3p1beta1/generator-errors.log && rm jobs/v3p1beta1/generator-errors.log
jobs3_p1beta1: jobs/v3p1beta1/lib/Cargo.toml
jobs3_p1beta1-cargo: jobs3_p1beta1
	set -o pipefail; ( cd jobs/v3p1beta1/lib && cargo $(ARGS) ) 2>&1 | tee jobs/v3p1beta1/cargo-errors.log && rm jobs/v3p1beta1/cargo-errors.log

jobs/v2/lib/Cargo.toml: ../etc/api/jobs/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< jobs/v2 2>&1 | tee jobs/v2/generator-errors.log && rm jobs/v2/generator-errors.log
jobs2: jobs/v2/lib/Cargo.toml
jobs2-cargo: jobs2
	set -o pipefail; ( cd jobs/v2/lib && cargo $(ARGS) ) 2>&1 | tee jobs/v2/cargo-errors.log && rm jobs/v2/cargo-errors.log

jobs/v3/lib/Cargo.toml: ../etc/api/jobs/v3/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< jobs/v3 2>&1 | tee jobs/v3/generator-errors.log && rm jobs/v3/generator-errors.log
jobs3: jobs/v3/lib/Cargo.toml
jobs3-cargo: jobs3
	set -o pipefail; ( cd jobs/v3/lib && cargo $(ARGS) ) 2>&1 | tee jobs/v3/cargo-errors.log && rm jobs/v3/cargo-errors.log

kgsearch/v1/lib/Cargo.toml: ../etc/api/kgsearch/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< kgsearch/v1 2>&1 | tee kgsearch/v1/generator-errors.log && rm kgsearch/v1/generator-errors.log
kgsearch1: kgsearch/v1/lib/Cargo.toml
kgsearch1-cargo: kgsearch1
	set -o pipefail; ( cd kgsearch/v1/lib && cargo $(ARGS) ) 2>&1 | tee kgsearch/v1/cargo-errors.log && rm kgsearch/v1/cargo-errors.log

language/v1/lib/Cargo.toml: ../etc/api/language/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< language/v1 2>&1 | tee language/v1/generator-errors.log && rm language/v1/generator-errors.log
language1: language/v1/lib/Cargo.toml
language1-cargo: language1
	set -o pipefail; ( cd language/v1/lib && cargo $(ARGS) ) 2>&1 | tee language/v1/cargo-errors.log && rm language/v1/cargo-errors.log

language/v1beta1/lib/Cargo.toml: ../etc/api/language/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< language/v1beta1 2>&1 | tee language/v1beta1/generator-errors.log && rm language/v1beta1/generator-errors.log
language1_beta1: language/v1beta1/lib/Cargo.toml
language1_beta1-cargo: language1_beta1
	set -o pipefail; ( cd language/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee language/v1beta1/cargo-errors.log && rm language/v1beta1/cargo-errors.log

language/v1beta2/lib/Cargo.toml: ../etc/api/language/v1beta2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< language/v1beta2 2>&1 | tee language/v1beta2/generator-errors.log && rm language/v1beta2/generator-errors.log
language1_beta2: language/v1beta2/lib/Cargo.toml
language1_beta2-cargo: language1_beta2
	set -o pipefail; ( cd language/v1beta2/lib && cargo $(ARGS) ) 2>&1 | tee language/v1beta2/cargo-errors.log && rm language/v1beta2/cargo-errors.log

libraryagent/v1/lib/Cargo.toml: ../etc/api/libraryagent/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< libraryagent/v1 2>&1 | tee libraryagent/v1/generator-errors.log && rm libraryagent/v1/generator-errors.log
libraryagent1: libraryagent/v1/lib/Cargo.toml
libraryagent1-cargo: libraryagent1
	set -o pipefail; ( cd libraryagent/v1/lib && cargo $(ARGS) ) 2>&1 | tee libraryagent/v1/cargo-errors.log && rm libraryagent/v1/cargo-errors.log

licensing/v1/lib/Cargo.toml: ../etc/api/licensing/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< licensing/v1 2>&1 | tee licensing/v1/generator-errors.log && rm licensing/v1/generator-errors.log
licensing1: licensing/v1/lib/Cargo.toml
licensing1-cargo: licensing1
	set -o pipefail; ( cd licensing/v1/lib && cargo $(ARGS) ) 2>&1 | tee licensing/v1/cargo-errors.log && rm licensing/v1/cargo-errors.log

logging/v2/lib/Cargo.toml: ../etc/api/logging/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< logging/v2 2>&1 | tee logging/v2/generator-errors.log && rm logging/v2/generator-errors.log
logging2: logging/v2/lib/Cargo.toml
logging2-cargo: logging2
	set -o pipefail; ( cd logging/v2/lib && cargo $(ARGS) ) 2>&1 | tee logging/v2/cargo-errors.log && rm logging/v2/cargo-errors.log

manufacturers/v1/lib/Cargo.toml: ../etc/api/manufacturers/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< manufacturers/v1 2>&1 | tee manufacturers/v1/generator-errors.log && rm manufacturers/v1/generator-errors.log
manufacturers1: manufacturers/v1/lib/Cargo.toml
manufacturers1-cargo: manufacturers1
	set -o pipefail; ( cd manufacturers/v1/lib && cargo $(ARGS) ) 2>&1 | tee manufacturers/v1/cargo-errors.log && rm manufacturers/v1/cargo-errors.log

mirror/v1/lib/Cargo.toml: ../etc/api/mirror/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< mirror/v1 2>&1 | tee mirror/v1/generator-errors.log && rm mirror/v1/generator-errors.log
mirror1: mirror/v1/lib/Cargo.toml
mirror1-cargo: mirror1
	set -o pipefail; ( cd mirror/v1/lib && cargo $(ARGS) ) 2>&1 | tee mirror/v1/cargo-errors.log && rm mirror/v1/cargo-errors.log

ml/v1/lib/Cargo.toml: ../etc/api/ml/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< ml/v1 2>&1 | tee ml/v1/generator-errors.log && rm ml/v1/generator-errors.log
ml1: ml/v1/lib/Cargo.toml
ml1-cargo: ml1
	set -o pipefail; ( cd ml/v1/lib && cargo $(ARGS) ) 2>&1 | tee ml/v1/cargo-errors.log && rm ml/v1/cargo-errors.log

monitoring/v3/lib/Cargo.toml: ../etc/api/monitoring/v3/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< monitoring/v3 2>&1 | tee monitoring/v3/generator-errors.log && rm monitoring/v3/generator-errors.log
monitoring3: monitoring/v3/lib/Cargo.toml
monitoring3-cargo: monitoring3
	set -o pipefail; ( cd monitoring/v3/lib && cargo $(ARGS) ) 2>&1 | tee monitoring/v3/cargo-errors.log && rm monitoring/v3/cargo-errors.log

oauth/v1/lib/Cargo.toml: ../etc/api/oauth/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< oauth/v1 2>&1 | tee oauth/v1/generator-errors.log && rm oauth/v1/generator-errors.log
oauth1: oauth/v1/lib/Cargo.toml
oauth1-cargo: oauth1
	set -o pipefail; ( cd oauth/v1/lib && cargo $(ARGS) ) 2>&1 | tee oauth/v1/cargo-errors.log && rm oauth/v1/cargo-errors.log

oauth/v2/lib/Cargo.toml: ../etc/api/oauth/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< oauth/v2 2>&1 | tee oauth/v2/generator-errors.log && rm oauth/v2/generator-errors.log
oauth2: oauth/v2/lib/Cargo.toml
oauth2-cargo: oauth2
	set -o pipefail; ( cd oauth/v2/lib && cargo $(ARGS) ) 2>&1 | tee oauth/v2/cargo-errors.log && rm oauth/v2/cargo-errors.log

oslogin/v1alpha/lib/Cargo.toml: ../etc/api/oslogin/v1alpha/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< oslogin/v1alpha 2>&1 | tee oslogin/v1alpha/generator-errors.log && rm oslogin/v1alpha/generator-errors.log
oslogin1_alpha: oslogin/v1alpha/lib/Cargo.toml
oslogin1_alpha-cargo: oslogin1_alpha
	set -o pipefail; ( cd oslogin/v1alpha/lib && cargo $(ARGS) ) 2>&1 | tee oslogin/v1alpha/cargo-errors.log && rm oslogin/v1alpha/cargo-errors.log

oslogin/v1beta/lib/Cargo.toml: ../etc/api/oslogin/v1beta/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< oslogin/v1beta 2>&1 | tee oslogin/v1beta/generator-errors.log && rm oslogin/v1beta/generator-errors.log
oslogin1_beta: oslogin/v1beta/lib/Cargo.toml
oslogin1_beta-cargo: oslogin1_beta
	set -o pipefail; ( cd oslogin/v1beta/lib && cargo $(ARGS) ) 2>&1 | tee oslogin/v1beta/cargo-errors.log && rm oslogin/v1beta/cargo-errors.log

oslogin/v1/lib/Cargo.toml: ../etc/api/oslogin/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< oslogin/v1 2>&1 | tee oslogin/v1/generator-errors.log && rm oslogin/v1/generator-errors.log
oslogin1: oslogin/v1/lib/Cargo.toml
oslogin1-cargo: oslogin1
	set -o pipefail; ( cd oslogin/v1/lib && cargo $(ARGS) ) 2>&1 | tee oslogin/v1/cargo-errors.log && rm oslogin/v1/cargo-errors.log

pagespeedonline/v1/lib/Cargo.toml: ../etc/api/pagespeedonline/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< pagespeedonline/v1 2>&1 | tee pagespeedonline/v1/generator-errors.log && rm pagespeedonline/v1/generator-errors.log
pagespeedonline1: pagespeedonline/v1/lib/Cargo.toml
pagespeedonline1-cargo: pagespeedonline1
	set -o pipefail; ( cd pagespeedonline/v1/lib && cargo $(ARGS) ) 2>&1 | tee pagespeedonline/v1/cargo-errors.log && rm pagespeedonline/v1/cargo-errors.log

pagespeedonline/v2/lib/Cargo.toml: ../etc/api/pagespeedonline/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< pagespeedonline/v2 2>&1 | tee pagespeedonline/v2/generator-errors.log && rm pagespeedonline/v2/generator-errors.log
pagespeedonline2: pagespeedonline/v2/lib/Cargo.toml
pagespeedonline2-cargo: pagespeedonline2
	set -o pipefail; ( cd pagespeedonline/v2/lib && cargo $(ARGS) ) 2>&1 | tee pagespeedonline/v2/cargo-errors.log && rm pagespeedonline/v2/cargo-errors.log

pagespeedonline/v4/lib/Cargo.toml: ../etc/api/pagespeedonline/v4/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< pagespeedonline/v4 2>&1 | tee pagespeedonline/v4/generator-errors.log && rm pagespeedonline/v4/generator-errors.log
pagespeedonline4: pagespeedonline/v4/lib/Cargo.toml
pagespeedonline4-cargo: pagespeedonline4
	set -o pipefail; ( cd pagespeedonline/v4/lib && cargo $(ARGS) ) 2>&1 | tee pagespeedonline/v4/cargo-errors.log && rm pagespeedonline/v4/cargo-errors.log

pagespeedonline/v5/lib/Cargo.toml: ../etc/api/pagespeedonline/v5/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< pagespeedonline/v5 2>&1 | tee pagespeedonline/v5/generator-errors.log && rm pagespeedonline/v5/generator-errors.log
pagespeedonline5: pagespeedonline/v5/lib/Cargo.toml
pagespeedonline5-cargo: pagespeedonline5
	set -o pipefail; ( cd pagespeedonline/v5/lib && cargo $(ARGS) ) 2>&1 | tee pagespeedonline/v5/cargo-errors.log && rm pagespeedonline/v5/cargo-errors.log

people/v1/lib/Cargo.toml: ../etc/api/people/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< people/v1 2>&1 | tee people/v1/generator-errors.log && rm people/v1/generator-errors.log
people1: people/v1/lib/Cargo.toml
people1-cargo: people1
	set -o pipefail; ( cd people/v1/lib && cargo $(ARGS) ) 2>&1 | tee people/v1/cargo-errors.log && rm people/v1/cargo-errors.log

playcustomapp/v1/lib/Cargo.toml: ../etc/api/playcustomapp/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< playcustomapp/v1 2>&1 | tee playcustomapp/v1/generator-errors.log && rm playcustomapp/v1/generator-errors.log
playcustomapp1: playcustomapp/v1/lib/Cargo.toml
playcustomapp1-cargo: playcustomapp1
	set -o pipefail; ( cd playcustomapp/v1/lib && cargo $(ARGS) ) 2>&1 | tee playcustomapp/v1/cargo-errors.log && rm playcustomapp/v1/cargo-errors.log

plus/v1/lib/Cargo.toml: ../etc/api/plus/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< plus/v1 2>&1 | tee plus/v1/generator-errors.log && rm plus/v1/generator-errors.log
plus1: plus/v1/lib/Cargo.toml
plus1-cargo: plus1
	set -o pipefail; ( cd plus/v1/lib && cargo $(ARGS) ) 2>&1 | tee plus/v1/cargo-errors.log && rm plus/v1/cargo-errors.log

plusDomains/v1/lib/Cargo.toml: ../etc/api/plusDomains/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< plusDomains/v1 2>&1 | tee plusDomains/v1/generator-errors.log && rm plusDomains/v1/generator-errors.log
plusDomains1: plusDomains/v1/lib/Cargo.toml
plusDomains1-cargo: plusDomains1
	set -o pipefail; ( cd plusDomains/v1/lib && cargo $(ARGS) ) 2>&1 | tee plusDomains/v1/cargo-errors.log && rm plusDomains/v1/cargo-errors.log

poly/v1/lib/Cargo.toml: ../etc/api/poly/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< poly/v1 2>&1 | tee poly/v1/generator-errors.log && rm poly/v1/generator-errors.log
poly1: poly/v1/lib/Cargo.toml
poly1-cargo: poly1
	set -o pipefail; ( cd poly/v1/lib && cargo $(ARGS) ) 2>&1 | tee poly/v1/cargo-errors.log && rm poly/v1/cargo-errors.log

proximitybeacon/v1beta1/lib/Cargo.toml: ../etc/api/proximitybeacon/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< proximitybeacon/v1beta1 2>&1 | tee proximitybeacon/v1beta1/generator-errors.log && rm proximitybeacon/v1beta1/generator-errors.log
proximitybeacon1_beta1: proximitybeacon/v1beta1/lib/Cargo.toml
proximitybeacon1_beta1-cargo: proximitybeacon1_beta1
	set -o pipefail; ( cd proximitybeacon/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee proximitybeacon/v1beta1/cargo-errors.log && rm proximitybeacon/v1beta1/cargo-errors.log

pubsub/v1beta1a/lib/Cargo.toml: ../etc/api/pubsub/v1beta1a/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< pubsub/v1beta1a 2>&1 | tee pubsub/v1beta1a/generator-errors.log && rm pubsub/v1beta1a/generator-errors.log
pubsub1_beta1a: pubsub/v1beta1a/lib/Cargo.toml
pubsub1_beta1a-cargo: pubsub1_beta1a
	set -o pipefail; ( cd pubsub/v1beta1a/lib && cargo $(ARGS) ) 2>&1 | tee pubsub/v1beta1a/cargo-errors.log && rm pubsub/v1beta1a/cargo-errors.log

pubsub/v1/lib/Cargo.toml: ../etc/api/pubsub/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< pubsub/v1 2>&1 | tee pubsub/v1/generator-errors.log && rm pubsub/v1/generator-errors.log
pubsub1: pubsub/v1/lib/Cargo.toml
pubsub1-cargo: pubsub1
	set -o pipefail; ( cd pubsub/v1/lib && cargo $(ARGS) ) 2>&1 | tee pubsub/v1/cargo-errors.log && rm pubsub/v1/cargo-errors.log

pubsub/v1beta2/lib/Cargo.toml: ../etc/api/pubsub/v1beta2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< pubsub/v1beta2 2>&1 | tee pubsub/v1beta2/generator-errors.log && rm pubsub/v1beta2/generator-errors.log
pubsub1_beta2: pubsub/v1beta2/lib/Cargo.toml
pubsub1_beta2-cargo: pubsub1_beta2
	set -o pipefail; ( cd pubsub/v1beta2/lib && cargo $(ARGS) ) 2>&1 | tee pubsub/v1beta2/cargo-errors.log && rm pubsub/v1beta2/cargo-errors.log

redis/v1/lib/Cargo.toml: ../etc/api/redis/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< redis/v1 2>&1 | tee redis/v1/generator-errors.log && rm redis/v1/generator-errors.log
redis1: redis/v1/lib/Cargo.toml
redis1-cargo: redis1
	set -o pipefail; ( cd redis/v1/lib && cargo $(ARGS) ) 2>&1 | tee redis/v1/cargo-errors.log && rm redis/v1/cargo-errors.log

redis/v1beta1/lib/Cargo.toml: ../etc/api/redis/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< redis/v1beta1 2>&1 | tee redis/v1beta1/generator-errors.log && rm redis/v1beta1/generator-errors.log
redis1_beta1: redis/v1beta1/lib/Cargo.toml
redis1_beta1-cargo: redis1_beta1
	set -o pipefail; ( cd redis/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee redis/v1beta1/cargo-errors.log && rm redis/v1beta1/cargo-errors.log

remotebuildexecution/v1alpha/lib/Cargo.toml: ../etc/api/remotebuildexecution/v1alpha/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< remotebuildexecution/v1alpha 2>&1 | tee remotebuildexecution/v1alpha/generator-errors.log && rm remotebuildexecution/v1alpha/generator-errors.log
remotebuildexecution1_alpha: remotebuildexecution/v1alpha/lib/Cargo.toml
remotebuildexecution1_alpha-cargo: remotebuildexecution1_alpha
	set -o pipefail; ( cd remotebuildexecution/v1alpha/lib && cargo $(ARGS) ) 2>&1 | tee remotebuildexecution/v1alpha/cargo-errors.log && rm remotebuildexecution/v1alpha/cargo-errors.log

remotebuildexecution/v1/lib/Cargo.toml: ../etc/api/remotebuildexecution/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< remotebuildexecution/v1 2>&1 | tee remotebuildexecution/v1/generator-errors.log && rm remotebuildexecution/v1/generator-errors.log
remotebuildexecution1: remotebuildexecution/v1/lib/Cargo.toml
remotebuildexecution1-cargo: remotebuildexecution1
	set -o pipefail; ( cd remotebuildexecution/v1/lib && cargo $(ARGS) ) 2>&1 | tee remotebuildexecution/v1/cargo-errors.log && rm remotebuildexecution/v1/cargo-errors.log

remotebuildexecution/v2/lib/Cargo.toml: ../etc/api/remotebuildexecution/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< remotebuildexecution/v2 2>&1 | tee remotebuildexecution/v2/generator-errors.log && rm remotebuildexecution/v2/generator-errors.log
remotebuildexecution2: remotebuildexecution/v2/lib/Cargo.toml
remotebuildexecution2-cargo: remotebuildexecution2
	set -o pipefail; ( cd remotebuildexecution/v2/lib && cargo $(ARGS) ) 2>&1 | tee remotebuildexecution/v2/cargo-errors.log && rm remotebuildexecution/v2/cargo-errors.log

replicapool/v1beta1/lib/Cargo.toml: ../etc/api/replicapool/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< replicapool/v1beta1 2>&1 | tee replicapool/v1beta1/generator-errors.log && rm replicapool/v1beta1/generator-errors.log
replicapool1_beta1: replicapool/v1beta1/lib/Cargo.toml
replicapool1_beta1-cargo: replicapool1_beta1
	set -o pipefail; ( cd replicapool/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee replicapool/v1beta1/cargo-errors.log && rm replicapool/v1beta1/cargo-errors.log

reseller/v1/lib/Cargo.toml: ../etc/api/reseller/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< reseller/v1 2>&1 | tee reseller/v1/generator-errors.log && rm reseller/v1/generator-errors.log
reseller1: reseller/v1/lib/Cargo.toml
reseller1-cargo: reseller1
	set -o pipefail; ( cd reseller/v1/lib && cargo $(ARGS) ) 2>&1 | tee reseller/v1/cargo-errors.log && rm reseller/v1/cargo-errors.log

run/v1alpha1/lib/Cargo.toml: ../etc/api/run/v1alpha1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< run/v1alpha1 2>&1 | tee run/v1alpha1/generator-errors.log && rm run/v1alpha1/generator-errors.log
run1_alpha1: run/v1alpha1/lib/Cargo.toml
run1_alpha1-cargo: run1_alpha1
	set -o pipefail; ( cd run/v1alpha1/lib && cargo $(ARGS) ) 2>&1 | tee run/v1alpha1/cargo-errors.log && rm run/v1alpha1/cargo-errors.log

run/v1/lib/Cargo.toml: ../etc/api/run/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< run/v1 2>&1 | tee run/v1/generator-errors.log && rm run/v1/generator-errors.log
run1: run/v1/lib/Cargo.toml
run1-cargo: run1
	set -o pipefail; ( cd run/v1/lib && cargo $(ARGS) ) 2>&1 | tee run/v1/cargo-errors.log && rm run/v1/cargo-errors.log

runtimeconfig/v1/lib/Cargo.toml: ../etc/api/runtimeconfig/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< runtimeconfig/v1 2>&1 | tee runtimeconfig/v1/generator-errors.log && rm runtimeconfig/v1/generator-errors.log
runtimeconfig1: runtimeconfig/v1/lib/Cargo.toml
runtimeconfig1-cargo: runtimeconfig1
	set -o pipefail; ( cd runtimeconfig/v1/lib && cargo $(ARGS) ) 2>&1 | tee runtimeconfig/v1/cargo-errors.log && rm runtimeconfig/v1/cargo-errors.log

runtimeconfig/v1beta1/lib/Cargo.toml: ../etc/api/runtimeconfig/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< runtimeconfig/v1beta1 2>&1 | tee runtimeconfig/v1beta1/generator-errors.log && rm runtimeconfig/v1beta1/generator-errors.log
runtimeconfig1_beta1: runtimeconfig/v1beta1/lib/Cargo.toml
runtimeconfig1_beta1-cargo: runtimeconfig1_beta1
	set -o pipefail; ( cd runtimeconfig/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee runtimeconfig/v1beta1/cargo-errors.log && rm runtimeconfig/v1beta1/cargo-errors.log

safebrowsing/v4/lib/Cargo.toml: ../etc/api/safebrowsing/v4/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< safebrowsing/v4 2>&1 | tee safebrowsing/v4/generator-errors.log && rm safebrowsing/v4/generator-errors.log
safebrowsing4: safebrowsing/v4/lib/Cargo.toml
safebrowsing4-cargo: safebrowsing4
	set -o pipefail; ( cd safebrowsing/v4/lib && cargo $(ARGS) ) 2>&1 | tee safebrowsing/v4/cargo-errors.log && rm safebrowsing/v4/cargo-errors.log

script/v1/lib/Cargo.toml: ../etc/api/script/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< script/v1 2>&1 | tee script/v1/generator-errors.log && rm script/v1/generator-errors.log
script1: script/v1/lib/Cargo.toml
script1-cargo: script1
	set -o pipefail; ( cd script/v1/lib && cargo $(ARGS) ) 2>&1 | tee script/v1/cargo-errors.log && rm script/v1/cargo-errors.log

searchconsole/v1/lib/Cargo.toml: ../etc/api/searchconsole/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< searchconsole/v1 2>&1 | tee searchconsole/v1/generator-errors.log && rm searchconsole/v1/generator-errors.log
searchconsole1: searchconsole/v1/lib/Cargo.toml
searchconsole1-cargo: searchconsole1
	set -o pipefail; ( cd searchconsole/v1/lib && cargo $(ARGS) ) 2>&1 | tee searchconsole/v1/cargo-errors.log && rm searchconsole/v1/cargo-errors.log

securitycenter/v1p1alpha1/lib/Cargo.toml: ../etc/api/securitycenter/v1p1alpha1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< securitycenter/v1p1alpha1 2>&1 | tee securitycenter/v1p1alpha1/generator-errors.log && rm securitycenter/v1p1alpha1/generator-errors.log
securitycenter1_p1alpha1: securitycenter/v1p1alpha1/lib/Cargo.toml
securitycenter1_p1alpha1-cargo: securitycenter1_p1alpha1
	set -o pipefail; ( cd securitycenter/v1p1alpha1/lib && cargo $(ARGS) ) 2>&1 | tee securitycenter/v1p1alpha1/cargo-errors.log && rm securitycenter/v1p1alpha1/cargo-errors.log

securitycenter/v1/lib/Cargo.toml: ../etc/api/securitycenter/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< securitycenter/v1 2>&1 | tee securitycenter/v1/generator-errors.log && rm securitycenter/v1/generator-errors.log
securitycenter1: securitycenter/v1/lib/Cargo.toml
securitycenter1-cargo: securitycenter1
	set -o pipefail; ( cd securitycenter/v1/lib && cargo $(ARGS) ) 2>&1 | tee securitycenter/v1/cargo-errors.log && rm securitycenter/v1/cargo-errors.log

securitycenter/v1beta1/lib/Cargo.toml: ../etc/api/securitycenter/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< securitycenter/v1beta1 2>&1 | tee securitycenter/v1beta1/generator-errors.log && rm securitycenter/v1beta1/generator-errors.log
securitycenter1_beta1: securitycenter/v1beta1/lib/Cargo.toml
securitycenter1_beta1-cargo: securitycenter1_beta1
	set -o pipefail; ( cd securitycenter/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee securitycenter/v1beta1/cargo-errors.log && rm securitycenter/v1beta1/cargo-errors.log

servicebroker/v1alpha1/lib/Cargo.toml: ../etc/api/servicebroker/v1alpha1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< servicebroker/v1alpha1 2>&1 | tee servicebroker/v1alpha1/generator-errors.log && rm servicebroker/v1alpha1/generator-errors.log
servicebroker1_alpha1: servicebroker/v1alpha1/lib/Cargo.toml
servicebroker1_alpha1-cargo: servicebroker1_alpha1
	set -o pipefail; ( cd servicebroker/v1alpha1/lib && cargo $(ARGS) ) 2>&1 | tee servicebroker/v1alpha1/cargo-errors.log && rm servicebroker/v1alpha1/cargo-errors.log

servicebroker/v1/lib/Cargo.toml: ../etc/api/servicebroker/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< servicebroker/v1 2>&1 | tee servicebroker/v1/generator-errors.log && rm servicebroker/v1/generator-errors.log
servicebroker1: servicebroker/v1/lib/Cargo.toml
servicebroker1-cargo: servicebroker1
	set -o pipefail; ( cd servicebroker/v1/lib && cargo $(ARGS) ) 2>&1 | tee servicebroker/v1/cargo-errors.log && rm servicebroker/v1/cargo-errors.log

servicebroker/v1beta1/lib/Cargo.toml: ../etc/api/servicebroker/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< servicebroker/v1beta1 2>&1 | tee servicebroker/v1beta1/generator-errors.log && rm servicebroker/v1beta1/generator-errors.log
servicebroker1_beta1: servicebroker/v1beta1/lib/Cargo.toml
servicebroker1_beta1-cargo: servicebroker1_beta1
	set -o pipefail; ( cd servicebroker/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee servicebroker/v1beta1/cargo-errors.log && rm servicebroker/v1beta1/cargo-errors.log

serviceconsumermanagement/v1/lib/Cargo.toml: ../etc/api/serviceconsumermanagement/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< serviceconsumermanagement/v1 2>&1 | tee serviceconsumermanagement/v1/generator-errors.log && rm serviceconsumermanagement/v1/generator-errors.log
serviceconsumermanagement1: serviceconsumermanagement/v1/lib/Cargo.toml
serviceconsumermanagement1-cargo: serviceconsumermanagement1
	set -o pipefail; ( cd serviceconsumermanagement/v1/lib && cargo $(ARGS) ) 2>&1 | tee serviceconsumermanagement/v1/cargo-errors.log && rm serviceconsumermanagement/v1/cargo-errors.log

servicecontrol/v1/lib/Cargo.toml: ../etc/api/servicecontrol/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< servicecontrol/v1 2>&1 | tee servicecontrol/v1/generator-errors.log && rm servicecontrol/v1/generator-errors.log
servicecontrol1: servicecontrol/v1/lib/Cargo.toml
servicecontrol1-cargo: servicecontrol1
	set -o pipefail; ( cd servicecontrol/v1/lib && cargo $(ARGS) ) 2>&1 | tee servicecontrol/v1/cargo-errors.log && rm servicecontrol/v1/cargo-errors.log

servicemanagement/v1/lib/Cargo.toml: ../etc/api/servicemanagement/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< servicemanagement/v1 2>&1 | tee servicemanagement/v1/generator-errors.log && rm servicemanagement/v1/generator-errors.log
servicemanagement1: servicemanagement/v1/lib/Cargo.toml
servicemanagement1-cargo: servicemanagement1
	set -o pipefail; ( cd servicemanagement/v1/lib && cargo $(ARGS) ) 2>&1 | tee servicemanagement/v1/cargo-errors.log && rm servicemanagement/v1/cargo-errors.log

servicenetworking/v1beta/lib/Cargo.toml: ../etc/api/servicenetworking/v1beta/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< servicenetworking/v1beta 2>&1 | tee servicenetworking/v1beta/generator-errors.log && rm servicenetworking/v1beta/generator-errors.log
servicenetworking1_beta: servicenetworking/v1beta/lib/Cargo.toml
servicenetworking1_beta-cargo: servicenetworking1_beta
	set -o pipefail; ( cd servicenetworking/v1beta/lib && cargo $(ARGS) ) 2>&1 | tee servicenetworking/v1beta/cargo-errors.log && rm servicenetworking/v1beta/cargo-errors.log

servicenetworking/v1/lib/Cargo.toml: ../etc/api/servicenetworking/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< servicenetworking/v1 2>&1 | tee servicenetworking/v1/generator-errors.log && rm servicenetworking/v1/generator-errors.log
servicenetworking1: servicenetworking/v1/lib/Cargo.toml
servicenetworking1-cargo: servicenetworking1
	set -o pipefail; ( cd servicenetworking/v1/lib && cargo $(ARGS) ) 2>&1 | tee servicenetworking/v1/cargo-errors.log && rm servicenetworking/v1/cargo-errors.log

serviceusage/v1/lib/Cargo.toml: ../etc/api/serviceusage/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< serviceusage/v1 2>&1 | tee serviceusage/v1/generator-errors.log && rm serviceusage/v1/generator-errors.log
serviceusage1: serviceusage/v1/lib/Cargo.toml
serviceusage1-cargo: serviceusage1
	set -o pipefail; ( cd serviceusage/v1/lib && cargo $(ARGS) ) 2>&1 | tee serviceusage/v1/cargo-errors.log && rm serviceusage/v1/cargo-errors.log

serviceusage/v1beta1/lib/Cargo.toml: ../etc/api/serviceusage/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< serviceusage/v1beta1 2>&1 | tee serviceusage/v1beta1/generator-errors.log && rm serviceusage/v1beta1/generator-errors.log
serviceusage1_beta1: serviceusage/v1beta1/lib/Cargo.toml
serviceusage1_beta1-cargo: serviceusage1_beta1
	set -o pipefail; ( cd serviceusage/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee serviceusage/v1beta1/cargo-errors.log && rm serviceusage/v1beta1/cargo-errors.log

sheets/v4/lib/Cargo.toml: ../etc/api/sheets/v4/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< sheets/v4 2>&1 | tee sheets/v4/generator-errors.log && rm sheets/v4/generator-errors.log
sheets4: sheets/v4/lib/Cargo.toml
sheets4-cargo: sheets4
	set -o pipefail; ( cd sheets/v4/lib && cargo $(ARGS) ) 2>&1 | tee sheets/v4/cargo-errors.log && rm sheets/v4/cargo-errors.log

siteVerification/v1/lib/Cargo.toml: ../etc/api/siteVerification/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< siteVerification/v1 2>&1 | tee siteVerification/v1/generator-errors.log && rm siteVerification/v1/generator-errors.log
siteVerification1: siteVerification/v1/lib/Cargo.toml
siteVerification1-cargo: siteVerification1
	set -o pipefail; ( cd siteVerification/v1/lib && cargo $(ARGS) ) 2>&1 | tee siteVerification/v1/cargo-errors.log && rm siteVerification/v1/cargo-errors.log

slides/v1/lib/Cargo.toml: ../etc/api/slides/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< slides/v1 2>&1 | tee slides/v1/generator-errors.log && rm slides/v1/generator-errors.log
slides1: slides/v1/lib/Cargo.toml
slides1-cargo: slides1
	set -o pipefail; ( cd slides/v1/lib && cargo $(ARGS) ) 2>&1 | tee slides/v1/cargo-errors.log && rm slides/v1/cargo-errors.log

sourcerepo/v1/lib/Cargo.toml: ../etc/api/sourcerepo/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< sourcerepo/v1 2>&1 | tee sourcerepo/v1/generator-errors.log && rm sourcerepo/v1/generator-errors.log
sourcerepo1: sourcerepo/v1/lib/Cargo.toml
sourcerepo1-cargo: sourcerepo1
	set -o pipefail; ( cd sourcerepo/v1/lib && cargo $(ARGS) ) 2>&1 | tee sourcerepo/v1/cargo-errors.log && rm sourcerepo/v1/cargo-errors.log

spanner/v1/lib/Cargo.toml: ../etc/api/spanner/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< spanner/v1 2>&1 | tee spanner/v1/generator-errors.log && rm spanner/v1/generator-errors.log
spanner1: spanner/v1/lib/Cargo.toml
spanner1-cargo: spanner1
	set -o pipefail; ( cd spanner/v1/lib && cargo $(ARGS) ) 2>&1 | tee spanner/v1/cargo-errors.log && rm spanner/v1/cargo-errors.log

speech/v1p1beta1/lib/Cargo.toml: ../etc/api/speech/v1p1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< speech/v1p1beta1 2>&1 | tee speech/v1p1beta1/generator-errors.log && rm speech/v1p1beta1/generator-errors.log
speech1_p1beta1: speech/v1p1beta1/lib/Cargo.toml
speech1_p1beta1-cargo: speech1_p1beta1
	set -o pipefail; ( cd speech/v1p1beta1/lib && cargo $(ARGS) ) 2>&1 | tee speech/v1p1beta1/cargo-errors.log && rm speech/v1p1beta1/cargo-errors.log

speech/v2beta/lib/Cargo.toml: ../etc/api/speech/v2beta/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< speech/v2beta 2>&1 | tee speech/v2beta/generator-errors.log && rm speech/v2beta/generator-errors.log
speech2_beta: speech/v2beta/lib/Cargo.toml
speech2_beta-cargo: speech2_beta
	set -o pipefail; ( cd speech/v2beta/lib && cargo $(ARGS) ) 2>&1 | tee speech/v2beta/cargo-errors.log && rm speech/v2beta/cargo-errors.log

speech/v1/lib/Cargo.toml: ../etc/api/speech/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< speech/v1 2>&1 | tee speech/v1/generator-errors.log && rm speech/v1/generator-errors.log
speech1: speech/v1/lib/Cargo.toml
speech1-cargo: speech1
	set -o pipefail; ( cd speech/v1/lib && cargo $(ARGS) ) 2>&1 | tee speech/v1/cargo-errors.log && rm speech/v1/cargo-errors.log

sqladmin/v1beta4/lib/Cargo.toml: ../etc/api/sqladmin/v1beta4/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< sqladmin/v1beta4 2>&1 | tee sqladmin/v1beta4/generator-errors.log && rm sqladmin/v1beta4/generator-errors.log
sqladmin1_beta4: sqladmin/v1beta4/lib/Cargo.toml
sqladmin1_beta4-cargo: sqladmin1_beta4
	set -o pipefail; ( cd sqladmin/v1beta4/lib && cargo $(ARGS) ) 2>&1 | tee sqladmin/v1beta4/cargo-errors.log && rm sqladmin/v1beta4/cargo-errors.log

storage/v1/lib/Cargo.toml: ../etc/api/storage/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< storage/v1 2>&1 | tee storage/v1/generator-errors.log && rm storage/v1/generator-errors.log
storage1: storage/v1/lib/Cargo.toml
storage1-cargo: storage1
	set -o pipefail; ( cd storage/v1/lib && cargo $(ARGS) ) 2>&1 | tee storage/v1/cargo-errors.log && rm storage/v1/cargo-errors.log

storage/v1beta1/lib/Cargo.toml: ../etc/api/storage/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< storage/v1beta1 2>&1 | tee storage/v1beta1/generator-errors.log && rm storage/v1beta1/generator-errors.log
storage1_beta1: storage/v1beta1/lib/Cargo.toml
storage1_beta1-cargo: storage1_beta1
	set -o pipefail; ( cd storage/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee storage/v1beta1/cargo-errors.log && rm storage/v1beta1/cargo-errors.log

storage/v1beta2/lib/Cargo.toml: ../etc/api/storage/v1beta2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< storage/v1beta2 2>&1 | tee storage/v1beta2/generator-errors.log && rm storage/v1beta2/generator-errors.log
storage1_beta2: storage/v1beta2/lib/Cargo.toml
storage1_beta2-cargo: storage1_beta2
	set -o pipefail; ( cd storage/v1beta2/lib && cargo $(ARGS) ) 2>&1 | tee storage/v1beta2/cargo-errors.log && rm storage/v1beta2/cargo-errors.log

storagetransfer/v1/lib/Cargo.toml: ../etc/api/storagetransfer/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< storagetransfer/v1 2>&1 | tee storagetransfer/v1/generator-errors.log && rm storagetransfer/v1/generator-errors.log
storagetransfer1: storagetransfer/v1/lib/Cargo.toml
storagetransfer1-cargo: storagetransfer1
	set -o pipefail; ( cd storagetransfer/v1/lib && cargo $(ARGS) ) 2>&1 | tee storagetransfer/v1/cargo-errors.log && rm storagetransfer/v1/cargo-errors.log

streetviewpublish/v1/lib/Cargo.toml: ../etc/api/streetviewpublish/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< streetviewpublish/v1 2>&1 | tee streetviewpublish/v1/generator-errors.log && rm streetviewpublish/v1/generator-errors.log
streetviewpublish1: streetviewpublish/v1/lib/Cargo.toml
streetviewpublish1-cargo: streetviewpublish1
	set -o pipefail; ( cd streetviewpublish/v1/lib && cargo $(ARGS) ) 2>&1 | tee streetviewpublish/v1/cargo-errors.log && rm streetviewpublish/v1/cargo-errors.log

surveys/v2/lib/Cargo.toml: ../etc/api/surveys/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< surveys/v2 2>&1 | tee surveys/v2/generator-errors.log && rm surveys/v2/generator-errors.log
surveys2: surveys/v2/lib/Cargo.toml
surveys2-cargo: surveys2
	set -o pipefail; ( cd surveys/v2/lib && cargo $(ARGS) ) 2>&1 | tee surveys/v2/cargo-errors.log && rm surveys/v2/cargo-errors.log

tagmanager/v1/lib/Cargo.toml: ../etc/api/tagmanager/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< tagmanager/v1 2>&1 | tee tagmanager/v1/generator-errors.log && rm tagmanager/v1/generator-errors.log
tagmanager1: tagmanager/v1/lib/Cargo.toml
tagmanager1-cargo: tagmanager1
	set -o pipefail; ( cd tagmanager/v1/lib && cargo $(ARGS) ) 2>&1 | tee tagmanager/v1/cargo-errors.log && rm tagmanager/v1/cargo-errors.log

tagmanager/v2/lib/Cargo.toml: ../etc/api/tagmanager/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< tagmanager/v2 2>&1 | tee tagmanager/v2/generator-errors.log && rm tagmanager/v2/generator-errors.log
tagmanager2: tagmanager/v2/lib/Cargo.toml
tagmanager2-cargo: tagmanager2
	set -o pipefail; ( cd tagmanager/v2/lib && cargo $(ARGS) ) 2>&1 | tee tagmanager/v2/cargo-errors.log && rm tagmanager/v2/cargo-errors.log

tasks/v1/lib/Cargo.toml: ../etc/api/tasks/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< tasks/v1 2>&1 | tee tasks/v1/generator-errors.log && rm tasks/v1/generator-errors.log
tasks1: tasks/v1/lib/Cargo.toml
tasks1-cargo: tasks1
	set -o pipefail; ( cd tasks/v1/lib && cargo $(ARGS) ) 2>&1 | tee tasks/v1/cargo-errors.log && rm tasks/v1/cargo-errors.log

testing/v1/lib/Cargo.toml: ../etc/api/testing/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< testing/v1 2>&1 | tee testing/v1/generator-errors.log && rm testing/v1/generator-errors.log
testing1: testing/v1/lib/Cargo.toml
testing1-cargo: testing1
	set -o pipefail; ( cd testing/v1/lib && cargo $(ARGS) ) 2>&1 | tee testing/v1/cargo-errors.log && rm testing/v1/cargo-errors.log

texttospeech/v1/lib/Cargo.toml: ../etc/api/texttospeech/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< texttospeech/v1 2>&1 | tee texttospeech/v1/generator-errors.log && rm texttospeech/v1/generator-errors.log
texttospeech1: texttospeech/v1/lib/Cargo.toml
texttospeech1-cargo: texttospeech1
	set -o pipefail; ( cd texttospeech/v1/lib && cargo $(ARGS) ) 2>&1 | tee texttospeech/v1/cargo-errors.log && rm texttospeech/v1/cargo-errors.log

texttospeech/v1beta1/lib/Cargo.toml: ../etc/api/texttospeech/v1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< texttospeech/v1beta1 2>&1 | tee texttospeech/v1beta1/generator-errors.log && rm texttospeech/v1beta1/generator-errors.log
texttospeech1_beta1: texttospeech/v1beta1/lib/Cargo.toml
texttospeech1_beta1-cargo: texttospeech1_beta1
	set -o pipefail; ( cd texttospeech/v1beta1/lib && cargo $(ARGS) ) 2>&1 | tee texttospeech/v1beta1/cargo-errors.log && rm texttospeech/v1beta1/cargo-errors.log

toolresults/v1beta3/lib/Cargo.toml: ../etc/api/toolresults/v1beta3/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< toolresults/v1beta3 2>&1 | tee toolresults/v1beta3/generator-errors.log && rm toolresults/v1beta3/generator-errors.log
toolresults1_beta3: toolresults/v1beta3/lib/Cargo.toml
toolresults1_beta3-cargo: toolresults1_beta3
	set -o pipefail; ( cd toolresults/v1beta3/lib && cargo $(ARGS) ) 2>&1 | tee toolresults/v1beta3/cargo-errors.log && rm toolresults/v1beta3/cargo-errors.log

tpu/v1alpha1/lib/Cargo.toml: ../etc/api/tpu/v1alpha1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< tpu/v1alpha1 2>&1 | tee tpu/v1alpha1/generator-errors.log && rm tpu/v1alpha1/generator-errors.log
tpu1_alpha1: tpu/v1alpha1/lib/Cargo.toml
tpu1_alpha1-cargo: tpu1_alpha1
	set -o pipefail; ( cd tpu/v1alpha1/lib && cargo $(ARGS) ) 2>&1 | tee tpu/v1alpha1/cargo-errors.log && rm tpu/v1alpha1/cargo-errors.log

tpu/v1/lib/Cargo.toml: ../etc/api/tpu/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< tpu/v1 2>&1 | tee tpu/v1/generator-errors.log && rm tpu/v1/generator-errors.log
tpu1: tpu/v1/lib/Cargo.toml
tpu1-cargo: tpu1
	set -o pipefail; ( cd tpu/v1/lib && cargo $(ARGS) ) 2>&1 | tee tpu/v1/cargo-errors.log && rm tpu/v1/cargo-errors.log

translate/v2/lib/Cargo.toml: ../etc/api/translate/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< translate/v2 2>&1 | tee translate/v2/generator-errors.log && rm translate/v2/generator-errors.log
translate2: translate/v2/lib/Cargo.toml
translate2-cargo: translate2
	set -o pipefail; ( cd translate/v2/lib && cargo $(ARGS) ) 2>&1 | tee translate/v2/cargo-errors.log && rm translate/v2/cargo-errors.log

translate/v3beta1/lib/Cargo.toml: ../etc/api/translate/v3beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< translate/v3beta1 2>&1 | tee translate/v3beta1/generator-errors.log && rm translate/v3beta1/generator-errors.log
translate3_beta1: translate/v3beta1/lib/Cargo.toml
translate3_beta1-cargo: translate3_beta1
	set -o pipefail; ( cd translate/v3beta1/lib && cargo $(ARGS) ) 2>&1 | tee translate/v3beta1/cargo-errors.log && rm translate/v3beta1/cargo-errors.log

urlshortener/v1/lib/Cargo.toml: ../etc/api/urlshortener/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< urlshortener/v1 2>&1 | tee urlshortener/v1/generator-errors.log && rm urlshortener/v1/generator-errors.log
urlshortener1: urlshortener/v1/lib/Cargo.toml
urlshortener1-cargo: urlshortener1
	set -o pipefail; ( cd urlshortener/v1/lib && cargo $(ARGS) ) 2>&1 | tee urlshortener/v1/cargo-errors.log && rm urlshortener/v1/cargo-errors.log

vault/v1/lib/Cargo.toml: ../etc/api/vault/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< vault/v1 2>&1 | tee vault/v1/generator-errors.log && rm vault/v1/generator-errors.log
vault1: vault/v1/lib/Cargo.toml
vault1-cargo: vault1
	set -o pipefail; ( cd vault/v1/lib && cargo $(ARGS) ) 2>&1 | tee vault/v1/cargo-errors.log && rm vault/v1/cargo-errors.log

videointelligence/v1p1beta1/lib/Cargo.toml: ../etc/api/videointelligence/v1p1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< videointelligence/v1p1beta1 2>&1 | tee videointelligence/v1p1beta1/generator-errors.log && rm videointelligence/v1p1beta1/generator-errors.log
videointelligence1_p1beta1: videointelligence/v1p1beta1/lib/Cargo.toml
videointelligence1_p1beta1-cargo: videointelligence1_p1beta1
	set -o pipefail; ( cd videointelligence/v1p1beta1/lib && cargo $(ARGS) ) 2>&1 | tee videointelligence/v1p1beta1/cargo-errors.log && rm videointelligence/v1p1beta1/cargo-errors.log

videointelligence/v1p2beta1/lib/Cargo.toml: ../etc/api/videointelligence/v1p2beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< videointelligence/v1p2beta1 2>&1 | tee videointelligence/v1p2beta1/generator-errors.log && rm videointelligence/v1p2beta1/generator-errors.log
videointelligence1_p2beta1: videointelligence/v1p2beta1/lib/Cargo.toml
videointelligence1_p2beta1-cargo: videointelligence1_p2beta1
	set -o pipefail; ( cd videointelligence/v1p2beta1/lib && cargo $(ARGS) ) 2>&1 | tee videointelligence/v1p2beta1/cargo-errors.log && rm videointelligence/v1p2beta1/cargo-errors.log

videointelligence/v1p3beta1/lib/Cargo.toml: ../etc/api/videointelligence/v1p3beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< videointelligence/v1p3beta1 2>&1 | tee videointelligence/v1p3beta1/generator-errors.log && rm videointelligence/v1p3beta1/generator-errors.log
videointelligence1_p3beta1: videointelligence/v1p3beta1/lib/Cargo.toml
videointelligence1_p3beta1-cargo: videointelligence1_p3beta1
	set -o pipefail; ( cd videointelligence/v1p3beta1/lib && cargo $(ARGS) ) 2>&1 | tee videointelligence/v1p3beta1/cargo-errors.log && rm videointelligence/v1p3beta1/cargo-errors.log

videointelligence/v1/lib/Cargo.toml: ../etc/api/videointelligence/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< videointelligence/v1 2>&1 | tee videointelligence/v1/generator-errors.log && rm videointelligence/v1/generator-errors.log
videointelligence1: videointelligence/v1/lib/Cargo.toml
videointelligence1-cargo: videointelligence1
	set -o pipefail; ( cd videointelligence/v1/lib && cargo $(ARGS) ) 2>&1 | tee videointelligence/v1/cargo-errors.log && rm videointelligence/v1/cargo-errors.log

videointelligence/v1beta2/lib/Cargo.toml: ../etc/api/videointelligence/v1beta2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< videointelligence/v1beta2 2>&1 | tee videointelligence/v1beta2/generator-errors.log && rm videointelligence/v1beta2/generator-errors.log
videointelligence1_beta2: videointelligence/v1beta2/lib/Cargo.toml
videointelligence1_beta2-cargo: videointelligence1_beta2
	set -o pipefail; ( cd videointelligence/v1beta2/lib && cargo $(ARGS) ) 2>&1 | tee videointelligence/v1beta2/cargo-errors.log && rm videointelligence/v1beta2/cargo-errors.log

vision/v1p1beta1/lib/Cargo.toml: ../etc/api/vision/v1p1beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< vision/v1p1beta1 2>&1 | tee vision/v1p1beta1/generator-errors.log && rm vision/v1p1beta1/generator-errors.log
vision1_p1beta1: vision/v1p1beta1/lib/Cargo.toml
vision1_p1beta1-cargo: vision1_p1beta1
	set -o pipefail; ( cd vision/v1p1beta1/lib && cargo $(ARGS) ) 2>&1 | tee vision/v1p1beta1/cargo-errors.log && rm vision/v1p1beta1/cargo-errors.log

vision/v1p2beta1/lib/Cargo.toml: ../etc/api/vision/v1p2beta1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< vision/v1p2beta1 2>&1 | tee vision/v1p2beta1/generator-errors.log && rm vision/v1p2beta1/generator-errors.log
vision1_p2beta1: vision/v1p2beta1/lib/Cargo.toml
vision1_p2beta1-cargo: vision1_p2beta1
	set -o pipefail; ( cd vision/v1p2beta1/lib && cargo $(ARGS) ) 2>&1 | tee vision/v1p2beta1/cargo-errors.log && rm vision/v1p2beta1/cargo-errors.log

vision/v1/lib/Cargo.toml: ../etc/api/vision/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< vision/v1 2>&1 | tee vision/v1/generator-errors.log && rm vision/v1/generator-errors.log
vision1: vision/v1/lib/Cargo.toml
vision1-cargo: vision1
	set -o pipefail; ( cd vision/v1/lib && cargo $(ARGS) ) 2>&1 | tee vision/v1/cargo-errors.log && rm vision/v1/cargo-errors.log

webfonts/v1/lib/Cargo.toml: ../etc/api/webfonts/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< webfonts/v1 2>&1 | tee webfonts/v1/generator-errors.log && rm webfonts/v1/generator-errors.log
webfonts1: webfonts/v1/lib/Cargo.toml
webfonts1-cargo: webfonts1
	set -o pipefail; ( cd webfonts/v1/lib && cargo $(ARGS) ) 2>&1 | tee webfonts/v1/cargo-errors.log && rm webfonts/v1/cargo-errors.log

webmasters/v3/lib/Cargo.toml: ../etc/api/webmasters/v3/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< webmasters/v3 2>&1 | tee webmasters/v3/generator-errors.log && rm webmasters/v3/generator-errors.log
webmasters3: webmasters/v3/lib/Cargo.toml
webmasters3-cargo: webmasters3
	set -o pipefail; ( cd webmasters/v3/lib && cargo $(ARGS) ) 2>&1 | tee webmasters/v3/cargo-errors.log && rm webmasters/v3/cargo-errors.log

websecurityscanner/v1alpha/lib/Cargo.toml: ../etc/api/websecurityscanner/v1alpha/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< websecurityscanner/v1alpha 2>&1 | tee websecurityscanner/v1alpha/generator-errors.log && rm websecurityscanner/v1alpha/generator-errors.log
websecurityscanner1_alpha: websecurityscanner/v1alpha/lib/Cargo.toml
websecurityscanner1_alpha-cargo: websecurityscanner1_alpha
	set -o pipefail; ( cd websecurityscanner/v1alpha/lib && cargo $(ARGS) ) 2>&1 | tee websecurityscanner/v1alpha/cargo-errors.log && rm websecurityscanner/v1alpha/cargo-errors.log

websecurityscanner/v1beta/lib/Cargo.toml: ../etc/api/websecurityscanner/v1beta/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< websecurityscanner/v1beta 2>&1 | tee websecurityscanner/v1beta/generator-errors.log && rm websecurityscanner/v1beta/generator-errors.log
websecurityscanner1_beta: websecurityscanner/v1beta/lib/Cargo.toml
websecurityscanner1_beta-cargo: websecurityscanner1_beta
	set -o pipefail; ( cd websecurityscanner/v1beta/lib && cargo $(ARGS) ) 2>&1 | tee websecurityscanner/v1beta/cargo-errors.log && rm websecurityscanner/v1beta/cargo-errors.log

websecurityscanner/v1/lib/Cargo.toml: ../etc/api/websecurityscanner/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< websecurityscanner/v1 2>&1 | tee websecurityscanner/v1/generator-errors.log && rm websecurityscanner/v1/generator-errors.log
websecurityscanner1: websecurityscanner/v1/lib/Cargo.toml
websecurityscanner1-cargo: websecurityscanner1
	set -o pipefail; ( cd websecurityscanner/v1/lib && cargo $(ARGS) ) 2>&1 | tee websecurityscanner/v1/cargo-errors.log && rm websecurityscanner/v1/cargo-errors.log

youtube/v3/lib/Cargo.toml: ../etc/api/youtube/v3/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< youtube/v3 2>&1 | tee youtube/v3/generator-errors.log && rm youtube/v3/generator-errors.log
youtube3: youtube/v3/lib/Cargo.toml
youtube3-cargo: youtube3
	set -o pipefail; ( cd youtube/v3/lib && cargo $(ARGS) ) 2>&1 | tee youtube/v3/cargo-errors.log && rm youtube/v3/cargo-errors.log

youtubeAnalytics/v1/lib/Cargo.toml: ../etc/api/youtubeAnalytics/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< youtubeAnalytics/v1 2>&1 | tee youtubeAnalytics/v1/generator-errors.log && rm youtubeAnalytics/v1/generator-errors.log
youtubeAnalytics1: youtubeAnalytics/v1/lib/Cargo.toml
youtubeAnalytics1-cargo: youtubeAnalytics1
	set -o pipefail; ( cd youtubeAnalytics/v1/lib && cargo $(ARGS) ) 2>&1 | tee youtubeAnalytics/v1/cargo-errors.log && rm youtubeAnalytics/v1/cargo-errors.log

youtubeAnalytics/v2/lib/Cargo.toml: ../etc/api/youtubeAnalytics/v2/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< youtubeAnalytics/v2 2>&1 | tee youtubeAnalytics/v2/generator-errors.log && rm youtubeAnalytics/v2/generator-errors.log
youtubeAnalytics2: youtubeAnalytics/v2/lib/Cargo.toml
youtubeAnalytics2-cargo: youtubeAnalytics2
	set -o pipefail; ( cd youtubeAnalytics/v2/lib && cargo $(ARGS) ) 2>&1 | tee youtubeAnalytics/v2/cargo-errors.log && rm youtubeAnalytics/v2/cargo-errors.log

youtubereporting/v1/lib/Cargo.toml: ../etc/api/youtubereporting/v1/spec.json $(MCP)
	set -o pipefail; $(MCP) generate $< youtubereporting/v1 2>&1 | tee youtubereporting/v1/generator-errors.log && rm youtubereporting/v1/generator-errors.log
youtubereporting1: youtubereporting/v1/lib/Cargo.toml
youtubereporting1-cargo: youtubereporting1
	set -o pipefail; ( cd youtubereporting/v1/lib && cargo $(ARGS) ) 2>&1 | tee youtubereporting/v1/cargo-errors.log && rm youtubereporting/v1/cargo-errors.log
