use clap::{App, AppSettings, Arg, SubCommand};
use default_boxed::DefaultBoxed;

#[derive(DefaultBoxed)]
struct Outer<'a, 'b> {
    inner: HeapApp<'a, 'b>,
}

struct HeapApp<'a, 'b> {
    app: App<'a, 'b>,
}

impl<'a, 'b> Default for HeapApp<'a, 'b> {
    fn default() -> Self {
        let mut app = App::new("iam1")
            .setting(clap::AppSettings::ColoredHelp)
            .author("Sebastian Thiel <byronimo@gmail.com>")
            .version("0.1.0-20210226")
            .about("Manages identity and access control for Google Cloud Platform resources, including the creation of service accounts, which you can use to authenticate to Google and make API calls. ")
            .after_help("All documentation details can be found at <TODO figure out URL>")
            .arg(Arg::with_name("scope")
                .long("scope")
                .help("Specify the authentication method should be executed in. Each scope requires the user to grant this application permission to use it. If unset, it defaults to the shortest scope url for a particular method.")
                .multiple(true)
                .takes_value(true))
            .arg(Arg::with_name("folder")
                .long("config-dir")
                .help("A directory into which we will store our persistent data. Defaults to a user-writable directory that we will create during the first invocation." )
                .multiple(false)
                .takes_value(true))
            .arg(Arg::with_name("debug")
                .long("debug")
                .help("Provide more output to aid with debugging")
                .multiple(false)
                .takes_value(false));
        let mut iam_policies0 = SubCommand::with_name("iam_policies")
            .setting(AppSettings::ColoredHelp)
            .about("methods: lint_policy and query_auditable_services");
        {
            let mcmd = SubCommand::with_name("lint_policy").about("Lints, or validates, an IAM policy. Currently checks the google.iam.v1.Binding.condition field, which contains a condition expression for a role binding. Successful calls to this method always return an HTTP `200 OK` status code, even if the linter detects an issue in the IAM policy.");
            iam_policies0 = iam_policies0.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("query_auditable_services").about("Returns a list of services that allow you to opt into audit logs that are not generated by default. To learn more about audit logs, see the [Logging documentation](https://cloud.google.com/logging/docs/audit).");
            iam_policies0 = iam_policies0.subcommand(mcmd);
        }
        let mut organizations0 = SubCommand::with_name("organizations")
            .setting(AppSettings::ColoredHelp)
            .about("sub-resources: roles");
        let mut permissions0 = SubCommand::with_name("permissions")
            .setting(AppSettings::ColoredHelp)
            .about("methods: query_testable_permissions");
        {
            let mcmd = SubCommand::with_name("query_testable_permissions").about("Lists every permission that you can test on a resource. A permission is testable if you can check whether a member has that permission on the resource.");
            permissions0 = permissions0.subcommand(mcmd);
        }
        let mut projects0 = SubCommand::with_name("projects")
            .setting(AppSettings::ColoredHelp)
            .about("sub-resources: locations, roles and service_accounts");
        let mut roles0 = SubCommand::with_name("roles")
            .setting(AppSettings::ColoredHelp)
            .about("methods: get, list and query_grantable_roles");
        {
            let mcmd = SubCommand::with_name("get").about("Gets the definition of a Role.");
            roles0 = roles0.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("list").about("Lists every predefined Role that IAM supports, or every custom role that is defined for an organization or project.");
            roles0 = roles0.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("query_grantable_roles").about("Lists roles that can be granted on a Google Cloud resource. A role is grantable if the IAM policy for the resource can contain bindings to the role.");
            roles0 = roles0.subcommand(mcmd);
        }
        let mut roles1 = SubCommand::with_name("roles")
            .setting(AppSettings::ColoredHelp)
            .about("methods: create, delete, get, list, patch and undelete");
        {
            let mcmd = SubCommand::with_name("create").about("Creates a new custom Role.");
            roles1 = roles1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("delete").about("Deletes a custom Role. When you delete a custom role, the following changes occur immediately: * You cannot bind a member to the custom role in an IAM Policy. * Existing bindings to the custom role are not changed, but they have no effect. * By default, the response from ListRoles does not include the custom role. You have 7 days to undelete the custom role. After 7 days, the following changes occur: * The custom role is permanently deleted and cannot be recovered. * If an IAM policy contains a binding to the custom role, the binding is permanently removed.");
            roles1 = roles1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("get").about("Gets the definition of a Role.");
            roles1 = roles1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("list").about("Lists every predefined Role that IAM supports, or every custom role that is defined for an organization or project.");
            roles1 = roles1.subcommand(mcmd);
        }
        {
            let mcmd =
                SubCommand::with_name("patch").about("Updates the definition of a custom Role.");
            roles1 = roles1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("undelete").about("Undeletes a custom Role.");
            roles1 = roles1.subcommand(mcmd);
        }
        let mut locations1 = SubCommand::with_name("locations")
            .setting(AppSettings::ColoredHelp)
            .about("sub-resources: workload_identity_pools");
        let mut roles1 = SubCommand::with_name("roles")
            .setting(AppSettings::ColoredHelp)
            .about("methods: create, delete, get, list, patch and undelete");
        {
            let mcmd = SubCommand::with_name("create").about("Creates a new custom Role.");
            roles1 = roles1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("delete").about("Deletes a custom Role. When you delete a custom role, the following changes occur immediately: * You cannot bind a member to the custom role in an IAM Policy. * Existing bindings to the custom role are not changed, but they have no effect. * By default, the response from ListRoles does not include the custom role. You have 7 days to undelete the custom role. After 7 days, the following changes occur: * The custom role is permanently deleted and cannot be recovered. * If an IAM policy contains a binding to the custom role, the binding is permanently removed.");
            roles1 = roles1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("get").about("Gets the definition of a Role.");
            roles1 = roles1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("list").about("Lists every predefined Role that IAM supports, or every custom role that is defined for an organization or project.");
            roles1 = roles1.subcommand(mcmd);
        }
        {
            let mcmd =
                SubCommand::with_name("patch").about("Updates the definition of a custom Role.");
            roles1 = roles1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("undelete").about("Undeletes a custom Role.");
            roles1 = roles1.subcommand(mcmd);
        }
        let mut service_accounts1 = SubCommand::with_name("service_accounts")
                        .setting(AppSettings::ColoredHelp)
                        .about("methods: create, delete, disable, enable, get, get_iam_policy, list, patch, set_iam_policy, sign_blob, sign_jwt, test_iam_permissions, undelete and update");
        {
            let mcmd = SubCommand::with_name("create").about("Creates a ServiceAccount.");
            service_accounts1 = service_accounts1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("delete").about("Deletes a ServiceAccount. **Warning:** After you delete a service account, you might not be able to undelete it. If you know that you need to re-enable the service account in the future, use DisableServiceAccount instead. If you delete a service account, IAM permanently removes the service account 30 days later. Google Cloud cannot recover the service account after it is permanently removed, even if you file a support request. To help avoid unplanned outages, we recommend that you disable the service account before you delete it. Use DisableServiceAccount to disable the service account, then wait at least 24 hours and watch for unintended consequences. If there are no unintended consequences, you can delete the service account.");
            service_accounts1 = service_accounts1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("disable").about("Disables a ServiceAccount immediately. If an application uses the service account to authenticate, that application can no longer call Google APIs or access Google Cloud resources. Existing access tokens for the service account are rejected, and requests for new access tokens will fail. To re-enable the service account, use EnableServiceAccount. After you re-enable the service account, its existing access tokens will be accepted, and you can request new access tokens. To help avoid unplanned outages, we recommend that you disable the service account before you delete it. Use this method to disable the service account, then wait at least 24 hours and watch for unintended consequences. If there are no unintended consequences, you can delete the service account with DeleteServiceAccount.");
            service_accounts1 = service_accounts1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("enable").about("Enables a ServiceAccount that was disabled by DisableServiceAccount. If the service account is already enabled, then this method has no effect. If the service account was disabled by other means—for example, if Google disabled the service account because it was compromised—you cannot use this method to enable the service account.");
            service_accounts1 = service_accounts1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("get").about("Gets a ServiceAccount.");
            service_accounts1 = service_accounts1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("get_iam_policy").about("Gets the IAM policy that is attached to a ServiceAccount. This IAM policy specifies which members have access to the service account. This method does not tell you whether the service account has been granted any roles on other resources. To check whether a service account has role grants on a resource, use the `getIamPolicy` method for that resource. For example, to view the role grants for a project, call the Resource Manager API\'s [`projects.getIamPolicy`](https://cloud.google.com/resource-manager/reference/rest/v1/projects/getIamPolicy) method.");
            service_accounts1 = service_accounts1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("list")
                .about("Lists every ServiceAccount that belongs to a specific project.");
            service_accounts1 = service_accounts1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("patch").about("Patches a ServiceAccount.");
            service_accounts1 = service_accounts1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("set_iam_policy").about("Sets the IAM policy that is attached to a ServiceAccount. Use this method to grant or revoke access to the service account. For example, you could grant a member the ability to impersonate the service account. This method does not enable the service account to access other resources. To grant roles to a service account on a resource, follow these steps: 1. Call the resource\'s `getIamPolicy` method to get its current IAM policy. 2. Edit the policy so that it binds the service account to an IAM role for the resource. 3. Call the resource\'s `setIamPolicy` method to update its IAM policy. For detailed instructions, see [Granting roles to a service account for specific resources](https://cloud.google.com/iam/help/service-accounts/granting-access-to-service-accounts).");
            service_accounts1 = service_accounts1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("sign_blob").about("**Note:** This method is deprecated. Use the [`signBlob`](https://cloud.google.com/iam/help/rest-credentials/v1/projects.serviceAccounts/signBlob) method in the IAM Service Account Credentials API instead. If you currently use this method, see the [migration guide](https://cloud.google.com/iam/help/credentials/migrate-api) for instructions. Signs a blob using the system-managed private key for a ServiceAccount.");
            service_accounts1 = service_accounts1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("sign_jwt").about("**Note:** This method is deprecated. Use the [`signJwt`](https://cloud.google.com/iam/help/rest-credentials/v1/projects.serviceAccounts/signJwt) method in the IAM Service Account Credentials API instead. If you currently use this method, see the [migration guide](https://cloud.google.com/iam/help/credentials/migrate-api) for instructions. Signs a JSON Web Token (JWT) using the system-managed private key for a ServiceAccount.");
            service_accounts1 = service_accounts1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("test_iam_permissions").about(
                "Tests whether the caller has the specified permissions on a ServiceAccount.",
            );
            service_accounts1 = service_accounts1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("undelete").about("Restores a deleted ServiceAccount. **Important:** It is not always possible to restore a deleted service account. Use this method only as a last resort. After you delete a service account, IAM permanently removes the service account 30 days later. There is no way to restore a deleted service account that has been permanently removed.");
            service_accounts1 = service_accounts1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("update").about("**Note:** We are in the process of deprecating this method. Use PatchServiceAccount instead. Updates a ServiceAccount. You can update only the `display_name` and `description` fields.");
            service_accounts1 = service_accounts1.subcommand(mcmd);
        }
        let mut workload_identity_pools2 = SubCommand::with_name("workload_identity_pools")
            .setting(AppSettings::ColoredHelp)
            .about("methods: create, delete, get, list, patch and undelete");
        {
            let mcmd = SubCommand::with_name("create").about("Creates a new WorkloadIdentityPool. You cannot reuse the name of a deleted pool until 30 days after deletion.");
            workload_identity_pools2 = workload_identity_pools2.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("delete").about("Deletes a WorkloadIdentityPool. You cannot use a deleted pool to exchange external credentials for Google Cloud credentials. However, deletion does not revoke credentials that have already been issued. Credentials issued for a deleted pool do not grant access to resources. If the pool is undeleted, and the credentials are not expired, they grant access again. You can undelete a pool for 30 days. After 30 days, deletion is permanent. You cannot update deleted pools. However, you can view and list them.");
            workload_identity_pools2 = workload_identity_pools2.subcommand(mcmd);
        }
        {
            let mcmd =
                SubCommand::with_name("get").about("Gets an individual WorkloadIdentityPool.");
            workload_identity_pools2 = workload_identity_pools2.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("list").about("Lists all non-deleted WorkloadIdentityPools in a project. If `show_deleted` is set to `true`, then deleted pools are also listed.");
            workload_identity_pools2 = workload_identity_pools2.subcommand(mcmd);
        }
        {
            let mcmd =
                SubCommand::with_name("patch").about("Updates an existing WorkloadIdentityPool.");
            workload_identity_pools2 = workload_identity_pools2.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("undelete").about("Undeletes a WorkloadIdentityPool, as long as it was deleted fewer than 30 days ago.");
            workload_identity_pools2 = workload_identity_pools2.subcommand(mcmd);
        }
        let mut keys2 = SubCommand::with_name("keys")
            .setting(AppSettings::ColoredHelp)
            .about("methods: create, delete, get, list and upload");
        {
            let mcmd = SubCommand::with_name("create").about("Creates a ServiceAccountKey.");
            keys2 = keys2.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("delete").about("Deletes a ServiceAccountKey. Deleting a service account key does not revoke short-lived credentials that have been issued based on the service account key.");
            keys2 = keys2.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("get").about("Gets a ServiceAccountKey.");
            keys2 = keys2.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("list")
                .about("Lists every ServiceAccountKey for a service account.");
            keys2 = keys2.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("upload")
                .about("Creates a ServiceAccountKey, using a public key that you provide.");
            keys2 = keys2.subcommand(mcmd);
        }
        let mut operations3 = SubCommand::with_name("operations")
            .setting(AppSettings::ColoredHelp)
            .about("methods: get");
        {
            let mcmd = SubCommand::with_name("get").about("Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.");
            operations3 = operations3.subcommand(mcmd);
        }
        let mut providers3 = SubCommand::with_name("providers")
            .setting(AppSettings::ColoredHelp)
            .about("methods: create, delete, get, list, patch and undelete");
        {
            let mcmd = SubCommand::with_name("create").about("Creates a new WorkloadIdentityPoolProvider in a WorkloadIdentityPool. You cannot reuse the name of a deleted provider until 30 days after deletion.");
            providers3 = providers3.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("delete").about("Deletes a WorkloadIdentityPoolProvider. Deleting a provider does not revoke credentials that have already been issued; they continue to grant access. You can undelete a provider for 30 days. After 30 days, deletion is permanent. You cannot update deleted providers. However, you can view and list them.");
            providers3 = providers3.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("get")
                .about("Gets an individual WorkloadIdentityPoolProvider.");
            providers3 = providers3.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("list").about("Lists all non-deleted WorkloadIdentityPoolProviders in a WorkloadIdentityPool. If `show_deleted` is set to `true`, then deleted providers are also listed.");
            providers3 = providers3.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("patch")
                .about("Updates an existing WorkloadIdentityPoolProvider.");
            providers3 = providers3.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("undelete").about("Undeletes a WorkloadIdentityPoolProvider, as long as it was deleted fewer than 30 days ago.");
            providers3 = providers3.subcommand(mcmd);
        }
        let mut operations4 = SubCommand::with_name("operations")
            .setting(AppSettings::ColoredHelp)
            .about("methods: get");
        {
            let mcmd = SubCommand::with_name("get").about("Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.");
            operations4 = operations4.subcommand(mcmd);
        }
        providers3 = providers3.subcommand(operations4);
        workload_identity_pools2 = workload_identity_pools2.subcommand(providers3);
        workload_identity_pools2 = workload_identity_pools2.subcommand(operations3);
        service_accounts1 = service_accounts1.subcommand(keys2);
        locations1 = locations1.subcommand(workload_identity_pools2);
        projects0 = projects0.subcommand(service_accounts1);
        projects0 = projects0.subcommand(roles1);
        projects0 = projects0.subcommand(locations1);
        organizations0 = organizations0.subcommand(roles1);
        app = app.subcommand(roles0);
        app = app.subcommand(projects0);
        app = app.subcommand(permissions0);
        app = app.subcommand(organizations0);
        app = app.subcommand(iam_policies0);

        Self { app }
    }
}
use google_iam1 as api;

fn main() {
    // TODO: set homedir afterwards, once the address is unmovable, or use Pin for the very first time
    // to allow a self-referential structure :D!
    let _home_dir = dirs::config_dir()
        .expect("configuration directory can be obtained")
        .join("google-service-cli");
    let outer = Outer::default_boxed();
    let app = outer.inner.app;
    let _matches = app.get_matches();
}
