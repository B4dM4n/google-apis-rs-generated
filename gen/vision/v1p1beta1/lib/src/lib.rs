#![allow(rustdoc::bare_urls)]
#![doc = "# Resources and Methods\n* [files](resources/files/struct.FilesActions.html)\n  * [*annotate*](resources/files/struct.AnnotateRequestBuilder.html), [*asyncBatchAnnotate*](resources/files/struct.AsyncBatchAnnotateRequestBuilder.html)\n* [images](resources/images/struct.ImagesActions.html)\n  * [*annotate*](resources/images/struct.AnnotateRequestBuilder.html), [*asyncBatchAnnotate*](resources/images/struct.AsyncBatchAnnotateRequestBuilder.html)\n* [projects](resources/projects/struct.ProjectsActions.html)\n  * [files](resources/projects/files/struct.FilesActions.html)\n    * [*annotate*](resources/projects/files/struct.AnnotateRequestBuilder.html), [*asyncBatchAnnotate*](resources/projects/files/struct.AsyncBatchAnnotateRequestBuilder.html)\n  * [images](resources/projects/images/struct.ImagesActions.html)\n    * [*annotate*](resources/projects/images/struct.AnnotateRequestBuilder.html), [*asyncBatchAnnotate*](resources/projects/images/struct.AsyncBatchAnnotateRequestBuilder.html)\n  * [locations](resources/projects/locations/struct.LocationsActions.html)\n    * [files](resources/projects/locations/files/struct.FilesActions.html)\n      * [*annotate*](resources/projects/locations/files/struct.AnnotateRequestBuilder.html), [*asyncBatchAnnotate*](resources/projects/locations/files/struct.AsyncBatchAnnotateRequestBuilder.html)\n    * [images](resources/projects/locations/images/struct.ImagesActions.html)\n      * [*annotate*](resources/projects/locations/images/struct.AnnotateRequestBuilder.html), [*asyncBatchAnnotate*](resources/projects/locations/images/struct.AsyncBatchAnnotateRequestBuilder.html)\n"]
pub mod scopes {
    #[doc = "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.\n\n`https://www.googleapis.com/auth/cloud-platform`"]
    pub const CLOUD_PLATFORM: &str = "https://www.googleapis.com/auth/cloud-platform";
    #[doc = "Apply machine learning models to understand and label images\n\n`https://www.googleapis.com/auth/cloud-vision`"]
    pub const CLOUD_VISION: &str = "https://www.googleapis.com/auth/cloud-vision";
}
pub mod schemas {
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct AnnotateFileResponse {
        #[doc = "If set, represents the error message for the failed request. The `responses` field will not be set in this case."]
        #[serde(
            rename = "error",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub error: ::std::option::Option<crate::schemas::Status>,
        #[doc = "Information about the file for which this response is generated."]
        #[serde(
            rename = "inputConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub input_config: ::std::option::Option<crate::schemas::InputConfig>,
        #[doc = "Individual responses to images found within the file. This field will be empty if the `error` field is set."]
        #[serde(
            rename = "responses",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub responses: ::std::option::Option<Vec<crate::schemas::AnnotateImageResponse>>,
        #[doc = "This field gives the total number of pages in the file."]
        #[serde(
            rename = "totalPages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub total_pages: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for AnnotateFileResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AnnotateFileResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct AnnotateImageResponse {
        #[doc = "If present, contextual information is needed to understand where this image comes from."]
        #[serde(
            rename = "context",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub context: ::std::option::Option<crate::schemas::ImageAnnotationContext>,
        #[doc = "If present, crop hints have completed successfully."]
        #[serde(
            rename = "cropHintsAnnotation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub crop_hints_annotation: ::std::option::Option<crate::schemas::CropHintsAnnotation>,
        #[doc = "If set, represents the error message for the operation. Note that filled-in image annotations are guaranteed to be correct, even when `error` is set."]
        #[serde(
            rename = "error",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub error: ::std::option::Option<crate::schemas::Status>,
        #[doc = "If present, face detection has completed successfully."]
        #[serde(
            rename = "faceAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub face_annotations: ::std::option::Option<Vec<crate::schemas::FaceAnnotation>>,
        #[doc = "If present, text (OCR) detection or document (OCR) text detection has completed successfully. This annotation provides the structural hierarchy for the OCR detected text."]
        #[serde(
            rename = "fullTextAnnotation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub full_text_annotation: ::std::option::Option<crate::schemas::TextAnnotation>,
        #[doc = "If present, image properties were extracted successfully."]
        #[serde(
            rename = "imagePropertiesAnnotation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub image_properties_annotation: ::std::option::Option<crate::schemas::ImageProperties>,
        #[doc = "If present, label detection has completed successfully."]
        #[serde(
            rename = "labelAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub label_annotations: ::std::option::Option<Vec<crate::schemas::EntityAnnotation>>,
        #[doc = "If present, landmark detection has completed successfully."]
        #[serde(
            rename = "landmarkAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub landmark_annotations: ::std::option::Option<Vec<crate::schemas::EntityAnnotation>>,
        #[doc = "If present, localized object detection has completed successfully. This will be sorted descending by confidence score."]
        #[serde(
            rename = "localizedObjectAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub localized_object_annotations:
            ::std::option::Option<Vec<crate::schemas::LocalizedObjectAnnotation>>,
        #[doc = "If present, logo detection has completed successfully."]
        #[serde(
            rename = "logoAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub logo_annotations: ::std::option::Option<Vec<crate::schemas::EntityAnnotation>>,
        #[doc = "If present, product search has completed successfully."]
        #[serde(
            rename = "productSearchResults",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product_search_results: ::std::option::Option<crate::schemas::ProductSearchResults>,
        #[doc = "If present, safe-search annotation has completed successfully."]
        #[serde(
            rename = "safeSearchAnnotation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub safe_search_annotation: ::std::option::Option<crate::schemas::SafeSearchAnnotation>,
        #[doc = "If present, text (OCR) detection has completed successfully."]
        #[serde(
            rename = "textAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub text_annotations: ::std::option::Option<Vec<crate::schemas::EntityAnnotation>>,
        #[doc = "If present, web detection has completed successfully."]
        #[serde(
            rename = "webDetection",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub web_detection: ::std::option::Option<crate::schemas::WebDetection>,
    }
    impl ::google_field_selector::FieldSelector for AnnotateImageResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AnnotateImageResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AsyncAnnotateFileResponse {
        #[doc = "The output location and metadata from AsyncAnnotateFileRequest."]
        #[serde(
            rename = "outputConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub output_config: ::std::option::Option<crate::schemas::OutputConfig>,
    }
    impl ::google_field_selector::FieldSelector for AsyncAnnotateFileResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AsyncAnnotateFileResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AsyncBatchAnnotateFilesResponse {
        #[doc = "The list of file annotation responses, one for each request in AsyncBatchAnnotateFilesRequest."]
        #[serde(
            rename = "responses",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub responses: ::std::option::Option<Vec<crate::schemas::AsyncAnnotateFileResponse>>,
    }
    impl ::google_field_selector::FieldSelector for AsyncBatchAnnotateFilesResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AsyncBatchAnnotateFilesResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AsyncBatchAnnotateImagesResponse {
        #[doc = "The output location and metadata from AsyncBatchAnnotateImagesRequest."]
        #[serde(
            rename = "outputConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub output_config: ::std::option::Option<crate::schemas::OutputConfig>,
    }
    impl ::google_field_selector::FieldSelector for AsyncBatchAnnotateImagesResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AsyncBatchAnnotateImagesResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct BatchAnnotateFilesResponse {
        #[doc = "The list of file annotation responses, each response corresponding to each AnnotateFileRequest in BatchAnnotateFilesRequest."]
        #[serde(
            rename = "responses",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub responses: ::std::option::Option<Vec<crate::schemas::AnnotateFileResponse>>,
    }
    impl ::google_field_selector::FieldSelector for BatchAnnotateFilesResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for BatchAnnotateFilesResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct BatchOperationMetadata {
        #[doc = "The time when the batch request is finished and google.longrunning.Operation.done is set to true."]
        #[serde(
            rename = "endTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub end_time: ::std::option::Option<String>,
        #[doc = "The current state of the batch operation."]
        #[serde(
            rename = "state",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub state: ::std::option::Option<crate::schemas::BatchOperationMetadataState>,
        #[doc = "The time when the batch request was submitted to the server."]
        #[serde(
            rename = "submitTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub submit_time: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for BatchOperationMetadata {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for BatchOperationMetadata {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum BatchOperationMetadataState {
        #[doc = "The request is done after the longrunning.Operations.CancelOperation has been called by the user. Any records that were processed before the cancel command are output as specified in the request."]
        Cancelled,
        #[doc = "The request is done and no item has been successfully processed."]
        Failed,
        #[doc = "Request is actively being processed."]
        Processing,
        #[doc = "Invalid."]
        StateUnspecified,
        #[doc = "The request is done and at least one item has been successfully processed."]
        Successful,
    }
    impl BatchOperationMetadataState {
        pub fn as_str(self) -> &'static str {
            match self {
                BatchOperationMetadataState::Cancelled => "CANCELLED",
                BatchOperationMetadataState::Failed => "FAILED",
                BatchOperationMetadataState::Processing => "PROCESSING",
                BatchOperationMetadataState::StateUnspecified => "STATE_UNSPECIFIED",
                BatchOperationMetadataState::Successful => "SUCCESSFUL",
            }
        }
    }
    impl ::std::convert::AsRef<str> for BatchOperationMetadataState {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for BatchOperationMetadataState {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<BatchOperationMetadataState, ()> {
            Ok(match s {
                "CANCELLED" => BatchOperationMetadataState::Cancelled,
                "FAILED" => BatchOperationMetadataState::Failed,
                "PROCESSING" => BatchOperationMetadataState::Processing,
                "STATE_UNSPECIFIED" => BatchOperationMetadataState::StateUnspecified,
                "SUCCESSFUL" => BatchOperationMetadataState::Successful,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for BatchOperationMetadataState {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for BatchOperationMetadataState {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for BatchOperationMetadataState {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CANCELLED" => BatchOperationMetadataState::Cancelled,
                "FAILED" => BatchOperationMetadataState::Failed,
                "PROCESSING" => BatchOperationMetadataState::Processing,
                "STATE_UNSPECIFIED" => BatchOperationMetadataState::StateUnspecified,
                "SUCCESSFUL" => BatchOperationMetadataState::Successful,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for BatchOperationMetadataState {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for BatchOperationMetadataState {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct Block {
        #[doc = "Detected block type (text, image etc) for this block."]
        #[serde(
            rename = "blockType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub block_type: ::std::option::Option<crate::schemas::BlockBlockType>,
        #[doc = "The bounding box for the block. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the ‘natural’ orientation. For example: * when the text is horizontal it might look like: 0––1 | | 3––2 * when it’s rotated 180 degrees around the top-left corner it becomes: 2––3 | | 1––0 and the vertex order will still be (0, 1, 2, 3)."]
        #[serde(
            rename = "boundingBox",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_box: ::std::option::Option<crate::schemas::BoundingPoly>,
        #[doc = "Confidence of the OCR results on the block. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "List of paragraphs in this block (if this blocks is of type text)."]
        #[serde(
            rename = "paragraphs",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub paragraphs: ::std::option::Option<Vec<crate::schemas::Paragraph>>,
        #[doc = "Additional information detected for the block."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<crate::schemas::TextProperty>,
    }
    impl ::google_field_selector::FieldSelector for Block {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Block {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum BlockBlockType {
        #[doc = "Barcode block."]
        Barcode,
        #[doc = "Image block."]
        Picture,
        #[doc = "Horizontal/vertical line box."]
        Ruler,
        #[doc = "Table block."]
        Table,
        #[doc = "Regular text block."]
        Text,
        #[doc = "Unknown block type."]
        Unknown,
    }
    impl BlockBlockType {
        pub fn as_str(self) -> &'static str {
            match self {
                BlockBlockType::Barcode => "BARCODE",
                BlockBlockType::Picture => "PICTURE",
                BlockBlockType::Ruler => "RULER",
                BlockBlockType::Table => "TABLE",
                BlockBlockType::Text => "TEXT",
                BlockBlockType::Unknown => "UNKNOWN",
            }
        }
    }
    impl ::std::convert::AsRef<str> for BlockBlockType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for BlockBlockType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<BlockBlockType, ()> {
            Ok(match s {
                "BARCODE" => BlockBlockType::Barcode,
                "PICTURE" => BlockBlockType::Picture,
                "RULER" => BlockBlockType::Ruler,
                "TABLE" => BlockBlockType::Table,
                "TEXT" => BlockBlockType::Text,
                "UNKNOWN" => BlockBlockType::Unknown,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for BlockBlockType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for BlockBlockType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for BlockBlockType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "BARCODE" => BlockBlockType::Barcode,
                "PICTURE" => BlockBlockType::Picture,
                "RULER" => BlockBlockType::Ruler,
                "TABLE" => BlockBlockType::Table,
                "TEXT" => BlockBlockType::Text,
                "UNKNOWN" => BlockBlockType::Unknown,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for BlockBlockType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for BlockBlockType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct BoundingPoly {
        #[doc = "The bounding polygon normalized vertices."]
        #[serde(
            rename = "normalizedVertices",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub normalized_vertices: ::std::option::Option<Vec<crate::schemas::NormalizedVertex>>,
        #[doc = "The bounding polygon vertices."]
        #[serde(
            rename = "vertices",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub vertices: ::std::option::Option<Vec<crate::schemas::Vertex>>,
    }
    impl ::google_field_selector::FieldSelector for BoundingPoly {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for BoundingPoly {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct Color {
        #[doc = "The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0)."]
        #[serde(
            rename = "alpha",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub alpha: ::std::option::Option<f32>,
        #[doc = "The amount of blue in the color as a value in the interval \\[0, 1\\]."]
        #[serde(
            rename = "blue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub blue: ::std::option::Option<f32>,
        #[doc = "The amount of green in the color as a value in the interval \\[0, 1\\]."]
        #[serde(
            rename = "green",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub green: ::std::option::Option<f32>,
        #[doc = "The amount of red in the color as a value in the interval \\[0, 1\\]."]
        #[serde(
            rename = "red",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub red: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for Color {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Color {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct ColorInfo {
        #[doc = "RGB components of the color."]
        #[serde(
            rename = "color",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub color: ::std::option::Option<crate::schemas::Color>,
        #[doc = "The fraction of pixels the color occupies in the image. Value in range \\[0, 1\\]."]
        #[serde(
            rename = "pixelFraction",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pixel_fraction: ::std::option::Option<f32>,
        #[doc = "Image-specific score for this color. Value in range \\[0, 1\\]."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for ColorInfo {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ColorInfo {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct CropHint {
        #[doc = "The bounding polygon for the crop region. The coordinates of the bounding box are in the original image’s scale."]
        #[serde(
            rename = "boundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_poly: ::std::option::Option<crate::schemas::BoundingPoly>,
        #[doc = "Confidence of this being a salient region. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Fraction of importance of this salient region with respect to the original image."]
        #[serde(
            rename = "importanceFraction",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub importance_fraction: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for CropHint {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CropHint {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct CropHintsAnnotation {
        #[doc = "Crop hint results."]
        #[serde(
            rename = "cropHints",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub crop_hints: ::std::option::Option<Vec<crate::schemas::CropHint>>,
    }
    impl ::google_field_selector::FieldSelector for CropHintsAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CropHintsAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DetectedBreak {
        #[doc = "True if break prepends the element."]
        #[serde(
            rename = "isPrefix",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_prefix: ::std::option::Option<bool>,
        #[doc = "Detected break type."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::DetectedBreakType>,
    }
    impl ::google_field_selector::FieldSelector for DetectedBreak {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DetectedBreak {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DetectedBreakType {
        #[doc = "Line-wrapping break."]
        EolSureSpace,
        #[doc = "End-line hyphen that is not present in text; does not co-occur with `SPACE`, `LEADER_SPACE`, or `LINE_BREAK`."]
        Hyphen,
        #[doc = "Line break that ends a paragraph."]
        LineBreak,
        #[doc = "Regular space."]
        Space,
        #[doc = "Sure space (very wide)."]
        SureSpace,
        #[doc = "Unknown break label type."]
        Unknown,
    }
    impl DetectedBreakType {
        pub fn as_str(self) -> &'static str {
            match self {
                DetectedBreakType::EolSureSpace => "EOL_SURE_SPACE",
                DetectedBreakType::Hyphen => "HYPHEN",
                DetectedBreakType::LineBreak => "LINE_BREAK",
                DetectedBreakType::Space => "SPACE",
                DetectedBreakType::SureSpace => "SURE_SPACE",
                DetectedBreakType::Unknown => "UNKNOWN",
            }
        }
    }
    impl ::std::convert::AsRef<str> for DetectedBreakType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DetectedBreakType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<DetectedBreakType, ()> {
            Ok(match s {
                "EOL_SURE_SPACE" => DetectedBreakType::EolSureSpace,
                "HYPHEN" => DetectedBreakType::Hyphen,
                "LINE_BREAK" => DetectedBreakType::LineBreak,
                "SPACE" => DetectedBreakType::Space,
                "SURE_SPACE" => DetectedBreakType::SureSpace,
                "UNKNOWN" => DetectedBreakType::Unknown,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for DetectedBreakType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DetectedBreakType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for DetectedBreakType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "EOL_SURE_SPACE" => DetectedBreakType::EolSureSpace,
                "HYPHEN" => DetectedBreakType::Hyphen,
                "LINE_BREAK" => DetectedBreakType::LineBreak,
                "SPACE" => DetectedBreakType::Space,
                "SURE_SPACE" => DetectedBreakType::SureSpace,
                "UNKNOWN" => DetectedBreakType::Unknown,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for DetectedBreakType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DetectedBreakType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct DetectedLanguage {
        #[doc = "Confidence of detected language. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "The BCP-47 language code, such as “en-US” or “sr-Latn”. For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."]
        #[serde(
            rename = "languageCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language_code: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for DetectedLanguage {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DetectedLanguage {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct DominantColorsAnnotation {
        #[doc = "RGB color values with their score and pixel fraction."]
        #[serde(
            rename = "colors",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub colors: ::std::option::Option<Vec<crate::schemas::ColorInfo>>,
    }
    impl ::google_field_selector::FieldSelector for DominantColorsAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DominantColorsAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct EntityAnnotation {
        #[doc = "Image region to which this entity belongs. Not produced for `LABEL_DETECTION` features."]
        #[serde(
            rename = "boundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_poly: ::std::option::Option<crate::schemas::BoundingPoly>,
        #[doc = "**Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the “Eiffel Tower” entity is detected, this field represents the confidence that there is a tower in the query image. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Entity textual description, expressed in its `locale` language."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "The language code for the locale in which the entity textual `description` is expressed."]
        #[serde(
            rename = "locale",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub locale: ::std::option::Option<String>,
        #[doc = "The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks."]
        #[serde(
            rename = "locations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub locations: ::std::option::Option<Vec<crate::schemas::LocationInfo>>,
        #[doc = "Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/)."]
        #[serde(
            rename = "mid",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mid: ::std::option::Option<String>,
        #[doc = "Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity."]
        #[serde(
            rename = "properties",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub properties: ::std::option::Option<Vec<crate::schemas::Property>>,
        #[doc = "Overall score of the result. Range \\[0, 1\\]."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
        #[doc = "The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of “tower” is likely higher to an image containing the detected “Eiffel Tower” than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range \\[0, 1\\]."]
        #[serde(
            rename = "topicality",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub topicality: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for EntityAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for EntityAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct FaceAnnotation {
        #[doc = "Anger likelihood."]
        #[serde(
            rename = "angerLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub anger_likelihood: ::std::option::Option<crate::schemas::FaceAnnotationAngerLikelihood>,
        #[doc = "Blurred likelihood."]
        #[serde(
            rename = "blurredLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub blurred_likelihood:
            ::std::option::Option<crate::schemas::FaceAnnotationBlurredLikelihood>,
        #[doc = "The bounding polygon around the face. The coordinates of the bounding box are in the original image’s scale. The bounding box is computed to “frame” the face in accordance with human expectations. It is based on the landmarker results. Note that one or more x and/or y coordinates may not be generated in the `BoundingPoly` (the polygon will be unbounded) if only a partial face appears in the image to be annotated."]
        #[serde(
            rename = "boundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_poly: ::std::option::Option<crate::schemas::BoundingPoly>,
        #[doc = "Detection confidence. Range \\[0, 1\\]."]
        #[serde(
            rename = "detectionConfidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub detection_confidence: ::std::option::Option<f32>,
        #[doc = "The `fd_bounding_poly` bounding polygon is tighter than the `boundingPoly`, and encloses only the skin part of the face. Typically, it is used to eliminate the face from any image analysis that detects the “amount of skin” visible in an image. It is not based on the landmarker results, only on the initial face detection, hence the fd (face detection) prefix."]
        #[serde(
            rename = "fdBoundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub fd_bounding_poly: ::std::option::Option<crate::schemas::BoundingPoly>,
        #[doc = "Headwear likelihood."]
        #[serde(
            rename = "headwearLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub headwear_likelihood:
            ::std::option::Option<crate::schemas::FaceAnnotationHeadwearLikelihood>,
        #[doc = "Joy likelihood."]
        #[serde(
            rename = "joyLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub joy_likelihood: ::std::option::Option<crate::schemas::FaceAnnotationJoyLikelihood>,
        #[doc = "Face landmarking confidence. Range \\[0, 1\\]."]
        #[serde(
            rename = "landmarkingConfidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub landmarking_confidence: ::std::option::Option<f32>,
        #[doc = "Detected face landmarks."]
        #[serde(
            rename = "landmarks",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub landmarks: ::std::option::Option<Vec<crate::schemas::Landmark>>,
        #[doc = "Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range \\[-180,180\\]."]
        #[serde(
            rename = "panAngle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pan_angle: ::std::option::Option<f32>,
        #[doc = "Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range \\[-180,180\\]."]
        #[serde(
            rename = "rollAngle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub roll_angle: ::std::option::Option<f32>,
        #[doc = "Sorrow likelihood."]
        #[serde(
            rename = "sorrowLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub sorrow_likelihood:
            ::std::option::Option<crate::schemas::FaceAnnotationSorrowLikelihood>,
        #[doc = "Surprise likelihood."]
        #[serde(
            rename = "surpriseLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub surprise_likelihood:
            ::std::option::Option<crate::schemas::FaceAnnotationSurpriseLikelihood>,
        #[doc = "Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image’s horizontal plane. Range \\[-180,180\\]."]
        #[serde(
            rename = "tiltAngle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tilt_angle: ::std::option::Option<f32>,
        #[doc = "Under-exposed likelihood."]
        #[serde(
            rename = "underExposedLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub under_exposed_likelihood:
            ::std::option::Option<crate::schemas::FaceAnnotationUnderExposedLikelihood>,
    }
    impl ::google_field_selector::FieldSelector for FaceAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FaceAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum FaceAnnotationAngerLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl FaceAnnotationAngerLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                FaceAnnotationAngerLikelihood::Likely => "LIKELY",
                FaceAnnotationAngerLikelihood::Possible => "POSSIBLE",
                FaceAnnotationAngerLikelihood::Unknown => "UNKNOWN",
                FaceAnnotationAngerLikelihood::Unlikely => "UNLIKELY",
                FaceAnnotationAngerLikelihood::VeryLikely => "VERY_LIKELY",
                FaceAnnotationAngerLikelihood::VeryUnlikely => "VERY_UNLIKELY",
            }
        }
    }
    impl ::std::convert::AsRef<str> for FaceAnnotationAngerLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for FaceAnnotationAngerLikelihood {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<FaceAnnotationAngerLikelihood, ()> {
            Ok(match s {
                "LIKELY" => FaceAnnotationAngerLikelihood::Likely,
                "POSSIBLE" => FaceAnnotationAngerLikelihood::Possible,
                "UNKNOWN" => FaceAnnotationAngerLikelihood::Unknown,
                "UNLIKELY" => FaceAnnotationAngerLikelihood::Unlikely,
                "VERY_LIKELY" => FaceAnnotationAngerLikelihood::VeryLikely,
                "VERY_UNLIKELY" => FaceAnnotationAngerLikelihood::VeryUnlikely,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for FaceAnnotationAngerLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for FaceAnnotationAngerLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for FaceAnnotationAngerLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => FaceAnnotationAngerLikelihood::Likely,
                "POSSIBLE" => FaceAnnotationAngerLikelihood::Possible,
                "UNKNOWN" => FaceAnnotationAngerLikelihood::Unknown,
                "UNLIKELY" => FaceAnnotationAngerLikelihood::Unlikely,
                "VERY_LIKELY" => FaceAnnotationAngerLikelihood::VeryLikely,
                "VERY_UNLIKELY" => FaceAnnotationAngerLikelihood::VeryUnlikely,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for FaceAnnotationAngerLikelihood {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FaceAnnotationAngerLikelihood {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum FaceAnnotationBlurredLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl FaceAnnotationBlurredLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                FaceAnnotationBlurredLikelihood::Likely => "LIKELY",
                FaceAnnotationBlurredLikelihood::Possible => "POSSIBLE",
                FaceAnnotationBlurredLikelihood::Unknown => "UNKNOWN",
                FaceAnnotationBlurredLikelihood::Unlikely => "UNLIKELY",
                FaceAnnotationBlurredLikelihood::VeryLikely => "VERY_LIKELY",
                FaceAnnotationBlurredLikelihood::VeryUnlikely => "VERY_UNLIKELY",
            }
        }
    }
    impl ::std::convert::AsRef<str> for FaceAnnotationBlurredLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for FaceAnnotationBlurredLikelihood {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<FaceAnnotationBlurredLikelihood, ()> {
            Ok(match s {
                "LIKELY" => FaceAnnotationBlurredLikelihood::Likely,
                "POSSIBLE" => FaceAnnotationBlurredLikelihood::Possible,
                "UNKNOWN" => FaceAnnotationBlurredLikelihood::Unknown,
                "UNLIKELY" => FaceAnnotationBlurredLikelihood::Unlikely,
                "VERY_LIKELY" => FaceAnnotationBlurredLikelihood::VeryLikely,
                "VERY_UNLIKELY" => FaceAnnotationBlurredLikelihood::VeryUnlikely,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for FaceAnnotationBlurredLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for FaceAnnotationBlurredLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for FaceAnnotationBlurredLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => FaceAnnotationBlurredLikelihood::Likely,
                "POSSIBLE" => FaceAnnotationBlurredLikelihood::Possible,
                "UNKNOWN" => FaceAnnotationBlurredLikelihood::Unknown,
                "UNLIKELY" => FaceAnnotationBlurredLikelihood::Unlikely,
                "VERY_LIKELY" => FaceAnnotationBlurredLikelihood::VeryLikely,
                "VERY_UNLIKELY" => FaceAnnotationBlurredLikelihood::VeryUnlikely,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for FaceAnnotationBlurredLikelihood {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FaceAnnotationBlurredLikelihood {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum FaceAnnotationHeadwearLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl FaceAnnotationHeadwearLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                FaceAnnotationHeadwearLikelihood::Likely => "LIKELY",
                FaceAnnotationHeadwearLikelihood::Possible => "POSSIBLE",
                FaceAnnotationHeadwearLikelihood::Unknown => "UNKNOWN",
                FaceAnnotationHeadwearLikelihood::Unlikely => "UNLIKELY",
                FaceAnnotationHeadwearLikelihood::VeryLikely => "VERY_LIKELY",
                FaceAnnotationHeadwearLikelihood::VeryUnlikely => "VERY_UNLIKELY",
            }
        }
    }
    impl ::std::convert::AsRef<str> for FaceAnnotationHeadwearLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for FaceAnnotationHeadwearLikelihood {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<FaceAnnotationHeadwearLikelihood, ()> {
            Ok(match s {
                "LIKELY" => FaceAnnotationHeadwearLikelihood::Likely,
                "POSSIBLE" => FaceAnnotationHeadwearLikelihood::Possible,
                "UNKNOWN" => FaceAnnotationHeadwearLikelihood::Unknown,
                "UNLIKELY" => FaceAnnotationHeadwearLikelihood::Unlikely,
                "VERY_LIKELY" => FaceAnnotationHeadwearLikelihood::VeryLikely,
                "VERY_UNLIKELY" => FaceAnnotationHeadwearLikelihood::VeryUnlikely,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for FaceAnnotationHeadwearLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for FaceAnnotationHeadwearLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for FaceAnnotationHeadwearLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => FaceAnnotationHeadwearLikelihood::Likely,
                "POSSIBLE" => FaceAnnotationHeadwearLikelihood::Possible,
                "UNKNOWN" => FaceAnnotationHeadwearLikelihood::Unknown,
                "UNLIKELY" => FaceAnnotationHeadwearLikelihood::Unlikely,
                "VERY_LIKELY" => FaceAnnotationHeadwearLikelihood::VeryLikely,
                "VERY_UNLIKELY" => FaceAnnotationHeadwearLikelihood::VeryUnlikely,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for FaceAnnotationHeadwearLikelihood {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FaceAnnotationHeadwearLikelihood {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum FaceAnnotationJoyLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl FaceAnnotationJoyLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                FaceAnnotationJoyLikelihood::Likely => "LIKELY",
                FaceAnnotationJoyLikelihood::Possible => "POSSIBLE",
                FaceAnnotationJoyLikelihood::Unknown => "UNKNOWN",
                FaceAnnotationJoyLikelihood::Unlikely => "UNLIKELY",
                FaceAnnotationJoyLikelihood::VeryLikely => "VERY_LIKELY",
                FaceAnnotationJoyLikelihood::VeryUnlikely => "VERY_UNLIKELY",
            }
        }
    }
    impl ::std::convert::AsRef<str> for FaceAnnotationJoyLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for FaceAnnotationJoyLikelihood {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<FaceAnnotationJoyLikelihood, ()> {
            Ok(match s {
                "LIKELY" => FaceAnnotationJoyLikelihood::Likely,
                "POSSIBLE" => FaceAnnotationJoyLikelihood::Possible,
                "UNKNOWN" => FaceAnnotationJoyLikelihood::Unknown,
                "UNLIKELY" => FaceAnnotationJoyLikelihood::Unlikely,
                "VERY_LIKELY" => FaceAnnotationJoyLikelihood::VeryLikely,
                "VERY_UNLIKELY" => FaceAnnotationJoyLikelihood::VeryUnlikely,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for FaceAnnotationJoyLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for FaceAnnotationJoyLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for FaceAnnotationJoyLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => FaceAnnotationJoyLikelihood::Likely,
                "POSSIBLE" => FaceAnnotationJoyLikelihood::Possible,
                "UNKNOWN" => FaceAnnotationJoyLikelihood::Unknown,
                "UNLIKELY" => FaceAnnotationJoyLikelihood::Unlikely,
                "VERY_LIKELY" => FaceAnnotationJoyLikelihood::VeryLikely,
                "VERY_UNLIKELY" => FaceAnnotationJoyLikelihood::VeryUnlikely,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for FaceAnnotationJoyLikelihood {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FaceAnnotationJoyLikelihood {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum FaceAnnotationSorrowLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl FaceAnnotationSorrowLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                FaceAnnotationSorrowLikelihood::Likely => "LIKELY",
                FaceAnnotationSorrowLikelihood::Possible => "POSSIBLE",
                FaceAnnotationSorrowLikelihood::Unknown => "UNKNOWN",
                FaceAnnotationSorrowLikelihood::Unlikely => "UNLIKELY",
                FaceAnnotationSorrowLikelihood::VeryLikely => "VERY_LIKELY",
                FaceAnnotationSorrowLikelihood::VeryUnlikely => "VERY_UNLIKELY",
            }
        }
    }
    impl ::std::convert::AsRef<str> for FaceAnnotationSorrowLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for FaceAnnotationSorrowLikelihood {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<FaceAnnotationSorrowLikelihood, ()> {
            Ok(match s {
                "LIKELY" => FaceAnnotationSorrowLikelihood::Likely,
                "POSSIBLE" => FaceAnnotationSorrowLikelihood::Possible,
                "UNKNOWN" => FaceAnnotationSorrowLikelihood::Unknown,
                "UNLIKELY" => FaceAnnotationSorrowLikelihood::Unlikely,
                "VERY_LIKELY" => FaceAnnotationSorrowLikelihood::VeryLikely,
                "VERY_UNLIKELY" => FaceAnnotationSorrowLikelihood::VeryUnlikely,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for FaceAnnotationSorrowLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for FaceAnnotationSorrowLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for FaceAnnotationSorrowLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => FaceAnnotationSorrowLikelihood::Likely,
                "POSSIBLE" => FaceAnnotationSorrowLikelihood::Possible,
                "UNKNOWN" => FaceAnnotationSorrowLikelihood::Unknown,
                "UNLIKELY" => FaceAnnotationSorrowLikelihood::Unlikely,
                "VERY_LIKELY" => FaceAnnotationSorrowLikelihood::VeryLikely,
                "VERY_UNLIKELY" => FaceAnnotationSorrowLikelihood::VeryUnlikely,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for FaceAnnotationSorrowLikelihood {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FaceAnnotationSorrowLikelihood {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum FaceAnnotationSurpriseLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl FaceAnnotationSurpriseLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                FaceAnnotationSurpriseLikelihood::Likely => "LIKELY",
                FaceAnnotationSurpriseLikelihood::Possible => "POSSIBLE",
                FaceAnnotationSurpriseLikelihood::Unknown => "UNKNOWN",
                FaceAnnotationSurpriseLikelihood::Unlikely => "UNLIKELY",
                FaceAnnotationSurpriseLikelihood::VeryLikely => "VERY_LIKELY",
                FaceAnnotationSurpriseLikelihood::VeryUnlikely => "VERY_UNLIKELY",
            }
        }
    }
    impl ::std::convert::AsRef<str> for FaceAnnotationSurpriseLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for FaceAnnotationSurpriseLikelihood {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<FaceAnnotationSurpriseLikelihood, ()> {
            Ok(match s {
                "LIKELY" => FaceAnnotationSurpriseLikelihood::Likely,
                "POSSIBLE" => FaceAnnotationSurpriseLikelihood::Possible,
                "UNKNOWN" => FaceAnnotationSurpriseLikelihood::Unknown,
                "UNLIKELY" => FaceAnnotationSurpriseLikelihood::Unlikely,
                "VERY_LIKELY" => FaceAnnotationSurpriseLikelihood::VeryLikely,
                "VERY_UNLIKELY" => FaceAnnotationSurpriseLikelihood::VeryUnlikely,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for FaceAnnotationSurpriseLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for FaceAnnotationSurpriseLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for FaceAnnotationSurpriseLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => FaceAnnotationSurpriseLikelihood::Likely,
                "POSSIBLE" => FaceAnnotationSurpriseLikelihood::Possible,
                "UNKNOWN" => FaceAnnotationSurpriseLikelihood::Unknown,
                "UNLIKELY" => FaceAnnotationSurpriseLikelihood::Unlikely,
                "VERY_LIKELY" => FaceAnnotationSurpriseLikelihood::VeryLikely,
                "VERY_UNLIKELY" => FaceAnnotationSurpriseLikelihood::VeryUnlikely,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for FaceAnnotationSurpriseLikelihood {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FaceAnnotationSurpriseLikelihood {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum FaceAnnotationUnderExposedLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl FaceAnnotationUnderExposedLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                FaceAnnotationUnderExposedLikelihood::Likely => "LIKELY",
                FaceAnnotationUnderExposedLikelihood::Possible => "POSSIBLE",
                FaceAnnotationUnderExposedLikelihood::Unknown => "UNKNOWN",
                FaceAnnotationUnderExposedLikelihood::Unlikely => "UNLIKELY",
                FaceAnnotationUnderExposedLikelihood::VeryLikely => "VERY_LIKELY",
                FaceAnnotationUnderExposedLikelihood::VeryUnlikely => "VERY_UNLIKELY",
            }
        }
    }
    impl ::std::convert::AsRef<str> for FaceAnnotationUnderExposedLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for FaceAnnotationUnderExposedLikelihood {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<FaceAnnotationUnderExposedLikelihood, ()> {
            Ok(match s {
                "LIKELY" => FaceAnnotationUnderExposedLikelihood::Likely,
                "POSSIBLE" => FaceAnnotationUnderExposedLikelihood::Possible,
                "UNKNOWN" => FaceAnnotationUnderExposedLikelihood::Unknown,
                "UNLIKELY" => FaceAnnotationUnderExposedLikelihood::Unlikely,
                "VERY_LIKELY" => FaceAnnotationUnderExposedLikelihood::VeryLikely,
                "VERY_UNLIKELY" => FaceAnnotationUnderExposedLikelihood::VeryUnlikely,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for FaceAnnotationUnderExposedLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for FaceAnnotationUnderExposedLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for FaceAnnotationUnderExposedLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => FaceAnnotationUnderExposedLikelihood::Likely,
                "POSSIBLE" => FaceAnnotationUnderExposedLikelihood::Possible,
                "UNKNOWN" => FaceAnnotationUnderExposedLikelihood::Unknown,
                "UNLIKELY" => FaceAnnotationUnderExposedLikelihood::Unlikely,
                "VERY_LIKELY" => FaceAnnotationUnderExposedLikelihood::VeryLikely,
                "VERY_UNLIKELY" => FaceAnnotationUnderExposedLikelihood::VeryUnlikely,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for FaceAnnotationUnderExposedLikelihood {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FaceAnnotationUnderExposedLikelihood {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GcsDestination {
        #[doc = "Google Cloud Storage URI prefix where the results will be stored. Results will be in JSON format and preceded by its corresponding input URI prefix. This field can either represent a gcs file prefix or gcs directory. In either case, the uri should be unique because in order to get all of the output files, you will need to do a wildcard gcs search on the uri prefix you provide. Examples: * File Prefix: gs://bucket-name/here/filenameprefix The output files will be created in gs://bucket-name/here/ and the names of the output files will begin with “filenameprefix”. * Directory Prefix: gs://bucket-name/some/location/ The output files will be created in gs://bucket-name/some/location/ and the names of the output files could be anything because there was no filename prefix specified. If multiple outputs, each response is still AnnotateFileResponse, each of which contains some subset of the full list of AnnotateImageResponse. Multiple outputs can happen if, for example, the output JSON is too large and overflows into multiple sharded files."]
        #[serde(
            rename = "uri",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub uri: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GcsDestination {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GcsDestination {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GcsSource {
        #[doc = "Google Cloud Storage URI for the input file. This must only be a Google Cloud Storage object. Wildcards are not currently supported."]
        #[serde(
            rename = "uri",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub uri: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GcsSource {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GcsSource {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1AnnotateFileRequest {
        #[doc = "Required. Requested features."]
        #[serde(
            rename = "features",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub features: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P1Beta1Feature>>,
        #[doc = "Additional context that may accompany the image(s) in the file."]
        #[serde(
            rename = "imageContext",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub image_context:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1ImageContext>,
        #[doc = "Required. Information about the input file."]
        #[serde(
            rename = "inputConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub input_config:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1InputConfig>,
        #[doc = "Pages of the file to perform image annotation. Pages starts from 1, we assume the first page of the file is page 1. At most 5 pages are supported per request. Pages can be negative. Page 1 means the first page. Page 2 means the second page. Page -1 means the last page. Page -2 means the second to the last page. If the file is GIF instead of PDF or TIFF, page refers to GIF frames. If this field is empty, by default the service performs image annotation for the first 5 pages of the file."]
        #[serde(
            rename = "pages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pages: ::std::option::Option<Vec<i32>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1AnnotateFileRequest {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1AnnotateFileRequest {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct GoogleCloudVisionV1P1Beta1AnnotateFileResponse {
        #[doc = "If set, represents the error message for the failed request. The `responses` field will not be set in this case."]
        #[serde(
            rename = "error",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub error: ::std::option::Option<crate::schemas::Status>,
        #[doc = "Information about the file for which this response is generated."]
        #[serde(
            rename = "inputConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub input_config:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1InputConfig>,
        #[doc = "Individual responses to images found within the file. This field will be empty if the `error` field is set."]
        #[serde(
            rename = "responses",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub responses: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P1Beta1AnnotateImageResponse>,
        >,
        #[doc = "This field gives the total number of pages in the file."]
        #[serde(
            rename = "totalPages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub total_pages: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1AnnotateFileResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1AnnotateFileResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1AnnotateImageRequest {
        #[doc = "Requested features."]
        #[serde(
            rename = "features",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub features: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P1Beta1Feature>>,
        #[doc = "The image to be processed."]
        #[serde(
            rename = "image",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub image: ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1Image>,
        #[doc = "Additional context that may accompany the image."]
        #[serde(
            rename = "imageContext",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub image_context:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1ImageContext>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1AnnotateImageRequest {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1AnnotateImageRequest {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct GoogleCloudVisionV1P1Beta1AnnotateImageResponse {
        #[doc = "If present, contextual information is needed to understand where this image comes from."]
        #[serde(
            rename = "context",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub context:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1ImageAnnotationContext>,
        #[doc = "If present, crop hints have completed successfully."]
        #[serde(
            rename = "cropHintsAnnotation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub crop_hints_annotation:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1CropHintsAnnotation>,
        #[doc = "If set, represents the error message for the operation. Note that filled-in image annotations are guaranteed to be correct, even when `error` is set."]
        #[serde(
            rename = "error",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub error: ::std::option::Option<crate::schemas::Status>,
        #[doc = "If present, face detection has completed successfully."]
        #[serde(
            rename = "faceAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub face_annotations:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P1Beta1FaceAnnotation>>,
        #[doc = "If present, text (OCR) detection or document (OCR) text detection has completed successfully. This annotation provides the structural hierarchy for the OCR detected text."]
        #[serde(
            rename = "fullTextAnnotation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub full_text_annotation:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1TextAnnotation>,
        #[doc = "If present, image properties were extracted successfully."]
        #[serde(
            rename = "imagePropertiesAnnotation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub image_properties_annotation:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1ImageProperties>,
        #[doc = "If present, label detection has completed successfully."]
        #[serde(
            rename = "labelAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub label_annotations:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P1Beta1EntityAnnotation>>,
        #[doc = "If present, landmark detection has completed successfully."]
        #[serde(
            rename = "landmarkAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub landmark_annotations:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P1Beta1EntityAnnotation>>,
        #[doc = "If present, localized object detection has completed successfully. This will be sorted descending by confidence score."]
        #[serde(
            rename = "localizedObjectAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub localized_object_annotations: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P1Beta1LocalizedObjectAnnotation>,
        >,
        #[doc = "If present, logo detection has completed successfully."]
        #[serde(
            rename = "logoAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub logo_annotations:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P1Beta1EntityAnnotation>>,
        #[doc = "If present, product search has completed successfully."]
        #[serde(
            rename = "productSearchResults",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product_search_results:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1ProductSearchResults>,
        #[doc = "If present, safe-search annotation has completed successfully."]
        #[serde(
            rename = "safeSearchAnnotation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub safe_search_annotation:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1SafeSearchAnnotation>,
        #[doc = "If present, text (OCR) detection has completed successfully."]
        #[serde(
            rename = "textAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub text_annotations:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P1Beta1EntityAnnotation>>,
        #[doc = "If present, web detection has completed successfully."]
        #[serde(
            rename = "webDetection",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub web_detection:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1WebDetection>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1AnnotateImageResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1AnnotateImageResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1AsyncAnnotateFileRequest {
        #[doc = "Required. Requested features."]
        #[serde(
            rename = "features",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub features: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P1Beta1Feature>>,
        #[doc = "Additional context that may accompany the image(s) in the file."]
        #[serde(
            rename = "imageContext",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub image_context:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1ImageContext>,
        #[doc = "Required. Information about the input file."]
        #[serde(
            rename = "inputConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub input_config:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1InputConfig>,
        #[doc = "Required. The desired output location and metadata (e.g. format)."]
        #[serde(
            rename = "outputConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub output_config:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1OutputConfig>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1AsyncAnnotateFileRequest {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1AsyncAnnotateFileRequest {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1AsyncAnnotateFileResponse {
        #[doc = "The output location and metadata from AsyncAnnotateFileRequest."]
        #[serde(
            rename = "outputConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub output_config:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1OutputConfig>,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1AsyncAnnotateFileResponse
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1AsyncAnnotateFileResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1AsyncBatchAnnotateFilesRequest {
        #[doc = "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`."]
        #[serde(
            rename = "parent",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub parent: ::std::option::Option<String>,
        #[doc = "Required. Individual async file annotation requests for this batch."]
        #[serde(
            rename = "requests",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub requests: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P1Beta1AsyncAnnotateFileRequest>,
        >,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1AsyncBatchAnnotateFilesRequest
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P1Beta1AsyncBatchAnnotateFilesRequest
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1AsyncBatchAnnotateFilesResponse {
        #[doc = "The list of file annotation responses, one for each request in AsyncBatchAnnotateFilesRequest."]
        #[serde(
            rename = "responses",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub responses: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P1Beta1AsyncAnnotateFileResponse>,
        >,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1AsyncBatchAnnotateFilesResponse
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P1Beta1AsyncBatchAnnotateFilesResponse
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1AsyncBatchAnnotateImagesRequest {
        #[doc = "Required. The desired output location and metadata (e.g. format)."]
        #[serde(
            rename = "outputConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub output_config:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1OutputConfig>,
        #[doc = "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`."]
        #[serde(
            rename = "parent",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub parent: ::std::option::Option<String>,
        #[doc = "Required. Individual image annotation requests for this batch."]
        #[serde(
            rename = "requests",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub requests: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P1Beta1AnnotateImageRequest>,
        >,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1AsyncBatchAnnotateImagesRequest
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P1Beta1AsyncBatchAnnotateImagesRequest
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1BatchAnnotateFilesRequest {
        #[doc = "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`."]
        #[serde(
            rename = "parent",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub parent: ::std::option::Option<String>,
        #[doc = "Required. The list of file annotation requests. Right now we support only one AnnotateFileRequest in BatchAnnotateFilesRequest."]
        #[serde(
            rename = "requests",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub requests: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P1Beta1AnnotateFileRequest>,
        >,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1BatchAnnotateFilesRequest
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1BatchAnnotateFilesRequest {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct GoogleCloudVisionV1P1Beta1BatchAnnotateFilesResponse {
        #[doc = "The list of file annotation responses, each response corresponding to each AnnotateFileRequest in BatchAnnotateFilesRequest."]
        #[serde(
            rename = "responses",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub responses: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P1Beta1AnnotateFileResponse>,
        >,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1BatchAnnotateFilesResponse
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1BatchAnnotateFilesResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1BatchAnnotateImagesRequest {
        #[doc = "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`."]
        #[serde(
            rename = "parent",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub parent: ::std::option::Option<String>,
        #[doc = "Required. Individual image annotation requests for this batch."]
        #[serde(
            rename = "requests",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub requests: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P1Beta1AnnotateImageRequest>,
        >,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1BatchAnnotateImagesRequest
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1BatchAnnotateImagesRequest {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct GoogleCloudVisionV1P1Beta1BatchAnnotateImagesResponse {
        #[doc = "Individual responses to image annotation requests within the batch."]
        #[serde(
            rename = "responses",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub responses: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P1Beta1AnnotateImageResponse>,
        >,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1BatchAnnotateImagesResponse
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P1Beta1BatchAnnotateImagesResponse
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1Block {
        #[doc = "Detected block type (text, image etc) for this block."]
        #[serde(
            rename = "blockType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub block_type:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1BlockBlockType>,
        #[doc = "The bounding box for the block. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the ‘natural’ orientation. For example: * when the text is horizontal it might look like: 0––1 | | 3––2 * when it’s rotated 180 degrees around the top-left corner it becomes: 2––3 | | 1––0 and the vertex order will still be (0, 1, 2, 3)."]
        #[serde(
            rename = "boundingBox",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_box:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1BoundingPoly>,
        #[doc = "Confidence of the OCR results on the block. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "List of paragraphs in this block (if this blocks is of type text)."]
        #[serde(
            rename = "paragraphs",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub paragraphs:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P1Beta1Paragraph>>,
        #[doc = "Additional information detected for the block."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P1Beta1TextAnnotationTextProperty,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1Block {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1Block {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P1Beta1BlockBlockType {
        #[doc = "Barcode block."]
        Barcode,
        #[doc = "Image block."]
        Picture,
        #[doc = "Horizontal/vertical line box."]
        Ruler,
        #[doc = "Table block."]
        Table,
        #[doc = "Regular text block."]
        Text,
        #[doc = "Unknown block type."]
        Unknown,
    }
    impl GoogleCloudVisionV1P1Beta1BlockBlockType {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P1Beta1BlockBlockType::Barcode => "BARCODE",
                GoogleCloudVisionV1P1Beta1BlockBlockType::Picture => "PICTURE",
                GoogleCloudVisionV1P1Beta1BlockBlockType::Ruler => "RULER",
                GoogleCloudVisionV1P1Beta1BlockBlockType::Table => "TABLE",
                GoogleCloudVisionV1P1Beta1BlockBlockType::Text => "TEXT",
                GoogleCloudVisionV1P1Beta1BlockBlockType::Unknown => "UNKNOWN",
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P1Beta1BlockBlockType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P1Beta1BlockBlockType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P1Beta1BlockBlockType, ()> {
            Ok(match s {
                "BARCODE" => GoogleCloudVisionV1P1Beta1BlockBlockType::Barcode,
                "PICTURE" => GoogleCloudVisionV1P1Beta1BlockBlockType::Picture,
                "RULER" => GoogleCloudVisionV1P1Beta1BlockBlockType::Ruler,
                "TABLE" => GoogleCloudVisionV1P1Beta1BlockBlockType::Table,
                "TEXT" => GoogleCloudVisionV1P1Beta1BlockBlockType::Text,
                "UNKNOWN" => GoogleCloudVisionV1P1Beta1BlockBlockType::Unknown,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P1Beta1BlockBlockType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P1Beta1BlockBlockType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P1Beta1BlockBlockType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "BARCODE" => GoogleCloudVisionV1P1Beta1BlockBlockType::Barcode,
                "PICTURE" => GoogleCloudVisionV1P1Beta1BlockBlockType::Picture,
                "RULER" => GoogleCloudVisionV1P1Beta1BlockBlockType::Ruler,
                "TABLE" => GoogleCloudVisionV1P1Beta1BlockBlockType::Table,
                "TEXT" => GoogleCloudVisionV1P1Beta1BlockBlockType::Text,
                "UNKNOWN" => GoogleCloudVisionV1P1Beta1BlockBlockType::Unknown,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1BlockBlockType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1BlockBlockType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1BoundingPoly {
        #[doc = "The bounding polygon normalized vertices."]
        #[serde(
            rename = "normalizedVertices",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub normalized_vertices:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P1Beta1NormalizedVertex>>,
        #[doc = "The bounding polygon vertices."]
        #[serde(
            rename = "vertices",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub vertices: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P1Beta1Vertex>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1BoundingPoly {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1BoundingPoly {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1ColorInfo {
        #[doc = "RGB components of the color."]
        #[serde(
            rename = "color",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub color: ::std::option::Option<crate::schemas::Color>,
        #[doc = "The fraction of pixels the color occupies in the image. Value in range \\[0, 1\\]."]
        #[serde(
            rename = "pixelFraction",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pixel_fraction: ::std::option::Option<f32>,
        #[doc = "Image-specific score for this color. Value in range \\[0, 1\\]."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1ColorInfo {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1ColorInfo {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1CropHint {
        #[doc = "The bounding polygon for the crop region. The coordinates of the bounding box are in the original image’s scale."]
        #[serde(
            rename = "boundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_poly:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1BoundingPoly>,
        #[doc = "Confidence of this being a salient region. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Fraction of importance of this salient region with respect to the original image."]
        #[serde(
            rename = "importanceFraction",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub importance_fraction: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1CropHint {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1CropHint {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1CropHintsAnnotation {
        #[doc = "Crop hint results."]
        #[serde(
            rename = "cropHints",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub crop_hints:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P1Beta1CropHint>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1CropHintsAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1CropHintsAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1CropHintsParams {
        #[doc = "Aspect ratios in floats, representing the ratio of the width to the height of the image. For example, if the desired aspect ratio is 4/3, the corresponding float value should be 1.33333. If not specified, the best possible crop is returned. The number of provided aspect ratios is limited to a maximum of 16; any aspect ratios provided after the 16th are ignored."]
        #[serde(
            rename = "aspectRatios",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub aspect_ratios: ::std::option::Option<Vec<f32>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1CropHintsParams {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1CropHintsParams {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1DominantColorsAnnotation {
        #[doc = "RGB color values with their score and pixel fraction."]
        #[serde(
            rename = "colors",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub colors: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P1Beta1ColorInfo>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1DominantColorsAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1DominantColorsAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1EntityAnnotation {
        #[doc = "Image region to which this entity belongs. Not produced for `LABEL_DETECTION` features."]
        #[serde(
            rename = "boundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_poly:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1BoundingPoly>,
        #[doc = "**Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the “Eiffel Tower” entity is detected, this field represents the confidence that there is a tower in the query image. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Entity textual description, expressed in its `locale` language."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "The language code for the locale in which the entity textual `description` is expressed."]
        #[serde(
            rename = "locale",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub locale: ::std::option::Option<String>,
        #[doc = "The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks."]
        #[serde(
            rename = "locations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub locations:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P1Beta1LocationInfo>>,
        #[doc = "Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/)."]
        #[serde(
            rename = "mid",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mid: ::std::option::Option<String>,
        #[doc = "Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity."]
        #[serde(
            rename = "properties",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub properties:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P1Beta1Property>>,
        #[doc = "Overall score of the result. Range \\[0, 1\\]."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
        #[doc = "The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of “tower” is likely higher to an image containing the detected “Eiffel Tower” than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range \\[0, 1\\]."]
        #[serde(
            rename = "topicality",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub topicality: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1EntityAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1EntityAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1FaceAnnotation {
        #[doc = "Anger likelihood."]
        #[serde(
            rename = "angerLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub anger_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood,
        >,
        #[doc = "Blurred likelihood."]
        #[serde(
            rename = "blurredLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub blurred_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood,
        >,
        #[doc = "The bounding polygon around the face. The coordinates of the bounding box are in the original image’s scale. The bounding box is computed to “frame” the face in accordance with human expectations. It is based on the landmarker results. Note that one or more x and/or y coordinates may not be generated in the `BoundingPoly` (the polygon will be unbounded) if only a partial face appears in the image to be annotated."]
        #[serde(
            rename = "boundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_poly:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1BoundingPoly>,
        #[doc = "Detection confidence. Range \\[0, 1\\]."]
        #[serde(
            rename = "detectionConfidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub detection_confidence: ::std::option::Option<f32>,
        #[doc = "The `fd_bounding_poly` bounding polygon is tighter than the `boundingPoly`, and encloses only the skin part of the face. Typically, it is used to eliminate the face from any image analysis that detects the “amount of skin” visible in an image. It is not based on the landmarker results, only on the initial face detection, hence the fd (face detection) prefix."]
        #[serde(
            rename = "fdBoundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub fd_bounding_poly:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1BoundingPoly>,
        #[doc = "Headwear likelihood."]
        #[serde(
            rename = "headwearLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub headwear_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood,
        >,
        #[doc = "Joy likelihood."]
        #[serde(
            rename = "joyLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub joy_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood,
        >,
        #[doc = "Face landmarking confidence. Range \\[0, 1\\]."]
        #[serde(
            rename = "landmarkingConfidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub landmarking_confidence: ::std::option::Option<f32>,
        #[doc = "Detected face landmarks."]
        #[serde(
            rename = "landmarks",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub landmarks: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P1Beta1FaceAnnotationLandmark>,
        >,
        #[doc = "Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range \\[-180,180\\]."]
        #[serde(
            rename = "panAngle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pan_angle: ::std::option::Option<f32>,
        #[doc = "Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range \\[-180,180\\]."]
        #[serde(
            rename = "rollAngle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub roll_angle: ::std::option::Option<f32>,
        #[doc = "Sorrow likelihood."]
        #[serde(
            rename = "sorrowLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub sorrow_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood,
        >,
        #[doc = "Surprise likelihood."]
        #[serde(
            rename = "surpriseLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub surprise_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood,
        >,
        #[doc = "Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image’s horizontal plane. Range \\[-180,180\\]."]
        #[serde(
            rename = "tiltAngle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tilt_angle: ::std::option::Option<f32>,
        #[doc = "Under-exposed likelihood."]
        #[serde(
            rename = "underExposedLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub under_exposed_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1FaceAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1FaceAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood::Possible => "POSSIBLE",
                GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood::VeryLikely => {
                    "VERY_LIKELY"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P1Beta1FaceAnnotationAngerLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood::Possible => "POSSIBLE",
                GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood::VeryLikely => {
                    "VERY_LIKELY"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P1Beta1FaceAnnotationBlurredLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood::Possible => "POSSIBLE",
                GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood::VeryLikely => {
                    "VERY_LIKELY"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P1Beta1FaceAnnotationHeadwearLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood::Possible => "POSSIBLE",
                GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood::VeryLikely => "VERY_LIKELY",
                GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P1Beta1FaceAnnotationJoyLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood::Possible => "POSSIBLE",
                GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood::VeryLikely => {
                    "VERY_LIKELY"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P1Beta1FaceAnnotationSorrowLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood::Possible => "POSSIBLE",
                GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood::VeryLikely => {
                    "VERY_LIKELY"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P1Beta1FaceAnnotationSurpriseLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood::Possible => {
                    "POSSIBLE"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood::Unknown => {
                    "UNKNOWN"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood::Unlikely => {
                    "UNLIKELY"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood::VeryLikely => {
                    "VERY_LIKELY"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood::Likely,
                "POSSIBLE" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood::Possible
                }
                "UNKNOWN" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood::Unknown
                }
                "UNLIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood::Unlikely
                }
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de>
        for GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood
    {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood::Likely,
                "POSSIBLE" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood::Possible
                }
                "UNKNOWN" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood::Unknown
                }
                "UNLIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood::Unlikely
                }
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P1Beta1FaceAnnotationUnderExposedLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1FaceAnnotationLandmark {
        #[doc = "Face landmark position."]
        #[serde(
            rename = "position",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub position: ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1Position>,
        #[doc = "Face landmark type."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1FaceAnnotationLandmark {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1FaceAnnotationLandmark {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType {
        #[doc = "Chin gnathion."]
        ChinGnathion,
        #[doc = "Chin left gonion."]
        ChinLeftGonion,
        #[doc = "Chin right gonion."]
        ChinRightGonion,
        #[doc = "Forehead glabella."]
        ForeheadGlabella,
        #[doc = "Left cheek center."]
        LeftCheekCenter,
        #[doc = "Left ear tragion."]
        LeftEarTragion,
        #[doc = "Left eye."]
        LeftEye,
        #[doc = "Left eye, bottom boundary."]
        LeftEyeBottomBoundary,
        #[doc = "Left eye, left corner."]
        LeftEyeLeftCorner,
        #[doc = "Left eye pupil."]
        LeftEyePupil,
        #[doc = "Left eye, right corner."]
        LeftEyeRightCorner,
        #[doc = "Left eye, top boundary."]
        LeftEyeTopBoundary,
        #[doc = "Left eyebrow, upper midpoint."]
        LeftEyebrowUpperMidpoint,
        #[doc = "Left of left eyebrow."]
        LeftOfLeftEyebrow,
        #[doc = "Left of right eyebrow."]
        LeftOfRightEyebrow,
        #[doc = "Lower lip."]
        LowerLip,
        #[doc = "Midpoint between eyes."]
        MidpointBetweenEyes,
        #[doc = "Mouth center."]
        MouthCenter,
        #[doc = "Mouth left."]
        MouthLeft,
        #[doc = "Mouth right."]
        MouthRight,
        #[doc = "Nose, bottom center."]
        NoseBottomCenter,
        #[doc = "Nose, bottom left."]
        NoseBottomLeft,
        #[doc = "Nose, bottom right."]
        NoseBottomRight,
        #[doc = "Nose tip."]
        NoseTip,
        #[doc = "Right cheek center."]
        RightCheekCenter,
        #[doc = "Right ear tragion."]
        RightEarTragion,
        #[doc = "Right eye."]
        RightEye,
        #[doc = "Right eye, bottom boundary."]
        RightEyeBottomBoundary,
        #[doc = "Right eye, left corner."]
        RightEyeLeftCorner,
        #[doc = "Right eye pupil."]
        RightEyePupil,
        #[doc = "Right eye, right corner."]
        RightEyeRightCorner,
        #[doc = "Right eye, top boundary."]
        RightEyeTopBoundary,
        #[doc = "Right eyebrow, upper midpoint."]
        RightEyebrowUpperMidpoint,
        #[doc = "Right of left eyebrow."]
        RightOfLeftEyebrow,
        #[doc = "Right of right eyebrow."]
        RightOfRightEyebrow,
        #[doc = "Unknown face landmark detected. Should not be filled."]
        UnknownLandmark,
        #[doc = "Upper lip."]
        UpperLip,
    }
    impl GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::ChinGnathion => {
                    "CHIN_GNATHION"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::ChinLeftGonion => {
                    "CHIN_LEFT_GONION"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::ChinRightGonion => {
                    "CHIN_RIGHT_GONION"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::ForeheadGlabella => {
                    "FOREHEAD_GLABELLA"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftCheekCenter => {
                    "LEFT_CHEEK_CENTER"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftEarTragion => {
                    "LEFT_EAR_TRAGION"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftEye => "LEFT_EYE",
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftEyeBottomBoundary => {
                    "LEFT_EYE_BOTTOM_BOUNDARY"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftEyeLeftCorner => {
                    "LEFT_EYE_LEFT_CORNER"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftEyePupil => {
                    "LEFT_EYE_PUPIL"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftEyeRightCorner => {
                    "LEFT_EYE_RIGHT_CORNER"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftEyeTopBoundary => {
                    "LEFT_EYE_TOP_BOUNDARY"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftEyebrowUpperMidpoint => {
                    "LEFT_EYEBROW_UPPER_MIDPOINT"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftOfLeftEyebrow => {
                    "LEFT_OF_LEFT_EYEBROW"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftOfRightEyebrow => {
                    "LEFT_OF_RIGHT_EYEBROW"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LowerLip => "LOWER_LIP",
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::MidpointBetweenEyes => {
                    "MIDPOINT_BETWEEN_EYES"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::MouthCenter => "MOUTH_CENTER",
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::MouthLeft => "MOUTH_LEFT",
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::MouthRight => "MOUTH_RIGHT",
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::NoseBottomCenter => {
                    "NOSE_BOTTOM_CENTER"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::NoseBottomLeft => {
                    "NOSE_BOTTOM_LEFT"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::NoseBottomRight => {
                    "NOSE_BOTTOM_RIGHT"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::NoseTip => "NOSE_TIP",
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightCheekCenter => {
                    "RIGHT_CHEEK_CENTER"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightEarTragion => {
                    "RIGHT_EAR_TRAGION"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightEye => "RIGHT_EYE",
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightEyeBottomBoundary => {
                    "RIGHT_EYE_BOTTOM_BOUNDARY"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightEyeLeftCorner => {
                    "RIGHT_EYE_LEFT_CORNER"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightEyePupil => {
                    "RIGHT_EYE_PUPIL"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightEyeRightCorner => {
                    "RIGHT_EYE_RIGHT_CORNER"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightEyeTopBoundary => {
                    "RIGHT_EYE_TOP_BOUNDARY"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightEyebrowUpperMidpoint => {
                    "RIGHT_EYEBROW_UPPER_MIDPOINT"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightOfLeftEyebrow => {
                    "RIGHT_OF_LEFT_EYEBROW"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightOfRightEyebrow => {
                    "RIGHT_OF_RIGHT_EYEBROW"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::UnknownLandmark => {
                    "UNKNOWN_LANDMARK"
                }
                GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::UpperLip => "UPPER_LIP",
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType, ()>
        {
            Ok(match s {
                "CHIN_GNATHION" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::ChinGnathion
                }
                "CHIN_LEFT_GONION" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::ChinLeftGonion
                }
                "CHIN_RIGHT_GONION" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::ChinRightGonion
                }
                "FOREHEAD_GLABELLA" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::ForeheadGlabella
                }
                "LEFT_CHEEK_CENTER" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftCheekCenter
                }
                "LEFT_EAR_TRAGION" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftEarTragion
                }
                "LEFT_EYE" => GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftEye,
                "LEFT_EYE_BOTTOM_BOUNDARY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftEyeBottomBoundary
                }
                "LEFT_EYE_LEFT_CORNER" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftEyeLeftCorner
                }
                "LEFT_EYE_PUPIL" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftEyePupil
                }
                "LEFT_EYE_RIGHT_CORNER" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftEyeRightCorner
                }
                "LEFT_EYE_TOP_BOUNDARY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftEyeTopBoundary
                }
                "LEFT_EYEBROW_UPPER_MIDPOINT" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftEyebrowUpperMidpoint
                }
                "LEFT_OF_LEFT_EYEBROW" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftOfLeftEyebrow
                }
                "LEFT_OF_RIGHT_EYEBROW" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftOfRightEyebrow
                }
                "LOWER_LIP" => GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LowerLip,
                "MIDPOINT_BETWEEN_EYES" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::MidpointBetweenEyes
                }
                "MOUTH_CENTER" => GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::MouthCenter,
                "MOUTH_LEFT" => GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::MouthLeft,
                "MOUTH_RIGHT" => GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::MouthRight,
                "NOSE_BOTTOM_CENTER" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::NoseBottomCenter
                }
                "NOSE_BOTTOM_LEFT" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::NoseBottomLeft
                }
                "NOSE_BOTTOM_RIGHT" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::NoseBottomRight
                }
                "NOSE_TIP" => GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::NoseTip,
                "RIGHT_CHEEK_CENTER" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightCheekCenter
                }
                "RIGHT_EAR_TRAGION" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightEarTragion
                }
                "RIGHT_EYE" => GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightEye,
                "RIGHT_EYE_BOTTOM_BOUNDARY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightEyeBottomBoundary
                }
                "RIGHT_EYE_LEFT_CORNER" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightEyeLeftCorner
                }
                "RIGHT_EYE_PUPIL" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightEyePupil
                }
                "RIGHT_EYE_RIGHT_CORNER" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightEyeRightCorner
                }
                "RIGHT_EYE_TOP_BOUNDARY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightEyeTopBoundary
                }
                "RIGHT_EYEBROW_UPPER_MIDPOINT" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightEyebrowUpperMidpoint
                }
                "RIGHT_OF_LEFT_EYEBROW" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightOfLeftEyebrow
                }
                "RIGHT_OF_RIGHT_EYEBROW" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightOfRightEyebrow
                }
                "UNKNOWN_LANDMARK" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::UnknownLandmark
                }
                "UPPER_LIP" => GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::UpperLip,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CHIN_GNATHION" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::ChinGnathion
                }
                "CHIN_LEFT_GONION" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::ChinLeftGonion
                }
                "CHIN_RIGHT_GONION" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::ChinRightGonion
                }
                "FOREHEAD_GLABELLA" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::ForeheadGlabella
                }
                "LEFT_CHEEK_CENTER" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftCheekCenter
                }
                "LEFT_EAR_TRAGION" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftEarTragion
                }
                "LEFT_EYE" => GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftEye,
                "LEFT_EYE_BOTTOM_BOUNDARY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftEyeBottomBoundary
                }
                "LEFT_EYE_LEFT_CORNER" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftEyeLeftCorner
                }
                "LEFT_EYE_PUPIL" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftEyePupil
                }
                "LEFT_EYE_RIGHT_CORNER" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftEyeRightCorner
                }
                "LEFT_EYE_TOP_BOUNDARY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftEyeTopBoundary
                }
                "LEFT_EYEBROW_UPPER_MIDPOINT" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftEyebrowUpperMidpoint
                }
                "LEFT_OF_LEFT_EYEBROW" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftOfLeftEyebrow
                }
                "LEFT_OF_RIGHT_EYEBROW" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LeftOfRightEyebrow
                }
                "LOWER_LIP" => GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::LowerLip,
                "MIDPOINT_BETWEEN_EYES" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::MidpointBetweenEyes
                }
                "MOUTH_CENTER" => GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::MouthCenter,
                "MOUTH_LEFT" => GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::MouthLeft,
                "MOUTH_RIGHT" => GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::MouthRight,
                "NOSE_BOTTOM_CENTER" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::NoseBottomCenter
                }
                "NOSE_BOTTOM_LEFT" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::NoseBottomLeft
                }
                "NOSE_BOTTOM_RIGHT" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::NoseBottomRight
                }
                "NOSE_TIP" => GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::NoseTip,
                "RIGHT_CHEEK_CENTER" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightCheekCenter
                }
                "RIGHT_EAR_TRAGION" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightEarTragion
                }
                "RIGHT_EYE" => GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightEye,
                "RIGHT_EYE_BOTTOM_BOUNDARY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightEyeBottomBoundary
                }
                "RIGHT_EYE_LEFT_CORNER" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightEyeLeftCorner
                }
                "RIGHT_EYE_PUPIL" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightEyePupil
                }
                "RIGHT_EYE_RIGHT_CORNER" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightEyeRightCorner
                }
                "RIGHT_EYE_TOP_BOUNDARY" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightEyeTopBoundary
                }
                "RIGHT_EYEBROW_UPPER_MIDPOINT" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightEyebrowUpperMidpoint
                }
                "RIGHT_OF_LEFT_EYEBROW" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightOfLeftEyebrow
                }
                "RIGHT_OF_RIGHT_EYEBROW" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::RightOfRightEyebrow
                }
                "UNKNOWN_LANDMARK" => {
                    GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::UnknownLandmark
                }
                "UPPER_LIP" => GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType::UpperLip,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1FaceAnnotationLandmarkType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1Feature {
        #[doc = "Maximum number of results of this type. Does not apply to `TEXT_DETECTION`, `DOCUMENT_TEXT_DETECTION`, or `CROP_HINTS`."]
        #[serde(
            rename = "maxResults",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub max_results: ::std::option::Option<i32>,
        #[doc = "Model to use for the feature. Supported values: “builtin/stable” (the default if unset) and “builtin/latest”. `DOCUMENT_TEXT_DETECTION` and `TEXT_DETECTION` also support “builtin/weekly” for the bleeding edge release updated weekly."]
        #[serde(
            rename = "model",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub model: ::std::option::Option<String>,
        #[doc = "The feature type."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1FeatureType>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1Feature {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1Feature {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P1Beta1FeatureType {
        #[doc = "Run crop hints."]
        CropHints,
        #[doc = "Run dense text document OCR. Takes precedence when both `DOCUMENT_TEXT_DETECTION` and `TEXT_DETECTION` are present."]
        DocumentTextDetection,
        #[doc = "Run face detection."]
        FaceDetection,
        #[doc = "Compute a set of image properties, such as the image’s dominant colors."]
        ImageProperties,
        #[doc = "Run label detection."]
        LabelDetection,
        #[doc = "Run landmark detection."]
        LandmarkDetection,
        #[doc = "Run logo detection."]
        LogoDetection,
        #[doc = "Run localizer for object detection."]
        ObjectLocalization,
        #[doc = "Run Product Search."]
        ProductSearch,
        #[doc = "Run Safe Search to detect potentially unsafe or undesirable content."]
        SafeSearchDetection,
        #[doc = "Run text detection / optical character recognition (OCR). Text detection is optimized for areas of text within a larger image; if the image is a document, use `DOCUMENT_TEXT_DETECTION` instead."]
        TextDetection,
        #[doc = "Unspecified feature type."]
        TypeUnspecified,
        #[doc = "Run web detection."]
        WebDetection,
    }
    impl GoogleCloudVisionV1P1Beta1FeatureType {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P1Beta1FeatureType::CropHints => "CROP_HINTS",
                GoogleCloudVisionV1P1Beta1FeatureType::DocumentTextDetection => {
                    "DOCUMENT_TEXT_DETECTION"
                }
                GoogleCloudVisionV1P1Beta1FeatureType::FaceDetection => "FACE_DETECTION",
                GoogleCloudVisionV1P1Beta1FeatureType::ImageProperties => "IMAGE_PROPERTIES",
                GoogleCloudVisionV1P1Beta1FeatureType::LabelDetection => "LABEL_DETECTION",
                GoogleCloudVisionV1P1Beta1FeatureType::LandmarkDetection => "LANDMARK_DETECTION",
                GoogleCloudVisionV1P1Beta1FeatureType::LogoDetection => "LOGO_DETECTION",
                GoogleCloudVisionV1P1Beta1FeatureType::ObjectLocalization => "OBJECT_LOCALIZATION",
                GoogleCloudVisionV1P1Beta1FeatureType::ProductSearch => "PRODUCT_SEARCH",
                GoogleCloudVisionV1P1Beta1FeatureType::SafeSearchDetection => {
                    "SAFE_SEARCH_DETECTION"
                }
                GoogleCloudVisionV1P1Beta1FeatureType::TextDetection => "TEXT_DETECTION",
                GoogleCloudVisionV1P1Beta1FeatureType::TypeUnspecified => "TYPE_UNSPECIFIED",
                GoogleCloudVisionV1P1Beta1FeatureType::WebDetection => "WEB_DETECTION",
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P1Beta1FeatureType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P1Beta1FeatureType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<GoogleCloudVisionV1P1Beta1FeatureType, ()> {
            Ok(match s {
                "CROP_HINTS" => GoogleCloudVisionV1P1Beta1FeatureType::CropHints,
                "DOCUMENT_TEXT_DETECTION" => {
                    GoogleCloudVisionV1P1Beta1FeatureType::DocumentTextDetection
                }
                "FACE_DETECTION" => GoogleCloudVisionV1P1Beta1FeatureType::FaceDetection,
                "IMAGE_PROPERTIES" => GoogleCloudVisionV1P1Beta1FeatureType::ImageProperties,
                "LABEL_DETECTION" => GoogleCloudVisionV1P1Beta1FeatureType::LabelDetection,
                "LANDMARK_DETECTION" => GoogleCloudVisionV1P1Beta1FeatureType::LandmarkDetection,
                "LOGO_DETECTION" => GoogleCloudVisionV1P1Beta1FeatureType::LogoDetection,
                "OBJECT_LOCALIZATION" => GoogleCloudVisionV1P1Beta1FeatureType::ObjectLocalization,
                "PRODUCT_SEARCH" => GoogleCloudVisionV1P1Beta1FeatureType::ProductSearch,
                "SAFE_SEARCH_DETECTION" => {
                    GoogleCloudVisionV1P1Beta1FeatureType::SafeSearchDetection
                }
                "TEXT_DETECTION" => GoogleCloudVisionV1P1Beta1FeatureType::TextDetection,
                "TYPE_UNSPECIFIED" => GoogleCloudVisionV1P1Beta1FeatureType::TypeUnspecified,
                "WEB_DETECTION" => GoogleCloudVisionV1P1Beta1FeatureType::WebDetection,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P1Beta1FeatureType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P1Beta1FeatureType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P1Beta1FeatureType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CROP_HINTS" => GoogleCloudVisionV1P1Beta1FeatureType::CropHints,
                "DOCUMENT_TEXT_DETECTION" => {
                    GoogleCloudVisionV1P1Beta1FeatureType::DocumentTextDetection
                }
                "FACE_DETECTION" => GoogleCloudVisionV1P1Beta1FeatureType::FaceDetection,
                "IMAGE_PROPERTIES" => GoogleCloudVisionV1P1Beta1FeatureType::ImageProperties,
                "LABEL_DETECTION" => GoogleCloudVisionV1P1Beta1FeatureType::LabelDetection,
                "LANDMARK_DETECTION" => GoogleCloudVisionV1P1Beta1FeatureType::LandmarkDetection,
                "LOGO_DETECTION" => GoogleCloudVisionV1P1Beta1FeatureType::LogoDetection,
                "OBJECT_LOCALIZATION" => GoogleCloudVisionV1P1Beta1FeatureType::ObjectLocalization,
                "PRODUCT_SEARCH" => GoogleCloudVisionV1P1Beta1FeatureType::ProductSearch,
                "SAFE_SEARCH_DETECTION" => {
                    GoogleCloudVisionV1P1Beta1FeatureType::SafeSearchDetection
                }
                "TEXT_DETECTION" => GoogleCloudVisionV1P1Beta1FeatureType::TextDetection,
                "TYPE_UNSPECIFIED" => GoogleCloudVisionV1P1Beta1FeatureType::TypeUnspecified,
                "WEB_DETECTION" => GoogleCloudVisionV1P1Beta1FeatureType::WebDetection,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1FeatureType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1FeatureType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1GcsDestination {
        #[doc = "Google Cloud Storage URI prefix where the results will be stored. Results will be in JSON format and preceded by its corresponding input URI prefix. This field can either represent a gcs file prefix or gcs directory. In either case, the uri should be unique because in order to get all of the output files, you will need to do a wildcard gcs search on the uri prefix you provide. Examples: * File Prefix: gs://bucket-name/here/filenameprefix The output files will be created in gs://bucket-name/here/ and the names of the output files will begin with “filenameprefix”. * Directory Prefix: gs://bucket-name/some/location/ The output files will be created in gs://bucket-name/some/location/ and the names of the output files could be anything because there was no filename prefix specified. If multiple outputs, each response is still AnnotateFileResponse, each of which contains some subset of the full list of AnnotateImageResponse. Multiple outputs can happen if, for example, the output JSON is too large and overflows into multiple sharded files."]
        #[serde(
            rename = "uri",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub uri: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1GcsDestination {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1GcsDestination {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1GcsSource {
        #[doc = "Google Cloud Storage URI for the input file. This must only be a Google Cloud Storage object. Wildcards are not currently supported."]
        #[serde(
            rename = "uri",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub uri: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1GcsSource {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1GcsSource {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1Image {
        #[doc = "Image content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently, this field only works for BatchAnnotateImages requests. It does not work for AsyncBatchAnnotateImages requests."]
        #[serde(
            rename = "content",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content: ::std::option::Option<::google_api_bytes::Bytes>,
        #[doc = "Google Cloud Storage image location, or publicly-accessible image URL. If both `content` and `source` are provided for an image, `content` takes precedence and is used to perform the image annotation request."]
        #[serde(
            rename = "source",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub source: ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1ImageSource>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1Image {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1Image {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1ImageAnnotationContext {
        #[doc = "If the file was a PDF or TIFF, this field gives the page number within the file used to produce the image."]
        #[serde(
            rename = "pageNumber",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_number: ::std::option::Option<i32>,
        #[doc = "The URI of the file used to produce the image."]
        #[serde(
            rename = "uri",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub uri: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1ImageAnnotationContext {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1ImageAnnotationContext {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1ImageContext {
        #[doc = "Parameters for crop hints annotation request."]
        #[serde(
            rename = "cropHintsParams",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub crop_hints_params:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1CropHintsParams>,
        #[doc = "List of languages to use for TEXT_DETECTION. In most cases, an empty value yields the best results since it enables automatic language detection. For languages based on the Latin alphabet, setting `language_hints` is not needed. In rare cases, when the language of the text in the image is known, setting a hint will help get better results (although it will be a significant hindrance if the hint is wrong). Text detection returns an error if one or more of the specified languages is not one of the [supported languages](https://cloud.google.com/vision/docs/languages)."]
        #[serde(
            rename = "languageHints",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language_hints: ::std::option::Option<Vec<String>>,
        #[doc = "Not used."]
        #[serde(
            rename = "latLongRect",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub lat_long_rect:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1LatLongRect>,
        #[doc = "Parameters for product search."]
        #[serde(
            rename = "productSearchParams",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product_search_params:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1ProductSearchParams>,
        #[doc = "Parameters for text detection and document text detection."]
        #[serde(
            rename = "textDetectionParams",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub text_detection_params:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1TextDetectionParams>,
        #[doc = "Parameters for web detection."]
        #[serde(
            rename = "webDetectionParams",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub web_detection_params:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1WebDetectionParams>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1ImageContext {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1ImageContext {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1ImageProperties {
        #[doc = "If present, dominant colors completed successfully."]
        #[serde(
            rename = "dominantColors",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dominant_colors: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P1Beta1DominantColorsAnnotation,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1ImageProperties {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1ImageProperties {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1ImageSource {
        #[doc = "**Use `image_uri` instead.** The Google Cloud Storage URI of the form `gs://bucket_name/object_name`. Object versioning is not supported. See [Google Cloud Storage Request URIs](https://cloud.google.com/storage/docs/reference-uris) for more info."]
        #[serde(
            rename = "gcsImageUri",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub gcs_image_uri: ::std::option::Option<String>,
        #[doc = "The URI of the source image. Can be either: 1. A Google Cloud Storage URI of the form `gs://bucket_name/object_name`. Object versioning is not supported. See [Google Cloud Storage Request URIs](https://cloud.google.com/storage/docs/reference-uris) for more info. 2. A publicly-accessible image HTTP/HTTPS URL. When fetching images from HTTP/HTTPS URLs, Google cannot guarantee that the request will be completed. Your request may fail if the specified host denies the request (e.g. due to request throttling or DOS prevention), or if Google throttles requests to the site for abuse prevention. You should not depend on externally-hosted images for production applications. When both `gcs_image_uri` and `image_uri` are specified, `image_uri` takes precedence."]
        #[serde(
            rename = "imageUri",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub image_uri: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1ImageSource {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1ImageSource {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1InputConfig {
        #[doc = "File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently, this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests."]
        #[serde(
            rename = "content",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content: ::std::option::Option<::google_api_bytes::Bytes>,
        #[doc = "The Google Cloud Storage location to read the input from."]
        #[serde(
            rename = "gcsSource",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub gcs_source: ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1GcsSource>,
        #[doc = "The type of the file. Currently only “application/pdf”, “image/tiff” and “image/gif” are supported. Wildcards are not supported."]
        #[serde(
            rename = "mimeType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mime_type: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1InputConfig {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1InputConfig {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1LatLongRect {
        #[doc = "Max lat/long pair."]
        #[serde(
            rename = "maxLatLng",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub max_lat_lng: ::std::option::Option<crate::schemas::LatLng>,
        #[doc = "Min lat/long pair."]
        #[serde(
            rename = "minLatLng",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub min_lat_lng: ::std::option::Option<crate::schemas::LatLng>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1LatLongRect {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1LatLongRect {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1LocalizedObjectAnnotation {
        #[doc = "Image region to which this object belongs. This must be populated."]
        #[serde(
            rename = "boundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_poly:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1BoundingPoly>,
        #[doc = "The BCP-47 language code, such as “en-US” or “sr-Latn”. For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."]
        #[serde(
            rename = "languageCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language_code: ::std::option::Option<String>,
        #[doc = "Object ID that should align with EntityAnnotation mid."]
        #[serde(
            rename = "mid",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mid: ::std::option::Option<String>,
        #[doc = "Object name, expressed in its `language_code` language."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Score of the result. Range \\[0, 1\\]."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1LocalizedObjectAnnotation
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1LocalizedObjectAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1LocationInfo {
        #[doc = "lat/long location coordinates."]
        #[serde(
            rename = "latLng",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub lat_lng: ::std::option::Option<crate::schemas::LatLng>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1LocationInfo {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1LocationInfo {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1NormalizedVertex {
        #[doc = "X coordinate."]
        #[serde(
            rename = "x",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub x: ::std::option::Option<f32>,
        #[doc = "Y coordinate."]
        #[serde(
            rename = "y",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub y: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1NormalizedVertex {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1NormalizedVertex {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1OperationMetadata {
        #[doc = "The time when the batch request was received."]
        #[serde(
            rename = "createTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub create_time: ::std::option::Option<String>,
        #[doc = "Current state of the batch operation."]
        #[serde(
            rename = "state",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub state:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1OperationMetadataState>,
        #[doc = "The time when the operation result was last updated."]
        #[serde(
            rename = "updateTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub update_time: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1OperationMetadata {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1OperationMetadata {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P1Beta1OperationMetadataState {
        #[doc = "The batch processing was cancelled."]
        Cancelled,
        #[doc = "Request is received."]
        Created,
        #[doc = "The batch processing is done."]
        Done,
        #[doc = "Request is actively being processed."]
        Running,
        #[doc = "Invalid."]
        StateUnspecified,
    }
    impl GoogleCloudVisionV1P1Beta1OperationMetadataState {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P1Beta1OperationMetadataState::Cancelled => "CANCELLED",
                GoogleCloudVisionV1P1Beta1OperationMetadataState::Created => "CREATED",
                GoogleCloudVisionV1P1Beta1OperationMetadataState::Done => "DONE",
                GoogleCloudVisionV1P1Beta1OperationMetadataState::Running => "RUNNING",
                GoogleCloudVisionV1P1Beta1OperationMetadataState::StateUnspecified => {
                    "STATE_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P1Beta1OperationMetadataState {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P1Beta1OperationMetadataState {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P1Beta1OperationMetadataState, ()> {
            Ok(match s {
                "CANCELLED" => GoogleCloudVisionV1P1Beta1OperationMetadataState::Cancelled,
                "CREATED" => GoogleCloudVisionV1P1Beta1OperationMetadataState::Created,
                "DONE" => GoogleCloudVisionV1P1Beta1OperationMetadataState::Done,
                "RUNNING" => GoogleCloudVisionV1P1Beta1OperationMetadataState::Running,
                "STATE_UNSPECIFIED" => {
                    GoogleCloudVisionV1P1Beta1OperationMetadataState::StateUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P1Beta1OperationMetadataState {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P1Beta1OperationMetadataState {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P1Beta1OperationMetadataState {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CANCELLED" => GoogleCloudVisionV1P1Beta1OperationMetadataState::Cancelled,
                "CREATED" => GoogleCloudVisionV1P1Beta1OperationMetadataState::Created,
                "DONE" => GoogleCloudVisionV1P1Beta1OperationMetadataState::Done,
                "RUNNING" => GoogleCloudVisionV1P1Beta1OperationMetadataState::Running,
                "STATE_UNSPECIFIED" => {
                    GoogleCloudVisionV1P1Beta1OperationMetadataState::StateUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1OperationMetadataState {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1OperationMetadataState {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1OutputConfig {
        #[doc = "The max number of response protos to put into each output JSON file on Google Cloud Storage. The valid range is \\[1, 100\\]. If not specified, the default value is 20. For example, for one pdf file with 100 pages, 100 response protos will be generated. If `batch_size` = 20, then 5 json files each containing 20 response protos will be written under the prefix `gcs_destination`.`uri`. Currently, batch_size only applies to GcsDestination, with potential future support for other output configurations."]
        #[serde(
            rename = "batchSize",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub batch_size: ::std::option::Option<i32>,
        #[doc = "The Google Cloud Storage location to write the output(s) to."]
        #[serde(
            rename = "gcsDestination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub gcs_destination:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1GcsDestination>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1OutputConfig {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1OutputConfig {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1Page {
        #[doc = "List of blocks of text, images etc on this page."]
        #[serde(
            rename = "blocks",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub blocks: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P1Beta1Block>>,
        #[doc = "Confidence of the OCR results on the page. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels."]
        #[serde(
            rename = "height",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub height: ::std::option::Option<i32>,
        #[doc = "Additional information detected on the page."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P1Beta1TextAnnotationTextProperty,
        >,
        #[doc = "Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels."]
        #[serde(
            rename = "width",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub width: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1Page {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1Page {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1Paragraph {
        #[doc = "The bounding box for the paragraph. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the ‘natural’ orientation. For example: * when the text is horizontal it might look like: 0––1 | | 3––2 * when it’s rotated 180 degrees around the top-left corner it becomes: 2––3 | | 1––0 and the vertex order will still be (0, 1, 2, 3)."]
        #[serde(
            rename = "boundingBox",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_box:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1BoundingPoly>,
        #[doc = "Confidence of the OCR results for the paragraph. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Additional information detected for the paragraph."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P1Beta1TextAnnotationTextProperty,
        >,
        #[doc = "List of all words in this paragraph."]
        #[serde(
            rename = "words",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub words: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P1Beta1Word>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1Paragraph {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1Paragraph {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1Position {
        #[doc = "X coordinate."]
        #[serde(
            rename = "x",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub x: ::std::option::Option<f32>,
        #[doc = "Y coordinate."]
        #[serde(
            rename = "y",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub y: ::std::option::Option<f32>,
        #[doc = "Z coordinate (or depth)."]
        #[serde(
            rename = "z",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub z: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1Position {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1Position {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1Product {
        #[doc = "User-provided metadata to be stored with this product. Must be at most 4096 characters long."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Immutable. The category for the product identified by the reference image. This should be one of “homegoods-v2”, “apparel-v2”, “toys-v2”, “packagedgoods-v1” or “general-v1”. The legacy categories “homegoods”, “apparel”, and “toys” are still supported, but these should not be used for new products."]
        #[serde(
            rename = "productCategory",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product_category: ::std::option::Option<String>,
        #[doc = "Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. “1199”. Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet."]
        #[serde(
            rename = "productLabels",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product_labels:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P1Beta1ProductKeyValue>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1Product {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1Product {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1ProductKeyValue {
        #[doc = "The key of the label attached to the product. Cannot be empty and cannot exceed 128 bytes."]
        #[serde(
            rename = "key",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub key: ::std::option::Option<String>,
        #[doc = "The value of the label attached to the product. Cannot be empty and cannot exceed 128 bytes."]
        #[serde(
            rename = "value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub value: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1ProductKeyValue {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1ProductKeyValue {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1ProductSearchParams {
        #[doc = "The bounding polygon around the area of interest in the image. If it is not specified, system discretion will be applied."]
        #[serde(
            rename = "boundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_poly:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1BoundingPoly>,
        #[doc = "The filtering expression. This can be used to restrict search results based on Product labels. We currently support an AND of OR of key-value expressions, where each expression within an OR must have the same key. An ‘=’ should be used to connect the key and value. For example, “(color = red OR color = blue) AND brand = Google” is acceptable, but “(color = red OR brand = Google)” is not acceptable. “color: red” is not acceptable because it uses a ‘:’ instead of an ‘=’."]
        #[serde(
            rename = "filter",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub filter: ::std::option::Option<String>,
        #[doc = "The list of product categories to search in. Currently, we only consider the first category, and either “homegoods-v2”, “apparel-v2”, “toys-v2”, “packagedgoods-v1”, or “general-v1” should be specified. The legacy categories “homegoods”, “apparel”, and “toys” are still supported but will be deprecated. For new products, please use “homegoods-v2”, “apparel-v2”, or “toys-v2” for better product search accuracy. It is recommended to migrate existing products to these categories as well."]
        #[serde(
            rename = "productCategories",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product_categories: ::std::option::Option<Vec<String>>,
        #[doc = "The resource name of a ProductSet to be searched for similar images. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`."]
        #[serde(
            rename = "productSet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product_set: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1ProductSearchParams {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1ProductSearchParams {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1ProductSearchResults {
        #[doc = "Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current results."]
        #[serde(
            rename = "indexTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub index_time: ::std::option::Option<String>,
        #[doc = "List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to that region. There may be duplicate product matches in the union of all the per-product results."]
        #[serde(
            rename = "productGroupedResults",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product_grouped_results: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P1Beta1ProductSearchResultsGroupedResult>,
        >,
        #[doc = "List of results, one for each product match."]
        #[serde(
            rename = "results",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub results: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P1Beta1ProductSearchResultsResult>,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1ProductSearchResults {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1ProductSearchResults {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1ProductSearchResultsGroupedResult {
        #[doc = "The bounding polygon around the product detected in the query image."]
        #[serde(
            rename = "boundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_poly:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1BoundingPoly>,
        #[doc = "List of generic predictions for the object in the bounding box."]
        #[serde(
            rename = "objectAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub object_annotations: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P1Beta1ProductSearchResultsObjectAnnotation>,
        >,
        #[doc = "List of results, one for each product match."]
        #[serde(
            rename = "results",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub results: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P1Beta1ProductSearchResultsResult>,
        >,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1ProductSearchResultsGroupedResult
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P1Beta1ProductSearchResultsGroupedResult
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1ProductSearchResultsObjectAnnotation {
        #[doc = "The BCP-47 language code, such as “en-US” or “sr-Latn”. For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."]
        #[serde(
            rename = "languageCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language_code: ::std::option::Option<String>,
        #[doc = "Object ID that should align with EntityAnnotation mid."]
        #[serde(
            rename = "mid",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mid: ::std::option::Option<String>,
        #[doc = "Object name, expressed in its `language_code` language."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Score of the result. Range \\[0, 1\\]."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1ProductSearchResultsObjectAnnotation
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P1Beta1ProductSearchResultsObjectAnnotation
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1ProductSearchResultsResult {
        #[doc = "The resource name of the image from the product that is the closest match to the query."]
        #[serde(
            rename = "image",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub image: ::std::option::Option<String>,
        #[doc = "The Product."]
        #[serde(
            rename = "product",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product: ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1Product>,
        #[doc = "A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence)."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1ProductSearchResultsResult
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1ProductSearchResultsResult {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1Property {
        #[doc = "Name of the property."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Value of numeric properties."]
        #[serde(
            rename = "uint64Value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub uint_64_value: ::std::option::Option<u64>,
        #[doc = "Value of the property."]
        #[serde(
            rename = "value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub value: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1Property {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1Property {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1SafeSearchAnnotation {
        #[doc = "Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities."]
        #[serde(
            rename = "adult",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub adult: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult,
        >,
        #[doc = "Likelihood that this is a medical image."]
        #[serde(
            rename = "medical",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub medical: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical,
        >,
        #[doc = "Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative poses, or close-ups of sensitive body areas."]
        #[serde(
            rename = "racy",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub racy: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy,
        >,
        #[doc = "Spoof likelihood. The likelihood that an modification was made to the image’s canonical version to make it appear funny or offensive."]
        #[serde(
            rename = "spoof",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub spoof: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof,
        >,
        #[doc = "Likelihood that this image contains violent content."]
        #[serde(
            rename = "violence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub violence: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1SafeSearchAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1SafeSearchAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult::Likely => "LIKELY",
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult::Possible => "POSSIBLE",
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult::VeryLikely => "VERY_LIKELY",
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationAdult {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical::Likely => "LIKELY",
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical::Possible => "POSSIBLE",
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical::VeryLikely => "VERY_LIKELY",
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationMedical
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy::Likely => "LIKELY",
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy::Possible => "POSSIBLE",
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy::VeryLikely => "VERY_LIKELY",
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy::VeryUnlikely => "VERY_UNLIKELY",
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy, ()> {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy::VeryLikely,
                "VERY_UNLIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy::VeryUnlikely,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy::VeryLikely,
                "VERY_UNLIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy::VeryUnlikely,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationRacy {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof::Likely => "LIKELY",
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof::Possible => "POSSIBLE",
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof::VeryLikely => "VERY_LIKELY",
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationSpoof {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence::Likely => "LIKELY",
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence::Possible => "POSSIBLE",
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence::VeryLikely => "VERY_LIKELY",
                GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P1Beta1SafeSearchAnnotationViolence
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1Symbol {
        #[doc = "The bounding box for the symbol. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the ‘natural’ orientation. For example: * when the text is horizontal it might look like: 0––1 | | 3––2 * when it’s rotated 180 degrees around the top-left corner it becomes: 2––3 | | 1––0 and the vertex order will still be (0, 1, 2, 3)."]
        #[serde(
            rename = "boundingBox",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_box:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1BoundingPoly>,
        #[doc = "Confidence of the OCR results for the symbol. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Additional information detected for the symbol."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P1Beta1TextAnnotationTextProperty,
        >,
        #[doc = "The actual UTF-8 representation of the symbol."]
        #[serde(
            rename = "text",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub text: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1Symbol {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1Symbol {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1TextAnnotation {
        #[doc = "List of pages detected by OCR."]
        #[serde(
            rename = "pages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pages: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P1Beta1Page>>,
        #[doc = "UTF-8 text detected on the pages."]
        #[serde(
            rename = "text",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub text: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1TextAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1TextAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreak {
        #[doc = "True if break prepends the element."]
        #[serde(
            rename = "isPrefix",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_prefix: ::std::option::Option<bool>,
        #[doc = "Detected break type."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType,
        >,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreak
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreak
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType {
        #[doc = "Line-wrapping break."]
        EolSureSpace,
        #[doc = "End-line hyphen that is not present in text; does not co-occur with `SPACE`, `LEADER_SPACE`, or `LINE_BREAK`."]
        Hyphen,
        #[doc = "Line break that ends a paragraph."]
        LineBreak,
        #[doc = "Regular space."]
        Space,
        #[doc = "Sure space (very wide)."]
        SureSpace,
        #[doc = "Unknown break label type."]
        Unknown,
    }
    impl GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType::EolSureSpace => {
                    "EOL_SURE_SPACE"
                }
                GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType::Hyphen => "HYPHEN",
                GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType::LineBreak => {
                    "LINE_BREAK"
                }
                GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType::Space => "SPACE",
                GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType::SureSpace => {
                    "SURE_SPACE"
                }
                GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType::Unknown => "UNKNOWN",
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType, ()>
        {
            Ok(match s {
                "EOL_SURE_SPACE" => {
                    GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType::EolSureSpace
                }
                "HYPHEN" => GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType::Hyphen,
                "LINE_BREAK" => {
                    GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType::LineBreak
                }
                "SPACE" => GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType::Space,
                "SURE_SPACE" => {
                    GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType::SureSpace
                }
                "UNKNOWN" => GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType::Unknown,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "EOL_SURE_SPACE" => {
                    GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType::EolSureSpace
                }
                "HYPHEN" => GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType::Hyphen,
                "LINE_BREAK" => {
                    GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType::LineBreak
                }
                "SPACE" => GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType::Space,
                "SURE_SPACE" => {
                    GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType::SureSpace
                }
                "UNKNOWN" => GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType::Unknown,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreakType
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1TextAnnotationDetectedLanguage {
        #[doc = "Confidence of detected language. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "The BCP-47 language code, such as “en-US” or “sr-Latn”. For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."]
        #[serde(
            rename = "languageCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language_code: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1TextAnnotationDetectedLanguage
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P1Beta1TextAnnotationDetectedLanguage
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1TextAnnotationTextProperty {
        #[doc = "Detected start or end of a text segment."]
        #[serde(
            rename = "detectedBreak",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub detected_break: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P1Beta1TextAnnotationDetectedBreak,
        >,
        #[doc = "A list of detected languages together with confidence."]
        #[serde(
            rename = "detectedLanguages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub detected_languages: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P1Beta1TextAnnotationDetectedLanguage>,
        >,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P1Beta1TextAnnotationTextProperty
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1TextAnnotationTextProperty {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1TextDetectionParams {
        #[doc = "A list of advanced OCR options to fine-tune OCR behavior."]
        #[serde(
            rename = "advancedOcrOptions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub advanced_ocr_options: ::std::option::Option<Vec<String>>,
        #[doc = "By default, Cloud Vision API only includes confidence score for DOCUMENT_TEXT_DETECTION result. Set the flag to true to include confidence score for TEXT_DETECTION as well."]
        #[serde(
            rename = "enableTextDetectionConfidenceScore",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub enable_text_detection_confidence_score: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1TextDetectionParams {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1TextDetectionParams {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1Vertex {
        #[doc = "X coordinate."]
        #[serde(
            rename = "x",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub x: ::std::option::Option<i32>,
        #[doc = "Y coordinate."]
        #[serde(
            rename = "y",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub y: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1Vertex {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1Vertex {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1WebDetection {
        #[doc = "The service’s best guess as to the topic of the request image. Inferred from similar images on the open web."]
        #[serde(
            rename = "bestGuessLabels",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub best_guess_labels: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P1Beta1WebDetectionWebLabel>,
        >,
        #[doc = "Fully matching images from the Internet. Can include resized copies of the query image."]
        #[serde(
            rename = "fullMatchingImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub full_matching_images: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P1Beta1WebDetectionWebImage>,
        >,
        #[doc = "Web pages containing the matching images from the Internet."]
        #[serde(
            rename = "pagesWithMatchingImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pages_with_matching_images: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P1Beta1WebDetectionWebPage>,
        >,
        #[doc = "Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops."]
        #[serde(
            rename = "partialMatchingImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub partial_matching_images: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P1Beta1WebDetectionWebImage>,
        >,
        #[doc = "The visually similar image results."]
        #[serde(
            rename = "visuallySimilarImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visually_similar_images: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P1Beta1WebDetectionWebImage>,
        >,
        #[doc = "Deduced entities from similar images on the Internet."]
        #[serde(
            rename = "webEntities",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub web_entities: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P1Beta1WebDetectionWebEntity>,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1WebDetection {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1WebDetection {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1WebDetectionParams {
        #[doc = "Whether to include results derived from the geo information in the image."]
        #[serde(
            rename = "includeGeoResults",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub include_geo_results: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1WebDetectionParams {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1WebDetectionParams {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1WebDetectionWebEntity {
        #[doc = "Canonical description of the entity, in English."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "Opaque entity ID."]
        #[serde(
            rename = "entityId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub entity_id: ::std::option::Option<String>,
        #[doc = "Overall relevancy score for the entity. Not normalized and not comparable across different image queries."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1WebDetectionWebEntity {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1WebDetectionWebEntity {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1WebDetectionWebImage {
        #[doc = "(Deprecated) Overall relevancy score for the image."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
        #[doc = "The result image URL."]
        #[serde(
            rename = "url",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1WebDetectionWebImage {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1WebDetectionWebImage {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1WebDetectionWebLabel {
        #[doc = "Label for extra metadata."]
        #[serde(
            rename = "label",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub label: ::std::option::Option<String>,
        #[doc = "The BCP-47 language code for `label`, such as “en-US” or “sr-Latn”. For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."]
        #[serde(
            rename = "languageCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language_code: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1WebDetectionWebLabel {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1WebDetectionWebLabel {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1WebDetectionWebPage {
        #[doc = "Fully matching images on the page. Can include resized copies of the query image."]
        #[serde(
            rename = "fullMatchingImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub full_matching_images: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P1Beta1WebDetectionWebImage>,
        >,
        #[doc = "Title for the web page, may contain HTML markups."]
        #[serde(
            rename = "pageTitle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_title: ::std::option::Option<String>,
        #[doc = "Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops."]
        #[serde(
            rename = "partialMatchingImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub partial_matching_images: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P1Beta1WebDetectionWebImage>,
        >,
        #[doc = "(Deprecated) Overall relevancy score for the web page."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
        #[doc = "The result web page URL."]
        #[serde(
            rename = "url",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1WebDetectionWebPage {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1WebDetectionWebPage {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P1Beta1Word {
        #[doc = "The bounding box for the word. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the ‘natural’ orientation. For example: * when the text is horizontal it might look like: 0––1 | | 3––2 * when it’s rotated 180 degrees around the top-left corner it becomes: 2––3 | | 1––0 and the vertex order will still be (0, 1, 2, 3)."]
        #[serde(
            rename = "boundingBox",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_box:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P1Beta1BoundingPoly>,
        #[doc = "Confidence of the OCR results for the word. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Additional information detected for the word."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P1Beta1TextAnnotationTextProperty,
        >,
        #[doc = "List of symbols in the word. The order of the symbols follows the natural reading order."]
        #[serde(
            rename = "symbols",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub symbols: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P1Beta1Symbol>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P1Beta1Word {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P1Beta1Word {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct GoogleCloudVisionV1P2Beta1AnnotateFileResponse {
        #[doc = "If set, represents the error message for the failed request. The `responses` field will not be set in this case."]
        #[serde(
            rename = "error",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub error: ::std::option::Option<crate::schemas::Status>,
        #[doc = "Information about the file for which this response is generated."]
        #[serde(
            rename = "inputConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub input_config:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P2Beta1InputConfig>,
        #[doc = "Individual responses to images found within the file. This field will be empty if the `error` field is set."]
        #[serde(
            rename = "responses",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub responses: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P2Beta1AnnotateImageResponse>,
        >,
        #[doc = "This field gives the total number of pages in the file."]
        #[serde(
            rename = "totalPages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub total_pages: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1AnnotateFileResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1AnnotateFileResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct GoogleCloudVisionV1P2Beta1AnnotateImageResponse {
        #[doc = "If present, contextual information is needed to understand where this image comes from."]
        #[serde(
            rename = "context",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub context:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P2Beta1ImageAnnotationContext>,
        #[doc = "If present, crop hints have completed successfully."]
        #[serde(
            rename = "cropHintsAnnotation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub crop_hints_annotation:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P2Beta1CropHintsAnnotation>,
        #[doc = "If set, represents the error message for the operation. Note that filled-in image annotations are guaranteed to be correct, even when `error` is set."]
        #[serde(
            rename = "error",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub error: ::std::option::Option<crate::schemas::Status>,
        #[doc = "If present, face detection has completed successfully."]
        #[serde(
            rename = "faceAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub face_annotations:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P2Beta1FaceAnnotation>>,
        #[doc = "If present, text (OCR) detection or document (OCR) text detection has completed successfully. This annotation provides the structural hierarchy for the OCR detected text."]
        #[serde(
            rename = "fullTextAnnotation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub full_text_annotation:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P2Beta1TextAnnotation>,
        #[doc = "If present, image properties were extracted successfully."]
        #[serde(
            rename = "imagePropertiesAnnotation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub image_properties_annotation:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P2Beta1ImageProperties>,
        #[doc = "If present, label detection has completed successfully."]
        #[serde(
            rename = "labelAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub label_annotations:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P2Beta1EntityAnnotation>>,
        #[doc = "If present, landmark detection has completed successfully."]
        #[serde(
            rename = "landmarkAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub landmark_annotations:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P2Beta1EntityAnnotation>>,
        #[doc = "If present, localized object detection has completed successfully. This will be sorted descending by confidence score."]
        #[serde(
            rename = "localizedObjectAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub localized_object_annotations: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P2Beta1LocalizedObjectAnnotation>,
        >,
        #[doc = "If present, logo detection has completed successfully."]
        #[serde(
            rename = "logoAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub logo_annotations:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P2Beta1EntityAnnotation>>,
        #[doc = "If present, product search has completed successfully."]
        #[serde(
            rename = "productSearchResults",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product_search_results:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P2Beta1ProductSearchResults>,
        #[doc = "If present, safe-search annotation has completed successfully."]
        #[serde(
            rename = "safeSearchAnnotation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub safe_search_annotation:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P2Beta1SafeSearchAnnotation>,
        #[doc = "If present, text (OCR) detection has completed successfully."]
        #[serde(
            rename = "textAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub text_annotations:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P2Beta1EntityAnnotation>>,
        #[doc = "If present, web detection has completed successfully."]
        #[serde(
            rename = "webDetection",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub web_detection:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P2Beta1WebDetection>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1AnnotateImageResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1AnnotateImageResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1AsyncAnnotateFileResponse {
        #[doc = "The output location and metadata from AsyncAnnotateFileRequest."]
        #[serde(
            rename = "outputConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub output_config:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P2Beta1OutputConfig>,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P2Beta1AsyncAnnotateFileResponse
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1AsyncAnnotateFileResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1AsyncBatchAnnotateFilesResponse {
        #[doc = "The list of file annotation responses, one for each request in AsyncBatchAnnotateFilesRequest."]
        #[serde(
            rename = "responses",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub responses: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P2Beta1AsyncAnnotateFileResponse>,
        >,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P2Beta1AsyncBatchAnnotateFilesResponse
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P2Beta1AsyncBatchAnnotateFilesResponse
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1Block {
        #[doc = "Detected block type (text, image etc) for this block."]
        #[serde(
            rename = "blockType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub block_type:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P2Beta1BlockBlockType>,
        #[doc = "The bounding box for the block. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the ‘natural’ orientation. For example: * when the text is horizontal it might look like: 0––1 | | 3––2 * when it’s rotated 180 degrees around the top-left corner it becomes: 2––3 | | 1––0 and the vertex order will still be (0, 1, 2, 3)."]
        #[serde(
            rename = "boundingBox",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_box:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P2Beta1BoundingPoly>,
        #[doc = "Confidence of the OCR results on the block. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "List of paragraphs in this block (if this blocks is of type text)."]
        #[serde(
            rename = "paragraphs",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub paragraphs:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P2Beta1Paragraph>>,
        #[doc = "Additional information detected for the block."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P2Beta1TextAnnotationTextProperty,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1Block {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1Block {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P2Beta1BlockBlockType {
        #[doc = "Barcode block."]
        Barcode,
        #[doc = "Image block."]
        Picture,
        #[doc = "Horizontal/vertical line box."]
        Ruler,
        #[doc = "Table block."]
        Table,
        #[doc = "Regular text block."]
        Text,
        #[doc = "Unknown block type."]
        Unknown,
    }
    impl GoogleCloudVisionV1P2Beta1BlockBlockType {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P2Beta1BlockBlockType::Barcode => "BARCODE",
                GoogleCloudVisionV1P2Beta1BlockBlockType::Picture => "PICTURE",
                GoogleCloudVisionV1P2Beta1BlockBlockType::Ruler => "RULER",
                GoogleCloudVisionV1P2Beta1BlockBlockType::Table => "TABLE",
                GoogleCloudVisionV1P2Beta1BlockBlockType::Text => "TEXT",
                GoogleCloudVisionV1P2Beta1BlockBlockType::Unknown => "UNKNOWN",
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P2Beta1BlockBlockType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P2Beta1BlockBlockType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P2Beta1BlockBlockType, ()> {
            Ok(match s {
                "BARCODE" => GoogleCloudVisionV1P2Beta1BlockBlockType::Barcode,
                "PICTURE" => GoogleCloudVisionV1P2Beta1BlockBlockType::Picture,
                "RULER" => GoogleCloudVisionV1P2Beta1BlockBlockType::Ruler,
                "TABLE" => GoogleCloudVisionV1P2Beta1BlockBlockType::Table,
                "TEXT" => GoogleCloudVisionV1P2Beta1BlockBlockType::Text,
                "UNKNOWN" => GoogleCloudVisionV1P2Beta1BlockBlockType::Unknown,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P2Beta1BlockBlockType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P2Beta1BlockBlockType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P2Beta1BlockBlockType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "BARCODE" => GoogleCloudVisionV1P2Beta1BlockBlockType::Barcode,
                "PICTURE" => GoogleCloudVisionV1P2Beta1BlockBlockType::Picture,
                "RULER" => GoogleCloudVisionV1P2Beta1BlockBlockType::Ruler,
                "TABLE" => GoogleCloudVisionV1P2Beta1BlockBlockType::Table,
                "TEXT" => GoogleCloudVisionV1P2Beta1BlockBlockType::Text,
                "UNKNOWN" => GoogleCloudVisionV1P2Beta1BlockBlockType::Unknown,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1BlockBlockType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1BlockBlockType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1BoundingPoly {
        #[doc = "The bounding polygon normalized vertices."]
        #[serde(
            rename = "normalizedVertices",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub normalized_vertices:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P2Beta1NormalizedVertex>>,
        #[doc = "The bounding polygon vertices."]
        #[serde(
            rename = "vertices",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub vertices: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P2Beta1Vertex>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1BoundingPoly {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1BoundingPoly {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1ColorInfo {
        #[doc = "RGB components of the color."]
        #[serde(
            rename = "color",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub color: ::std::option::Option<crate::schemas::Color>,
        #[doc = "The fraction of pixels the color occupies in the image. Value in range \\[0, 1\\]."]
        #[serde(
            rename = "pixelFraction",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pixel_fraction: ::std::option::Option<f32>,
        #[doc = "Image-specific score for this color. Value in range \\[0, 1\\]."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1ColorInfo {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1ColorInfo {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1CropHint {
        #[doc = "The bounding polygon for the crop region. The coordinates of the bounding box are in the original image’s scale."]
        #[serde(
            rename = "boundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_poly:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P2Beta1BoundingPoly>,
        #[doc = "Confidence of this being a salient region. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Fraction of importance of this salient region with respect to the original image."]
        #[serde(
            rename = "importanceFraction",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub importance_fraction: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1CropHint {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1CropHint {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1CropHintsAnnotation {
        #[doc = "Crop hint results."]
        #[serde(
            rename = "cropHints",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub crop_hints:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P2Beta1CropHint>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1CropHintsAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1CropHintsAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1DominantColorsAnnotation {
        #[doc = "RGB color values with their score and pixel fraction."]
        #[serde(
            rename = "colors",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub colors: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P2Beta1ColorInfo>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1DominantColorsAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1DominantColorsAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1EntityAnnotation {
        #[doc = "Image region to which this entity belongs. Not produced for `LABEL_DETECTION` features."]
        #[serde(
            rename = "boundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_poly:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P2Beta1BoundingPoly>,
        #[doc = "**Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the “Eiffel Tower” entity is detected, this field represents the confidence that there is a tower in the query image. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Entity textual description, expressed in its `locale` language."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "The language code for the locale in which the entity textual `description` is expressed."]
        #[serde(
            rename = "locale",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub locale: ::std::option::Option<String>,
        #[doc = "The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks."]
        #[serde(
            rename = "locations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub locations:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P2Beta1LocationInfo>>,
        #[doc = "Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/)."]
        #[serde(
            rename = "mid",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mid: ::std::option::Option<String>,
        #[doc = "Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity."]
        #[serde(
            rename = "properties",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub properties:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P2Beta1Property>>,
        #[doc = "Overall score of the result. Range \\[0, 1\\]."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
        #[doc = "The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of “tower” is likely higher to an image containing the detected “Eiffel Tower” than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range \\[0, 1\\]."]
        #[serde(
            rename = "topicality",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub topicality: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1EntityAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1EntityAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1FaceAnnotation {
        #[doc = "Anger likelihood."]
        #[serde(
            rename = "angerLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub anger_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood,
        >,
        #[doc = "Blurred likelihood."]
        #[serde(
            rename = "blurredLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub blurred_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood,
        >,
        #[doc = "The bounding polygon around the face. The coordinates of the bounding box are in the original image’s scale. The bounding box is computed to “frame” the face in accordance with human expectations. It is based on the landmarker results. Note that one or more x and/or y coordinates may not be generated in the `BoundingPoly` (the polygon will be unbounded) if only a partial face appears in the image to be annotated."]
        #[serde(
            rename = "boundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_poly:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P2Beta1BoundingPoly>,
        #[doc = "Detection confidence. Range \\[0, 1\\]."]
        #[serde(
            rename = "detectionConfidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub detection_confidence: ::std::option::Option<f32>,
        #[doc = "The `fd_bounding_poly` bounding polygon is tighter than the `boundingPoly`, and encloses only the skin part of the face. Typically, it is used to eliminate the face from any image analysis that detects the “amount of skin” visible in an image. It is not based on the landmarker results, only on the initial face detection, hence the fd (face detection) prefix."]
        #[serde(
            rename = "fdBoundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub fd_bounding_poly:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P2Beta1BoundingPoly>,
        #[doc = "Headwear likelihood."]
        #[serde(
            rename = "headwearLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub headwear_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood,
        >,
        #[doc = "Joy likelihood."]
        #[serde(
            rename = "joyLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub joy_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood,
        >,
        #[doc = "Face landmarking confidence. Range \\[0, 1\\]."]
        #[serde(
            rename = "landmarkingConfidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub landmarking_confidence: ::std::option::Option<f32>,
        #[doc = "Detected face landmarks."]
        #[serde(
            rename = "landmarks",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub landmarks: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P2Beta1FaceAnnotationLandmark>,
        >,
        #[doc = "Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range \\[-180,180\\]."]
        #[serde(
            rename = "panAngle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pan_angle: ::std::option::Option<f32>,
        #[doc = "Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range \\[-180,180\\]."]
        #[serde(
            rename = "rollAngle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub roll_angle: ::std::option::Option<f32>,
        #[doc = "Sorrow likelihood."]
        #[serde(
            rename = "sorrowLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub sorrow_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood,
        >,
        #[doc = "Surprise likelihood."]
        #[serde(
            rename = "surpriseLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub surprise_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood,
        >,
        #[doc = "Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image’s horizontal plane. Range \\[-180,180\\]."]
        #[serde(
            rename = "tiltAngle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tilt_angle: ::std::option::Option<f32>,
        #[doc = "Under-exposed likelihood."]
        #[serde(
            rename = "underExposedLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub under_exposed_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1FaceAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1FaceAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood::Possible => "POSSIBLE",
                GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood::VeryLikely => {
                    "VERY_LIKELY"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P2Beta1FaceAnnotationAngerLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood::Possible => "POSSIBLE",
                GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood::VeryLikely => {
                    "VERY_LIKELY"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P2Beta1FaceAnnotationBlurredLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood::Possible => "POSSIBLE",
                GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood::VeryLikely => {
                    "VERY_LIKELY"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P2Beta1FaceAnnotationHeadwearLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood::Possible => "POSSIBLE",
                GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood::VeryLikely => "VERY_LIKELY",
                GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P2Beta1FaceAnnotationJoyLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood::Possible => "POSSIBLE",
                GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood::VeryLikely => {
                    "VERY_LIKELY"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P2Beta1FaceAnnotationSorrowLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood::Possible => "POSSIBLE",
                GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood::VeryLikely => {
                    "VERY_LIKELY"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P2Beta1FaceAnnotationSurpriseLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood::Possible => {
                    "POSSIBLE"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood::Unknown => {
                    "UNKNOWN"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood::Unlikely => {
                    "UNLIKELY"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood::VeryLikely => {
                    "VERY_LIKELY"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood::Likely,
                "POSSIBLE" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood::Possible
                }
                "UNKNOWN" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood::Unknown
                }
                "UNLIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood::Unlikely
                }
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de>
        for GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood
    {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood::Likely,
                "POSSIBLE" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood::Possible
                }
                "UNKNOWN" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood::Unknown
                }
                "UNLIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood::Unlikely
                }
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P2Beta1FaceAnnotationUnderExposedLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1FaceAnnotationLandmark {
        #[doc = "Face landmark position."]
        #[serde(
            rename = "position",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub position: ::std::option::Option<crate::schemas::GoogleCloudVisionV1P2Beta1Position>,
        #[doc = "Face landmark type."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1FaceAnnotationLandmark {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1FaceAnnotationLandmark {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType {
        #[doc = "Chin gnathion."]
        ChinGnathion,
        #[doc = "Chin left gonion."]
        ChinLeftGonion,
        #[doc = "Chin right gonion."]
        ChinRightGonion,
        #[doc = "Forehead glabella."]
        ForeheadGlabella,
        #[doc = "Left cheek center."]
        LeftCheekCenter,
        #[doc = "Left ear tragion."]
        LeftEarTragion,
        #[doc = "Left eye."]
        LeftEye,
        #[doc = "Left eye, bottom boundary."]
        LeftEyeBottomBoundary,
        #[doc = "Left eye, left corner."]
        LeftEyeLeftCorner,
        #[doc = "Left eye pupil."]
        LeftEyePupil,
        #[doc = "Left eye, right corner."]
        LeftEyeRightCorner,
        #[doc = "Left eye, top boundary."]
        LeftEyeTopBoundary,
        #[doc = "Left eyebrow, upper midpoint."]
        LeftEyebrowUpperMidpoint,
        #[doc = "Left of left eyebrow."]
        LeftOfLeftEyebrow,
        #[doc = "Left of right eyebrow."]
        LeftOfRightEyebrow,
        #[doc = "Lower lip."]
        LowerLip,
        #[doc = "Midpoint between eyes."]
        MidpointBetweenEyes,
        #[doc = "Mouth center."]
        MouthCenter,
        #[doc = "Mouth left."]
        MouthLeft,
        #[doc = "Mouth right."]
        MouthRight,
        #[doc = "Nose, bottom center."]
        NoseBottomCenter,
        #[doc = "Nose, bottom left."]
        NoseBottomLeft,
        #[doc = "Nose, bottom right."]
        NoseBottomRight,
        #[doc = "Nose tip."]
        NoseTip,
        #[doc = "Right cheek center."]
        RightCheekCenter,
        #[doc = "Right ear tragion."]
        RightEarTragion,
        #[doc = "Right eye."]
        RightEye,
        #[doc = "Right eye, bottom boundary."]
        RightEyeBottomBoundary,
        #[doc = "Right eye, left corner."]
        RightEyeLeftCorner,
        #[doc = "Right eye pupil."]
        RightEyePupil,
        #[doc = "Right eye, right corner."]
        RightEyeRightCorner,
        #[doc = "Right eye, top boundary."]
        RightEyeTopBoundary,
        #[doc = "Right eyebrow, upper midpoint."]
        RightEyebrowUpperMidpoint,
        #[doc = "Right of left eyebrow."]
        RightOfLeftEyebrow,
        #[doc = "Right of right eyebrow."]
        RightOfRightEyebrow,
        #[doc = "Unknown face landmark detected. Should not be filled."]
        UnknownLandmark,
        #[doc = "Upper lip."]
        UpperLip,
    }
    impl GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::ChinGnathion => {
                    "CHIN_GNATHION"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::ChinLeftGonion => {
                    "CHIN_LEFT_GONION"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::ChinRightGonion => {
                    "CHIN_RIGHT_GONION"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::ForeheadGlabella => {
                    "FOREHEAD_GLABELLA"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftCheekCenter => {
                    "LEFT_CHEEK_CENTER"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftEarTragion => {
                    "LEFT_EAR_TRAGION"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftEye => "LEFT_EYE",
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftEyeBottomBoundary => {
                    "LEFT_EYE_BOTTOM_BOUNDARY"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftEyeLeftCorner => {
                    "LEFT_EYE_LEFT_CORNER"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftEyePupil => {
                    "LEFT_EYE_PUPIL"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftEyeRightCorner => {
                    "LEFT_EYE_RIGHT_CORNER"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftEyeTopBoundary => {
                    "LEFT_EYE_TOP_BOUNDARY"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftEyebrowUpperMidpoint => {
                    "LEFT_EYEBROW_UPPER_MIDPOINT"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftOfLeftEyebrow => {
                    "LEFT_OF_LEFT_EYEBROW"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftOfRightEyebrow => {
                    "LEFT_OF_RIGHT_EYEBROW"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LowerLip => "LOWER_LIP",
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::MidpointBetweenEyes => {
                    "MIDPOINT_BETWEEN_EYES"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::MouthCenter => "MOUTH_CENTER",
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::MouthLeft => "MOUTH_LEFT",
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::MouthRight => "MOUTH_RIGHT",
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::NoseBottomCenter => {
                    "NOSE_BOTTOM_CENTER"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::NoseBottomLeft => {
                    "NOSE_BOTTOM_LEFT"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::NoseBottomRight => {
                    "NOSE_BOTTOM_RIGHT"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::NoseTip => "NOSE_TIP",
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightCheekCenter => {
                    "RIGHT_CHEEK_CENTER"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightEarTragion => {
                    "RIGHT_EAR_TRAGION"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightEye => "RIGHT_EYE",
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightEyeBottomBoundary => {
                    "RIGHT_EYE_BOTTOM_BOUNDARY"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightEyeLeftCorner => {
                    "RIGHT_EYE_LEFT_CORNER"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightEyePupil => {
                    "RIGHT_EYE_PUPIL"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightEyeRightCorner => {
                    "RIGHT_EYE_RIGHT_CORNER"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightEyeTopBoundary => {
                    "RIGHT_EYE_TOP_BOUNDARY"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightEyebrowUpperMidpoint => {
                    "RIGHT_EYEBROW_UPPER_MIDPOINT"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightOfLeftEyebrow => {
                    "RIGHT_OF_LEFT_EYEBROW"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightOfRightEyebrow => {
                    "RIGHT_OF_RIGHT_EYEBROW"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::UnknownLandmark => {
                    "UNKNOWN_LANDMARK"
                }
                GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::UpperLip => "UPPER_LIP",
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType, ()>
        {
            Ok(match s {
                "CHIN_GNATHION" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::ChinGnathion
                }
                "CHIN_LEFT_GONION" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::ChinLeftGonion
                }
                "CHIN_RIGHT_GONION" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::ChinRightGonion
                }
                "FOREHEAD_GLABELLA" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::ForeheadGlabella
                }
                "LEFT_CHEEK_CENTER" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftCheekCenter
                }
                "LEFT_EAR_TRAGION" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftEarTragion
                }
                "LEFT_EYE" => GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftEye,
                "LEFT_EYE_BOTTOM_BOUNDARY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftEyeBottomBoundary
                }
                "LEFT_EYE_LEFT_CORNER" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftEyeLeftCorner
                }
                "LEFT_EYE_PUPIL" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftEyePupil
                }
                "LEFT_EYE_RIGHT_CORNER" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftEyeRightCorner
                }
                "LEFT_EYE_TOP_BOUNDARY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftEyeTopBoundary
                }
                "LEFT_EYEBROW_UPPER_MIDPOINT" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftEyebrowUpperMidpoint
                }
                "LEFT_OF_LEFT_EYEBROW" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftOfLeftEyebrow
                }
                "LEFT_OF_RIGHT_EYEBROW" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftOfRightEyebrow
                }
                "LOWER_LIP" => GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LowerLip,
                "MIDPOINT_BETWEEN_EYES" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::MidpointBetweenEyes
                }
                "MOUTH_CENTER" => GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::MouthCenter,
                "MOUTH_LEFT" => GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::MouthLeft,
                "MOUTH_RIGHT" => GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::MouthRight,
                "NOSE_BOTTOM_CENTER" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::NoseBottomCenter
                }
                "NOSE_BOTTOM_LEFT" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::NoseBottomLeft
                }
                "NOSE_BOTTOM_RIGHT" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::NoseBottomRight
                }
                "NOSE_TIP" => GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::NoseTip,
                "RIGHT_CHEEK_CENTER" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightCheekCenter
                }
                "RIGHT_EAR_TRAGION" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightEarTragion
                }
                "RIGHT_EYE" => GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightEye,
                "RIGHT_EYE_BOTTOM_BOUNDARY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightEyeBottomBoundary
                }
                "RIGHT_EYE_LEFT_CORNER" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightEyeLeftCorner
                }
                "RIGHT_EYE_PUPIL" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightEyePupil
                }
                "RIGHT_EYE_RIGHT_CORNER" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightEyeRightCorner
                }
                "RIGHT_EYE_TOP_BOUNDARY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightEyeTopBoundary
                }
                "RIGHT_EYEBROW_UPPER_MIDPOINT" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightEyebrowUpperMidpoint
                }
                "RIGHT_OF_LEFT_EYEBROW" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightOfLeftEyebrow
                }
                "RIGHT_OF_RIGHT_EYEBROW" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightOfRightEyebrow
                }
                "UNKNOWN_LANDMARK" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::UnknownLandmark
                }
                "UPPER_LIP" => GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::UpperLip,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CHIN_GNATHION" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::ChinGnathion
                }
                "CHIN_LEFT_GONION" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::ChinLeftGonion
                }
                "CHIN_RIGHT_GONION" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::ChinRightGonion
                }
                "FOREHEAD_GLABELLA" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::ForeheadGlabella
                }
                "LEFT_CHEEK_CENTER" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftCheekCenter
                }
                "LEFT_EAR_TRAGION" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftEarTragion
                }
                "LEFT_EYE" => GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftEye,
                "LEFT_EYE_BOTTOM_BOUNDARY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftEyeBottomBoundary
                }
                "LEFT_EYE_LEFT_CORNER" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftEyeLeftCorner
                }
                "LEFT_EYE_PUPIL" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftEyePupil
                }
                "LEFT_EYE_RIGHT_CORNER" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftEyeRightCorner
                }
                "LEFT_EYE_TOP_BOUNDARY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftEyeTopBoundary
                }
                "LEFT_EYEBROW_UPPER_MIDPOINT" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftEyebrowUpperMidpoint
                }
                "LEFT_OF_LEFT_EYEBROW" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftOfLeftEyebrow
                }
                "LEFT_OF_RIGHT_EYEBROW" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LeftOfRightEyebrow
                }
                "LOWER_LIP" => GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::LowerLip,
                "MIDPOINT_BETWEEN_EYES" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::MidpointBetweenEyes
                }
                "MOUTH_CENTER" => GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::MouthCenter,
                "MOUTH_LEFT" => GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::MouthLeft,
                "MOUTH_RIGHT" => GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::MouthRight,
                "NOSE_BOTTOM_CENTER" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::NoseBottomCenter
                }
                "NOSE_BOTTOM_LEFT" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::NoseBottomLeft
                }
                "NOSE_BOTTOM_RIGHT" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::NoseBottomRight
                }
                "NOSE_TIP" => GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::NoseTip,
                "RIGHT_CHEEK_CENTER" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightCheekCenter
                }
                "RIGHT_EAR_TRAGION" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightEarTragion
                }
                "RIGHT_EYE" => GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightEye,
                "RIGHT_EYE_BOTTOM_BOUNDARY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightEyeBottomBoundary
                }
                "RIGHT_EYE_LEFT_CORNER" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightEyeLeftCorner
                }
                "RIGHT_EYE_PUPIL" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightEyePupil
                }
                "RIGHT_EYE_RIGHT_CORNER" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightEyeRightCorner
                }
                "RIGHT_EYE_TOP_BOUNDARY" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightEyeTopBoundary
                }
                "RIGHT_EYEBROW_UPPER_MIDPOINT" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightEyebrowUpperMidpoint
                }
                "RIGHT_OF_LEFT_EYEBROW" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightOfLeftEyebrow
                }
                "RIGHT_OF_RIGHT_EYEBROW" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::RightOfRightEyebrow
                }
                "UNKNOWN_LANDMARK" => {
                    GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::UnknownLandmark
                }
                "UPPER_LIP" => GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType::UpperLip,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1FaceAnnotationLandmarkType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1GcsDestination {
        #[doc = "Google Cloud Storage URI prefix where the results will be stored. Results will be in JSON format and preceded by its corresponding input URI prefix. This field can either represent a gcs file prefix or gcs directory. In either case, the uri should be unique because in order to get all of the output files, you will need to do a wildcard gcs search on the uri prefix you provide. Examples: * File Prefix: gs://bucket-name/here/filenameprefix The output files will be created in gs://bucket-name/here/ and the names of the output files will begin with “filenameprefix”. * Directory Prefix: gs://bucket-name/some/location/ The output files will be created in gs://bucket-name/some/location/ and the names of the output files could be anything because there was no filename prefix specified. If multiple outputs, each response is still AnnotateFileResponse, each of which contains some subset of the full list of AnnotateImageResponse. Multiple outputs can happen if, for example, the output JSON is too large and overflows into multiple sharded files."]
        #[serde(
            rename = "uri",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub uri: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1GcsDestination {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1GcsDestination {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1GcsSource {
        #[doc = "Google Cloud Storage URI for the input file. This must only be a Google Cloud Storage object. Wildcards are not currently supported."]
        #[serde(
            rename = "uri",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub uri: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1GcsSource {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1GcsSource {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1ImageAnnotationContext {
        #[doc = "If the file was a PDF or TIFF, this field gives the page number within the file used to produce the image."]
        #[serde(
            rename = "pageNumber",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_number: ::std::option::Option<i32>,
        #[doc = "The URI of the file used to produce the image."]
        #[serde(
            rename = "uri",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub uri: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1ImageAnnotationContext {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1ImageAnnotationContext {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1ImageProperties {
        #[doc = "If present, dominant colors completed successfully."]
        #[serde(
            rename = "dominantColors",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dominant_colors: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P2Beta1DominantColorsAnnotation,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1ImageProperties {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1ImageProperties {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1InputConfig {
        #[doc = "File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently, this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests."]
        #[serde(
            rename = "content",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content: ::std::option::Option<::google_api_bytes::Bytes>,
        #[doc = "The Google Cloud Storage location to read the input from."]
        #[serde(
            rename = "gcsSource",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub gcs_source: ::std::option::Option<crate::schemas::GoogleCloudVisionV1P2Beta1GcsSource>,
        #[doc = "The type of the file. Currently only “application/pdf”, “image/tiff” and “image/gif” are supported. Wildcards are not supported."]
        #[serde(
            rename = "mimeType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mime_type: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1InputConfig {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1InputConfig {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1LocalizedObjectAnnotation {
        #[doc = "Image region to which this object belongs. This must be populated."]
        #[serde(
            rename = "boundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_poly:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P2Beta1BoundingPoly>,
        #[doc = "The BCP-47 language code, such as “en-US” or “sr-Latn”. For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."]
        #[serde(
            rename = "languageCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language_code: ::std::option::Option<String>,
        #[doc = "Object ID that should align with EntityAnnotation mid."]
        #[serde(
            rename = "mid",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mid: ::std::option::Option<String>,
        #[doc = "Object name, expressed in its `language_code` language."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Score of the result. Range \\[0, 1\\]."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P2Beta1LocalizedObjectAnnotation
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1LocalizedObjectAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1LocationInfo {
        #[doc = "lat/long location coordinates."]
        #[serde(
            rename = "latLng",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub lat_lng: ::std::option::Option<crate::schemas::LatLng>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1LocationInfo {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1LocationInfo {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1NormalizedVertex {
        #[doc = "X coordinate."]
        #[serde(
            rename = "x",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub x: ::std::option::Option<f32>,
        #[doc = "Y coordinate."]
        #[serde(
            rename = "y",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub y: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1NormalizedVertex {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1NormalizedVertex {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1OperationMetadata {
        #[doc = "The time when the batch request was received."]
        #[serde(
            rename = "createTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub create_time: ::std::option::Option<String>,
        #[doc = "Current state of the batch operation."]
        #[serde(
            rename = "state",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub state:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P2Beta1OperationMetadataState>,
        #[doc = "The time when the operation result was last updated."]
        #[serde(
            rename = "updateTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub update_time: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1OperationMetadata {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1OperationMetadata {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P2Beta1OperationMetadataState {
        #[doc = "The batch processing was cancelled."]
        Cancelled,
        #[doc = "Request is received."]
        Created,
        #[doc = "The batch processing is done."]
        Done,
        #[doc = "Request is actively being processed."]
        Running,
        #[doc = "Invalid."]
        StateUnspecified,
    }
    impl GoogleCloudVisionV1P2Beta1OperationMetadataState {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P2Beta1OperationMetadataState::Cancelled => "CANCELLED",
                GoogleCloudVisionV1P2Beta1OperationMetadataState::Created => "CREATED",
                GoogleCloudVisionV1P2Beta1OperationMetadataState::Done => "DONE",
                GoogleCloudVisionV1P2Beta1OperationMetadataState::Running => "RUNNING",
                GoogleCloudVisionV1P2Beta1OperationMetadataState::StateUnspecified => {
                    "STATE_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P2Beta1OperationMetadataState {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P2Beta1OperationMetadataState {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P2Beta1OperationMetadataState, ()> {
            Ok(match s {
                "CANCELLED" => GoogleCloudVisionV1P2Beta1OperationMetadataState::Cancelled,
                "CREATED" => GoogleCloudVisionV1P2Beta1OperationMetadataState::Created,
                "DONE" => GoogleCloudVisionV1P2Beta1OperationMetadataState::Done,
                "RUNNING" => GoogleCloudVisionV1P2Beta1OperationMetadataState::Running,
                "STATE_UNSPECIFIED" => {
                    GoogleCloudVisionV1P2Beta1OperationMetadataState::StateUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P2Beta1OperationMetadataState {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P2Beta1OperationMetadataState {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P2Beta1OperationMetadataState {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CANCELLED" => GoogleCloudVisionV1P2Beta1OperationMetadataState::Cancelled,
                "CREATED" => GoogleCloudVisionV1P2Beta1OperationMetadataState::Created,
                "DONE" => GoogleCloudVisionV1P2Beta1OperationMetadataState::Done,
                "RUNNING" => GoogleCloudVisionV1P2Beta1OperationMetadataState::Running,
                "STATE_UNSPECIFIED" => {
                    GoogleCloudVisionV1P2Beta1OperationMetadataState::StateUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1OperationMetadataState {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1OperationMetadataState {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1OutputConfig {
        #[doc = "The max number of response protos to put into each output JSON file on Google Cloud Storage. The valid range is \\[1, 100\\]. If not specified, the default value is 20. For example, for one pdf file with 100 pages, 100 response protos will be generated. If `batch_size` = 20, then 5 json files each containing 20 response protos will be written under the prefix `gcs_destination`.`uri`. Currently, batch_size only applies to GcsDestination, with potential future support for other output configurations."]
        #[serde(
            rename = "batchSize",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub batch_size: ::std::option::Option<i32>,
        #[doc = "The Google Cloud Storage location to write the output(s) to."]
        #[serde(
            rename = "gcsDestination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub gcs_destination:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P2Beta1GcsDestination>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1OutputConfig {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1OutputConfig {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1Page {
        #[doc = "List of blocks of text, images etc on this page."]
        #[serde(
            rename = "blocks",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub blocks: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P2Beta1Block>>,
        #[doc = "Confidence of the OCR results on the page. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels."]
        #[serde(
            rename = "height",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub height: ::std::option::Option<i32>,
        #[doc = "Additional information detected on the page."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P2Beta1TextAnnotationTextProperty,
        >,
        #[doc = "Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels."]
        #[serde(
            rename = "width",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub width: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1Page {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1Page {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1Paragraph {
        #[doc = "The bounding box for the paragraph. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the ‘natural’ orientation. For example: * when the text is horizontal it might look like: 0––1 | | 3––2 * when it’s rotated 180 degrees around the top-left corner it becomes: 2––3 | | 1––0 and the vertex order will still be (0, 1, 2, 3)."]
        #[serde(
            rename = "boundingBox",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_box:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P2Beta1BoundingPoly>,
        #[doc = "Confidence of the OCR results for the paragraph. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Additional information detected for the paragraph."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P2Beta1TextAnnotationTextProperty,
        >,
        #[doc = "List of all words in this paragraph."]
        #[serde(
            rename = "words",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub words: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P2Beta1Word>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1Paragraph {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1Paragraph {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1Position {
        #[doc = "X coordinate."]
        #[serde(
            rename = "x",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub x: ::std::option::Option<f32>,
        #[doc = "Y coordinate."]
        #[serde(
            rename = "y",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub y: ::std::option::Option<f32>,
        #[doc = "Z coordinate (or depth)."]
        #[serde(
            rename = "z",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub z: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1Position {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1Position {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1Product {
        #[doc = "User-provided metadata to be stored with this product. Must be at most 4096 characters long."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Immutable. The category for the product identified by the reference image. This should be one of “homegoods-v2”, “apparel-v2”, “toys-v2”, “packagedgoods-v1” or “general-v1”. The legacy categories “homegoods”, “apparel”, and “toys” are still supported, but these should not be used for new products."]
        #[serde(
            rename = "productCategory",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product_category: ::std::option::Option<String>,
        #[doc = "Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. “1199”. Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet."]
        #[serde(
            rename = "productLabels",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product_labels:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P2Beta1ProductKeyValue>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1Product {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1Product {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1ProductKeyValue {
        #[doc = "The key of the label attached to the product. Cannot be empty and cannot exceed 128 bytes."]
        #[serde(
            rename = "key",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub key: ::std::option::Option<String>,
        #[doc = "The value of the label attached to the product. Cannot be empty and cannot exceed 128 bytes."]
        #[serde(
            rename = "value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub value: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1ProductKeyValue {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1ProductKeyValue {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1ProductSearchResults {
        #[doc = "Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current results."]
        #[serde(
            rename = "indexTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub index_time: ::std::option::Option<String>,
        #[doc = "List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to that region. There may be duplicate product matches in the union of all the per-product results."]
        #[serde(
            rename = "productGroupedResults",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product_grouped_results: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P2Beta1ProductSearchResultsGroupedResult>,
        >,
        #[doc = "List of results, one for each product match."]
        #[serde(
            rename = "results",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub results: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P2Beta1ProductSearchResultsResult>,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1ProductSearchResults {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1ProductSearchResults {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1ProductSearchResultsGroupedResult {
        #[doc = "The bounding polygon around the product detected in the query image."]
        #[serde(
            rename = "boundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_poly:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P2Beta1BoundingPoly>,
        #[doc = "List of generic predictions for the object in the bounding box."]
        #[serde(
            rename = "objectAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub object_annotations: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P2Beta1ProductSearchResultsObjectAnnotation>,
        >,
        #[doc = "List of results, one for each product match."]
        #[serde(
            rename = "results",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub results: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P2Beta1ProductSearchResultsResult>,
        >,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P2Beta1ProductSearchResultsGroupedResult
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P2Beta1ProductSearchResultsGroupedResult
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1ProductSearchResultsObjectAnnotation {
        #[doc = "The BCP-47 language code, such as “en-US” or “sr-Latn”. For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."]
        #[serde(
            rename = "languageCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language_code: ::std::option::Option<String>,
        #[doc = "Object ID that should align with EntityAnnotation mid."]
        #[serde(
            rename = "mid",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mid: ::std::option::Option<String>,
        #[doc = "Object name, expressed in its `language_code` language."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Score of the result. Range \\[0, 1\\]."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P2Beta1ProductSearchResultsObjectAnnotation
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P2Beta1ProductSearchResultsObjectAnnotation
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1ProductSearchResultsResult {
        #[doc = "The resource name of the image from the product that is the closest match to the query."]
        #[serde(
            rename = "image",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub image: ::std::option::Option<String>,
        #[doc = "The Product."]
        #[serde(
            rename = "product",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product: ::std::option::Option<crate::schemas::GoogleCloudVisionV1P2Beta1Product>,
        #[doc = "A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence)."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P2Beta1ProductSearchResultsResult
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1ProductSearchResultsResult {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1Property {
        #[doc = "Name of the property."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Value of numeric properties."]
        #[serde(
            rename = "uint64Value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub uint_64_value: ::std::option::Option<u64>,
        #[doc = "Value of the property."]
        #[serde(
            rename = "value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub value: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1Property {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1Property {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1SafeSearchAnnotation {
        #[doc = "Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities."]
        #[serde(
            rename = "adult",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub adult: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult,
        >,
        #[doc = "Likelihood that this is a medical image."]
        #[serde(
            rename = "medical",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub medical: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical,
        >,
        #[doc = "Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative poses, or close-ups of sensitive body areas."]
        #[serde(
            rename = "racy",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub racy: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy,
        >,
        #[doc = "Spoof likelihood. The likelihood that an modification was made to the image’s canonical version to make it appear funny or offensive."]
        #[serde(
            rename = "spoof",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub spoof: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof,
        >,
        #[doc = "Likelihood that this image contains violent content."]
        #[serde(
            rename = "violence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub violence: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1SafeSearchAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1SafeSearchAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult::Likely => "LIKELY",
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult::Possible => "POSSIBLE",
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult::VeryLikely => "VERY_LIKELY",
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationAdult {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical::Likely => "LIKELY",
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical::Possible => "POSSIBLE",
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical::VeryLikely => "VERY_LIKELY",
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationMedical
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy::Likely => "LIKELY",
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy::Possible => "POSSIBLE",
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy::VeryLikely => "VERY_LIKELY",
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy::VeryUnlikely => "VERY_UNLIKELY",
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy, ()> {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy::VeryLikely,
                "VERY_UNLIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy::VeryUnlikely,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy::VeryLikely,
                "VERY_UNLIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy::VeryUnlikely,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationRacy {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof::Likely => "LIKELY",
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof::Possible => "POSSIBLE",
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof::VeryLikely => "VERY_LIKELY",
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationSpoof {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence::Likely => "LIKELY",
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence::Possible => "POSSIBLE",
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence::VeryLikely => "VERY_LIKELY",
                GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P2Beta1SafeSearchAnnotationViolence
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1Symbol {
        #[doc = "The bounding box for the symbol. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the ‘natural’ orientation. For example: * when the text is horizontal it might look like: 0––1 | | 3––2 * when it’s rotated 180 degrees around the top-left corner it becomes: 2––3 | | 1––0 and the vertex order will still be (0, 1, 2, 3)."]
        #[serde(
            rename = "boundingBox",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_box:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P2Beta1BoundingPoly>,
        #[doc = "Confidence of the OCR results for the symbol. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Additional information detected for the symbol."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P2Beta1TextAnnotationTextProperty,
        >,
        #[doc = "The actual UTF-8 representation of the symbol."]
        #[serde(
            rename = "text",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub text: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1Symbol {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1Symbol {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1TextAnnotation {
        #[doc = "List of pages detected by OCR."]
        #[serde(
            rename = "pages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pages: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P2Beta1Page>>,
        #[doc = "UTF-8 text detected on the pages."]
        #[serde(
            rename = "text",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub text: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1TextAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1TextAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreak {
        #[doc = "True if break prepends the element."]
        #[serde(
            rename = "isPrefix",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_prefix: ::std::option::Option<bool>,
        #[doc = "Detected break type."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType,
        >,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreak
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreak
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType {
        #[doc = "Line-wrapping break."]
        EolSureSpace,
        #[doc = "End-line hyphen that is not present in text; does not co-occur with `SPACE`, `LEADER_SPACE`, or `LINE_BREAK`."]
        Hyphen,
        #[doc = "Line break that ends a paragraph."]
        LineBreak,
        #[doc = "Regular space."]
        Space,
        #[doc = "Sure space (very wide)."]
        SureSpace,
        #[doc = "Unknown break label type."]
        Unknown,
    }
    impl GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType::EolSureSpace => {
                    "EOL_SURE_SPACE"
                }
                GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType::Hyphen => "HYPHEN",
                GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType::LineBreak => {
                    "LINE_BREAK"
                }
                GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType::Space => "SPACE",
                GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType::SureSpace => {
                    "SURE_SPACE"
                }
                GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType::Unknown => "UNKNOWN",
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType, ()>
        {
            Ok(match s {
                "EOL_SURE_SPACE" => {
                    GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType::EolSureSpace
                }
                "HYPHEN" => GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType::Hyphen,
                "LINE_BREAK" => {
                    GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType::LineBreak
                }
                "SPACE" => GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType::Space,
                "SURE_SPACE" => {
                    GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType::SureSpace
                }
                "UNKNOWN" => GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType::Unknown,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "EOL_SURE_SPACE" => {
                    GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType::EolSureSpace
                }
                "HYPHEN" => GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType::Hyphen,
                "LINE_BREAK" => {
                    GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType::LineBreak
                }
                "SPACE" => GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType::Space,
                "SURE_SPACE" => {
                    GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType::SureSpace
                }
                "UNKNOWN" => GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType::Unknown,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreakType
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1TextAnnotationDetectedLanguage {
        #[doc = "Confidence of detected language. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "The BCP-47 language code, such as “en-US” or “sr-Latn”. For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."]
        #[serde(
            rename = "languageCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language_code: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P2Beta1TextAnnotationDetectedLanguage
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P2Beta1TextAnnotationDetectedLanguage
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1TextAnnotationTextProperty {
        #[doc = "Detected start or end of a text segment."]
        #[serde(
            rename = "detectedBreak",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub detected_break: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P2Beta1TextAnnotationDetectedBreak,
        >,
        #[doc = "A list of detected languages together with confidence."]
        #[serde(
            rename = "detectedLanguages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub detected_languages: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P2Beta1TextAnnotationDetectedLanguage>,
        >,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P2Beta1TextAnnotationTextProperty
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1TextAnnotationTextProperty {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1Vertex {
        #[doc = "X coordinate."]
        #[serde(
            rename = "x",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub x: ::std::option::Option<i32>,
        #[doc = "Y coordinate."]
        #[serde(
            rename = "y",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub y: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1Vertex {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1Vertex {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1WebDetection {
        #[doc = "The service’s best guess as to the topic of the request image. Inferred from similar images on the open web."]
        #[serde(
            rename = "bestGuessLabels",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub best_guess_labels: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P2Beta1WebDetectionWebLabel>,
        >,
        #[doc = "Fully matching images from the Internet. Can include resized copies of the query image."]
        #[serde(
            rename = "fullMatchingImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub full_matching_images: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P2Beta1WebDetectionWebImage>,
        >,
        #[doc = "Web pages containing the matching images from the Internet."]
        #[serde(
            rename = "pagesWithMatchingImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pages_with_matching_images: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P2Beta1WebDetectionWebPage>,
        >,
        #[doc = "Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops."]
        #[serde(
            rename = "partialMatchingImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub partial_matching_images: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P2Beta1WebDetectionWebImage>,
        >,
        #[doc = "The visually similar image results."]
        #[serde(
            rename = "visuallySimilarImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visually_similar_images: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P2Beta1WebDetectionWebImage>,
        >,
        #[doc = "Deduced entities from similar images on the Internet."]
        #[serde(
            rename = "webEntities",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub web_entities: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P2Beta1WebDetectionWebEntity>,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1WebDetection {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1WebDetection {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1WebDetectionWebEntity {
        #[doc = "Canonical description of the entity, in English."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "Opaque entity ID."]
        #[serde(
            rename = "entityId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub entity_id: ::std::option::Option<String>,
        #[doc = "Overall relevancy score for the entity. Not normalized and not comparable across different image queries."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1WebDetectionWebEntity {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1WebDetectionWebEntity {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1WebDetectionWebImage {
        #[doc = "(Deprecated) Overall relevancy score for the image."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
        #[doc = "The result image URL."]
        #[serde(
            rename = "url",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1WebDetectionWebImage {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1WebDetectionWebImage {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1WebDetectionWebLabel {
        #[doc = "Label for extra metadata."]
        #[serde(
            rename = "label",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub label: ::std::option::Option<String>,
        #[doc = "The BCP-47 language code for `label`, such as “en-US” or “sr-Latn”. For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."]
        #[serde(
            rename = "languageCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language_code: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1WebDetectionWebLabel {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1WebDetectionWebLabel {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1WebDetectionWebPage {
        #[doc = "Fully matching images on the page. Can include resized copies of the query image."]
        #[serde(
            rename = "fullMatchingImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub full_matching_images: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P2Beta1WebDetectionWebImage>,
        >,
        #[doc = "Title for the web page, may contain HTML markups."]
        #[serde(
            rename = "pageTitle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_title: ::std::option::Option<String>,
        #[doc = "Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops."]
        #[serde(
            rename = "partialMatchingImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub partial_matching_images: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P2Beta1WebDetectionWebImage>,
        >,
        #[doc = "(Deprecated) Overall relevancy score for the web page."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
        #[doc = "The result web page URL."]
        #[serde(
            rename = "url",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1WebDetectionWebPage {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1WebDetectionWebPage {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P2Beta1Word {
        #[doc = "The bounding box for the word. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the ‘natural’ orientation. For example: * when the text is horizontal it might look like: 0––1 | | 3––2 * when it’s rotated 180 degrees around the top-left corner it becomes: 2––3 | | 1––0 and the vertex order will still be (0, 1, 2, 3)."]
        #[serde(
            rename = "boundingBox",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_box:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P2Beta1BoundingPoly>,
        #[doc = "Confidence of the OCR results for the word. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Additional information detected for the word."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P2Beta1TextAnnotationTextProperty,
        >,
        #[doc = "List of symbols in the word. The order of the symbols follows the natural reading order."]
        #[serde(
            rename = "symbols",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub symbols: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P2Beta1Symbol>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P2Beta1Word {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P2Beta1Word {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct GoogleCloudVisionV1P3Beta1AnnotateFileResponse {
        #[doc = "If set, represents the error message for the failed request. The `responses` field will not be set in this case."]
        #[serde(
            rename = "error",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub error: ::std::option::Option<crate::schemas::Status>,
        #[doc = "Information about the file for which this response is generated."]
        #[serde(
            rename = "inputConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub input_config:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P3Beta1InputConfig>,
        #[doc = "Individual responses to images found within the file. This field will be empty if the `error` field is set."]
        #[serde(
            rename = "responses",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub responses: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P3Beta1AnnotateImageResponse>,
        >,
        #[doc = "This field gives the total number of pages in the file."]
        #[serde(
            rename = "totalPages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub total_pages: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1AnnotateFileResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1AnnotateFileResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct GoogleCloudVisionV1P3Beta1AnnotateImageResponse {
        #[doc = "If present, contextual information is needed to understand where this image comes from."]
        #[serde(
            rename = "context",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub context:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P3Beta1ImageAnnotationContext>,
        #[doc = "If present, crop hints have completed successfully."]
        #[serde(
            rename = "cropHintsAnnotation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub crop_hints_annotation:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P3Beta1CropHintsAnnotation>,
        #[doc = "If set, represents the error message for the operation. Note that filled-in image annotations are guaranteed to be correct, even when `error` is set."]
        #[serde(
            rename = "error",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub error: ::std::option::Option<crate::schemas::Status>,
        #[doc = "If present, face detection has completed successfully."]
        #[serde(
            rename = "faceAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub face_annotations:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P3Beta1FaceAnnotation>>,
        #[doc = "If present, text (OCR) detection or document (OCR) text detection has completed successfully. This annotation provides the structural hierarchy for the OCR detected text."]
        #[serde(
            rename = "fullTextAnnotation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub full_text_annotation:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P3Beta1TextAnnotation>,
        #[doc = "If present, image properties were extracted successfully."]
        #[serde(
            rename = "imagePropertiesAnnotation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub image_properties_annotation:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P3Beta1ImageProperties>,
        #[doc = "If present, label detection has completed successfully."]
        #[serde(
            rename = "labelAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub label_annotations:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P3Beta1EntityAnnotation>>,
        #[doc = "If present, landmark detection has completed successfully."]
        #[serde(
            rename = "landmarkAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub landmark_annotations:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P3Beta1EntityAnnotation>>,
        #[doc = "If present, localized object detection has completed successfully. This will be sorted descending by confidence score."]
        #[serde(
            rename = "localizedObjectAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub localized_object_annotations: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P3Beta1LocalizedObjectAnnotation>,
        >,
        #[doc = "If present, logo detection has completed successfully."]
        #[serde(
            rename = "logoAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub logo_annotations:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P3Beta1EntityAnnotation>>,
        #[doc = "If present, product search has completed successfully."]
        #[serde(
            rename = "productSearchResults",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product_search_results:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P3Beta1ProductSearchResults>,
        #[doc = "If present, safe-search annotation has completed successfully."]
        #[serde(
            rename = "safeSearchAnnotation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub safe_search_annotation:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P3Beta1SafeSearchAnnotation>,
        #[doc = "If present, text (OCR) detection has completed successfully."]
        #[serde(
            rename = "textAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub text_annotations:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P3Beta1EntityAnnotation>>,
        #[doc = "If present, web detection has completed successfully."]
        #[serde(
            rename = "webDetection",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub web_detection:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P3Beta1WebDetection>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1AnnotateImageResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1AnnotateImageResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1AsyncAnnotateFileResponse {
        #[doc = "The output location and metadata from AsyncAnnotateFileRequest."]
        #[serde(
            rename = "outputConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub output_config:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P3Beta1OutputConfig>,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P3Beta1AsyncAnnotateFileResponse
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1AsyncAnnotateFileResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1AsyncBatchAnnotateFilesResponse {
        #[doc = "The list of file annotation responses, one for each request in AsyncBatchAnnotateFilesRequest."]
        #[serde(
            rename = "responses",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub responses: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P3Beta1AsyncAnnotateFileResponse>,
        >,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P3Beta1AsyncBatchAnnotateFilesResponse
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P3Beta1AsyncBatchAnnotateFilesResponse
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1BatchOperationMetadata {
        #[doc = "The time when the batch request is finished and google.longrunning.Operation.done is set to true."]
        #[serde(
            rename = "endTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub end_time: ::std::option::Option<String>,
        #[doc = "The current state of the batch operation."]
        #[serde(
            rename = "state",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub state: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P3Beta1BatchOperationMetadataState,
        >,
        #[doc = "The time when the batch request was submitted to the server."]
        #[serde(
            rename = "submitTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub submit_time: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1BatchOperationMetadata {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1BatchOperationMetadata {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P3Beta1BatchOperationMetadataState {
        #[doc = "The request is done after the longrunning.Operations.CancelOperation has been called by the user. Any records that were processed before the cancel command are output as specified in the request."]
        Cancelled,
        #[doc = "The request is done and no item has been successfully processed."]
        Failed,
        #[doc = "Request is actively being processed."]
        Processing,
        #[doc = "Invalid."]
        StateUnspecified,
        #[doc = "The request is done and at least one item has been successfully processed."]
        Successful,
    }
    impl GoogleCloudVisionV1P3Beta1BatchOperationMetadataState {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P3Beta1BatchOperationMetadataState::Cancelled => "CANCELLED",
                GoogleCloudVisionV1P3Beta1BatchOperationMetadataState::Failed => "FAILED",
                GoogleCloudVisionV1P3Beta1BatchOperationMetadataState::Processing => "PROCESSING",
                GoogleCloudVisionV1P3Beta1BatchOperationMetadataState::StateUnspecified => {
                    "STATE_UNSPECIFIED"
                }
                GoogleCloudVisionV1P3Beta1BatchOperationMetadataState::Successful => "SUCCESSFUL",
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P3Beta1BatchOperationMetadataState {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P3Beta1BatchOperationMetadataState {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P3Beta1BatchOperationMetadataState, ()>
        {
            Ok(match s {
                "CANCELLED" => GoogleCloudVisionV1P3Beta1BatchOperationMetadataState::Cancelled,
                "FAILED" => GoogleCloudVisionV1P3Beta1BatchOperationMetadataState::Failed,
                "PROCESSING" => GoogleCloudVisionV1P3Beta1BatchOperationMetadataState::Processing,
                "STATE_UNSPECIFIED" => {
                    GoogleCloudVisionV1P3Beta1BatchOperationMetadataState::StateUnspecified
                }
                "SUCCESSFUL" => GoogleCloudVisionV1P3Beta1BatchOperationMetadataState::Successful,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P3Beta1BatchOperationMetadataState {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P3Beta1BatchOperationMetadataState {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P3Beta1BatchOperationMetadataState {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CANCELLED" => GoogleCloudVisionV1P3Beta1BatchOperationMetadataState::Cancelled,
                "FAILED" => GoogleCloudVisionV1P3Beta1BatchOperationMetadataState::Failed,
                "PROCESSING" => GoogleCloudVisionV1P3Beta1BatchOperationMetadataState::Processing,
                "STATE_UNSPECIFIED" => {
                    GoogleCloudVisionV1P3Beta1BatchOperationMetadataState::StateUnspecified
                }
                "SUCCESSFUL" => GoogleCloudVisionV1P3Beta1BatchOperationMetadataState::Successful,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P3Beta1BatchOperationMetadataState
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P3Beta1BatchOperationMetadataState
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1Block {
        #[doc = "Detected block type (text, image etc) for this block."]
        #[serde(
            rename = "blockType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub block_type:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P3Beta1BlockBlockType>,
        #[doc = "The bounding box for the block. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the ‘natural’ orientation. For example: * when the text is horizontal it might look like: 0––1 | | 3––2 * when it’s rotated 180 degrees around the top-left corner it becomes: 2––3 | | 1––0 and the vertex order will still be (0, 1, 2, 3)."]
        #[serde(
            rename = "boundingBox",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_box:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P3Beta1BoundingPoly>,
        #[doc = "Confidence of the OCR results on the block. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "List of paragraphs in this block (if this blocks is of type text)."]
        #[serde(
            rename = "paragraphs",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub paragraphs:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P3Beta1Paragraph>>,
        #[doc = "Additional information detected for the block."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P3Beta1TextAnnotationTextProperty,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1Block {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1Block {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P3Beta1BlockBlockType {
        #[doc = "Barcode block."]
        Barcode,
        #[doc = "Image block."]
        Picture,
        #[doc = "Horizontal/vertical line box."]
        Ruler,
        #[doc = "Table block."]
        Table,
        #[doc = "Regular text block."]
        Text,
        #[doc = "Unknown block type."]
        Unknown,
    }
    impl GoogleCloudVisionV1P3Beta1BlockBlockType {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P3Beta1BlockBlockType::Barcode => "BARCODE",
                GoogleCloudVisionV1P3Beta1BlockBlockType::Picture => "PICTURE",
                GoogleCloudVisionV1P3Beta1BlockBlockType::Ruler => "RULER",
                GoogleCloudVisionV1P3Beta1BlockBlockType::Table => "TABLE",
                GoogleCloudVisionV1P3Beta1BlockBlockType::Text => "TEXT",
                GoogleCloudVisionV1P3Beta1BlockBlockType::Unknown => "UNKNOWN",
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P3Beta1BlockBlockType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P3Beta1BlockBlockType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P3Beta1BlockBlockType, ()> {
            Ok(match s {
                "BARCODE" => GoogleCloudVisionV1P3Beta1BlockBlockType::Barcode,
                "PICTURE" => GoogleCloudVisionV1P3Beta1BlockBlockType::Picture,
                "RULER" => GoogleCloudVisionV1P3Beta1BlockBlockType::Ruler,
                "TABLE" => GoogleCloudVisionV1P3Beta1BlockBlockType::Table,
                "TEXT" => GoogleCloudVisionV1P3Beta1BlockBlockType::Text,
                "UNKNOWN" => GoogleCloudVisionV1P3Beta1BlockBlockType::Unknown,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P3Beta1BlockBlockType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P3Beta1BlockBlockType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P3Beta1BlockBlockType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "BARCODE" => GoogleCloudVisionV1P3Beta1BlockBlockType::Barcode,
                "PICTURE" => GoogleCloudVisionV1P3Beta1BlockBlockType::Picture,
                "RULER" => GoogleCloudVisionV1P3Beta1BlockBlockType::Ruler,
                "TABLE" => GoogleCloudVisionV1P3Beta1BlockBlockType::Table,
                "TEXT" => GoogleCloudVisionV1P3Beta1BlockBlockType::Text,
                "UNKNOWN" => GoogleCloudVisionV1P3Beta1BlockBlockType::Unknown,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1BlockBlockType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1BlockBlockType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1BoundingPoly {
        #[doc = "The bounding polygon normalized vertices."]
        #[serde(
            rename = "normalizedVertices",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub normalized_vertices:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P3Beta1NormalizedVertex>>,
        #[doc = "The bounding polygon vertices."]
        #[serde(
            rename = "vertices",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub vertices: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P3Beta1Vertex>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1BoundingPoly {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1BoundingPoly {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1ColorInfo {
        #[doc = "RGB components of the color."]
        #[serde(
            rename = "color",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub color: ::std::option::Option<crate::schemas::Color>,
        #[doc = "The fraction of pixels the color occupies in the image. Value in range \\[0, 1\\]."]
        #[serde(
            rename = "pixelFraction",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pixel_fraction: ::std::option::Option<f32>,
        #[doc = "Image-specific score for this color. Value in range \\[0, 1\\]."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1ColorInfo {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1ColorInfo {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1CropHint {
        #[doc = "The bounding polygon for the crop region. The coordinates of the bounding box are in the original image’s scale."]
        #[serde(
            rename = "boundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_poly:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P3Beta1BoundingPoly>,
        #[doc = "Confidence of this being a salient region. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Fraction of importance of this salient region with respect to the original image."]
        #[serde(
            rename = "importanceFraction",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub importance_fraction: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1CropHint {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1CropHint {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1CropHintsAnnotation {
        #[doc = "Crop hint results."]
        #[serde(
            rename = "cropHints",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub crop_hints:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P3Beta1CropHint>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1CropHintsAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1CropHintsAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1DominantColorsAnnotation {
        #[doc = "RGB color values with their score and pixel fraction."]
        #[serde(
            rename = "colors",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub colors: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P3Beta1ColorInfo>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1DominantColorsAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1DominantColorsAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1EntityAnnotation {
        #[doc = "Image region to which this entity belongs. Not produced for `LABEL_DETECTION` features."]
        #[serde(
            rename = "boundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_poly:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P3Beta1BoundingPoly>,
        #[doc = "**Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the “Eiffel Tower” entity is detected, this field represents the confidence that there is a tower in the query image. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Entity textual description, expressed in its `locale` language."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "The language code for the locale in which the entity textual `description` is expressed."]
        #[serde(
            rename = "locale",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub locale: ::std::option::Option<String>,
        #[doc = "The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks."]
        #[serde(
            rename = "locations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub locations:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P3Beta1LocationInfo>>,
        #[doc = "Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/)."]
        #[serde(
            rename = "mid",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mid: ::std::option::Option<String>,
        #[doc = "Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity."]
        #[serde(
            rename = "properties",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub properties:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P3Beta1Property>>,
        #[doc = "Overall score of the result. Range \\[0, 1\\]."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
        #[doc = "The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of “tower” is likely higher to an image containing the detected “Eiffel Tower” than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range \\[0, 1\\]."]
        #[serde(
            rename = "topicality",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub topicality: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1EntityAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1EntityAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1FaceAnnotation {
        #[doc = "Anger likelihood."]
        #[serde(
            rename = "angerLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub anger_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood,
        >,
        #[doc = "Blurred likelihood."]
        #[serde(
            rename = "blurredLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub blurred_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood,
        >,
        #[doc = "The bounding polygon around the face. The coordinates of the bounding box are in the original image’s scale. The bounding box is computed to “frame” the face in accordance with human expectations. It is based on the landmarker results. Note that one or more x and/or y coordinates may not be generated in the `BoundingPoly` (the polygon will be unbounded) if only a partial face appears in the image to be annotated."]
        #[serde(
            rename = "boundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_poly:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P3Beta1BoundingPoly>,
        #[doc = "Detection confidence. Range \\[0, 1\\]."]
        #[serde(
            rename = "detectionConfidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub detection_confidence: ::std::option::Option<f32>,
        #[doc = "The `fd_bounding_poly` bounding polygon is tighter than the `boundingPoly`, and encloses only the skin part of the face. Typically, it is used to eliminate the face from any image analysis that detects the “amount of skin” visible in an image. It is not based on the landmarker results, only on the initial face detection, hence the fd (face detection) prefix."]
        #[serde(
            rename = "fdBoundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub fd_bounding_poly:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P3Beta1BoundingPoly>,
        #[doc = "Headwear likelihood."]
        #[serde(
            rename = "headwearLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub headwear_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood,
        >,
        #[doc = "Joy likelihood."]
        #[serde(
            rename = "joyLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub joy_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood,
        >,
        #[doc = "Face landmarking confidence. Range \\[0, 1\\]."]
        #[serde(
            rename = "landmarkingConfidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub landmarking_confidence: ::std::option::Option<f32>,
        #[doc = "Detected face landmarks."]
        #[serde(
            rename = "landmarks",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub landmarks: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P3Beta1FaceAnnotationLandmark>,
        >,
        #[doc = "Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range \\[-180,180\\]."]
        #[serde(
            rename = "panAngle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pan_angle: ::std::option::Option<f32>,
        #[doc = "Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range \\[-180,180\\]."]
        #[serde(
            rename = "rollAngle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub roll_angle: ::std::option::Option<f32>,
        #[doc = "Sorrow likelihood."]
        #[serde(
            rename = "sorrowLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub sorrow_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood,
        >,
        #[doc = "Surprise likelihood."]
        #[serde(
            rename = "surpriseLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub surprise_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood,
        >,
        #[doc = "Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image’s horizontal plane. Range \\[-180,180\\]."]
        #[serde(
            rename = "tiltAngle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tilt_angle: ::std::option::Option<f32>,
        #[doc = "Under-exposed likelihood."]
        #[serde(
            rename = "underExposedLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub under_exposed_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1FaceAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1FaceAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood::Possible => "POSSIBLE",
                GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood::VeryLikely => {
                    "VERY_LIKELY"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P3Beta1FaceAnnotationAngerLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood::Possible => "POSSIBLE",
                GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood::VeryLikely => {
                    "VERY_LIKELY"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P3Beta1FaceAnnotationBlurredLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood::Possible => "POSSIBLE",
                GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood::VeryLikely => {
                    "VERY_LIKELY"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P3Beta1FaceAnnotationHeadwearLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood::Possible => "POSSIBLE",
                GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood::VeryLikely => "VERY_LIKELY",
                GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P3Beta1FaceAnnotationJoyLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood::Possible => "POSSIBLE",
                GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood::VeryLikely => {
                    "VERY_LIKELY"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P3Beta1FaceAnnotationSorrowLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood::Possible => "POSSIBLE",
                GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood::VeryLikely => {
                    "VERY_LIKELY"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P3Beta1FaceAnnotationSurpriseLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood::Possible => {
                    "POSSIBLE"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood::Unknown => {
                    "UNKNOWN"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood::Unlikely => {
                    "UNLIKELY"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood::VeryLikely => {
                    "VERY_LIKELY"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood::Likely,
                "POSSIBLE" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood::Possible
                }
                "UNKNOWN" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood::Unknown
                }
                "UNLIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood::Unlikely
                }
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de>
        for GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood
    {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood::Likely,
                "POSSIBLE" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood::Possible
                }
                "UNKNOWN" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood::Unknown
                }
                "UNLIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood::Unlikely
                }
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P3Beta1FaceAnnotationUnderExposedLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1FaceAnnotationLandmark {
        #[doc = "Face landmark position."]
        #[serde(
            rename = "position",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub position: ::std::option::Option<crate::schemas::GoogleCloudVisionV1P3Beta1Position>,
        #[doc = "Face landmark type."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1FaceAnnotationLandmark {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1FaceAnnotationLandmark {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType {
        #[doc = "Chin gnathion."]
        ChinGnathion,
        #[doc = "Chin left gonion."]
        ChinLeftGonion,
        #[doc = "Chin right gonion."]
        ChinRightGonion,
        #[doc = "Forehead glabella."]
        ForeheadGlabella,
        #[doc = "Left cheek center."]
        LeftCheekCenter,
        #[doc = "Left ear tragion."]
        LeftEarTragion,
        #[doc = "Left eye."]
        LeftEye,
        #[doc = "Left eye, bottom boundary."]
        LeftEyeBottomBoundary,
        #[doc = "Left eye, left corner."]
        LeftEyeLeftCorner,
        #[doc = "Left eye pupil."]
        LeftEyePupil,
        #[doc = "Left eye, right corner."]
        LeftEyeRightCorner,
        #[doc = "Left eye, top boundary."]
        LeftEyeTopBoundary,
        #[doc = "Left eyebrow, upper midpoint."]
        LeftEyebrowUpperMidpoint,
        #[doc = "Left of left eyebrow."]
        LeftOfLeftEyebrow,
        #[doc = "Left of right eyebrow."]
        LeftOfRightEyebrow,
        #[doc = "Lower lip."]
        LowerLip,
        #[doc = "Midpoint between eyes."]
        MidpointBetweenEyes,
        #[doc = "Mouth center."]
        MouthCenter,
        #[doc = "Mouth left."]
        MouthLeft,
        #[doc = "Mouth right."]
        MouthRight,
        #[doc = "Nose, bottom center."]
        NoseBottomCenter,
        #[doc = "Nose, bottom left."]
        NoseBottomLeft,
        #[doc = "Nose, bottom right."]
        NoseBottomRight,
        #[doc = "Nose tip."]
        NoseTip,
        #[doc = "Right cheek center."]
        RightCheekCenter,
        #[doc = "Right ear tragion."]
        RightEarTragion,
        #[doc = "Right eye."]
        RightEye,
        #[doc = "Right eye, bottom boundary."]
        RightEyeBottomBoundary,
        #[doc = "Right eye, left corner."]
        RightEyeLeftCorner,
        #[doc = "Right eye pupil."]
        RightEyePupil,
        #[doc = "Right eye, right corner."]
        RightEyeRightCorner,
        #[doc = "Right eye, top boundary."]
        RightEyeTopBoundary,
        #[doc = "Right eyebrow, upper midpoint."]
        RightEyebrowUpperMidpoint,
        #[doc = "Right of left eyebrow."]
        RightOfLeftEyebrow,
        #[doc = "Right of right eyebrow."]
        RightOfRightEyebrow,
        #[doc = "Unknown face landmark detected. Should not be filled."]
        UnknownLandmark,
        #[doc = "Upper lip."]
        UpperLip,
    }
    impl GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::ChinGnathion => {
                    "CHIN_GNATHION"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::ChinLeftGonion => {
                    "CHIN_LEFT_GONION"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::ChinRightGonion => {
                    "CHIN_RIGHT_GONION"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::ForeheadGlabella => {
                    "FOREHEAD_GLABELLA"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftCheekCenter => {
                    "LEFT_CHEEK_CENTER"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftEarTragion => {
                    "LEFT_EAR_TRAGION"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftEye => "LEFT_EYE",
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftEyeBottomBoundary => {
                    "LEFT_EYE_BOTTOM_BOUNDARY"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftEyeLeftCorner => {
                    "LEFT_EYE_LEFT_CORNER"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftEyePupil => {
                    "LEFT_EYE_PUPIL"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftEyeRightCorner => {
                    "LEFT_EYE_RIGHT_CORNER"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftEyeTopBoundary => {
                    "LEFT_EYE_TOP_BOUNDARY"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftEyebrowUpperMidpoint => {
                    "LEFT_EYEBROW_UPPER_MIDPOINT"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftOfLeftEyebrow => {
                    "LEFT_OF_LEFT_EYEBROW"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftOfRightEyebrow => {
                    "LEFT_OF_RIGHT_EYEBROW"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LowerLip => "LOWER_LIP",
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::MidpointBetweenEyes => {
                    "MIDPOINT_BETWEEN_EYES"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::MouthCenter => "MOUTH_CENTER",
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::MouthLeft => "MOUTH_LEFT",
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::MouthRight => "MOUTH_RIGHT",
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::NoseBottomCenter => {
                    "NOSE_BOTTOM_CENTER"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::NoseBottomLeft => {
                    "NOSE_BOTTOM_LEFT"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::NoseBottomRight => {
                    "NOSE_BOTTOM_RIGHT"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::NoseTip => "NOSE_TIP",
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightCheekCenter => {
                    "RIGHT_CHEEK_CENTER"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightEarTragion => {
                    "RIGHT_EAR_TRAGION"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightEye => "RIGHT_EYE",
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightEyeBottomBoundary => {
                    "RIGHT_EYE_BOTTOM_BOUNDARY"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightEyeLeftCorner => {
                    "RIGHT_EYE_LEFT_CORNER"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightEyePupil => {
                    "RIGHT_EYE_PUPIL"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightEyeRightCorner => {
                    "RIGHT_EYE_RIGHT_CORNER"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightEyeTopBoundary => {
                    "RIGHT_EYE_TOP_BOUNDARY"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightEyebrowUpperMidpoint => {
                    "RIGHT_EYEBROW_UPPER_MIDPOINT"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightOfLeftEyebrow => {
                    "RIGHT_OF_LEFT_EYEBROW"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightOfRightEyebrow => {
                    "RIGHT_OF_RIGHT_EYEBROW"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::UnknownLandmark => {
                    "UNKNOWN_LANDMARK"
                }
                GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::UpperLip => "UPPER_LIP",
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType, ()>
        {
            Ok(match s {
                "CHIN_GNATHION" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::ChinGnathion
                }
                "CHIN_LEFT_GONION" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::ChinLeftGonion
                }
                "CHIN_RIGHT_GONION" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::ChinRightGonion
                }
                "FOREHEAD_GLABELLA" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::ForeheadGlabella
                }
                "LEFT_CHEEK_CENTER" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftCheekCenter
                }
                "LEFT_EAR_TRAGION" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftEarTragion
                }
                "LEFT_EYE" => GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftEye,
                "LEFT_EYE_BOTTOM_BOUNDARY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftEyeBottomBoundary
                }
                "LEFT_EYE_LEFT_CORNER" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftEyeLeftCorner
                }
                "LEFT_EYE_PUPIL" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftEyePupil
                }
                "LEFT_EYE_RIGHT_CORNER" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftEyeRightCorner
                }
                "LEFT_EYE_TOP_BOUNDARY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftEyeTopBoundary
                }
                "LEFT_EYEBROW_UPPER_MIDPOINT" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftEyebrowUpperMidpoint
                }
                "LEFT_OF_LEFT_EYEBROW" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftOfLeftEyebrow
                }
                "LEFT_OF_RIGHT_EYEBROW" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftOfRightEyebrow
                }
                "LOWER_LIP" => GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LowerLip,
                "MIDPOINT_BETWEEN_EYES" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::MidpointBetweenEyes
                }
                "MOUTH_CENTER" => GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::MouthCenter,
                "MOUTH_LEFT" => GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::MouthLeft,
                "MOUTH_RIGHT" => GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::MouthRight,
                "NOSE_BOTTOM_CENTER" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::NoseBottomCenter
                }
                "NOSE_BOTTOM_LEFT" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::NoseBottomLeft
                }
                "NOSE_BOTTOM_RIGHT" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::NoseBottomRight
                }
                "NOSE_TIP" => GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::NoseTip,
                "RIGHT_CHEEK_CENTER" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightCheekCenter
                }
                "RIGHT_EAR_TRAGION" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightEarTragion
                }
                "RIGHT_EYE" => GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightEye,
                "RIGHT_EYE_BOTTOM_BOUNDARY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightEyeBottomBoundary
                }
                "RIGHT_EYE_LEFT_CORNER" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightEyeLeftCorner
                }
                "RIGHT_EYE_PUPIL" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightEyePupil
                }
                "RIGHT_EYE_RIGHT_CORNER" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightEyeRightCorner
                }
                "RIGHT_EYE_TOP_BOUNDARY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightEyeTopBoundary
                }
                "RIGHT_EYEBROW_UPPER_MIDPOINT" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightEyebrowUpperMidpoint
                }
                "RIGHT_OF_LEFT_EYEBROW" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightOfLeftEyebrow
                }
                "RIGHT_OF_RIGHT_EYEBROW" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightOfRightEyebrow
                }
                "UNKNOWN_LANDMARK" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::UnknownLandmark
                }
                "UPPER_LIP" => GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::UpperLip,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CHIN_GNATHION" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::ChinGnathion
                }
                "CHIN_LEFT_GONION" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::ChinLeftGonion
                }
                "CHIN_RIGHT_GONION" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::ChinRightGonion
                }
                "FOREHEAD_GLABELLA" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::ForeheadGlabella
                }
                "LEFT_CHEEK_CENTER" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftCheekCenter
                }
                "LEFT_EAR_TRAGION" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftEarTragion
                }
                "LEFT_EYE" => GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftEye,
                "LEFT_EYE_BOTTOM_BOUNDARY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftEyeBottomBoundary
                }
                "LEFT_EYE_LEFT_CORNER" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftEyeLeftCorner
                }
                "LEFT_EYE_PUPIL" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftEyePupil
                }
                "LEFT_EYE_RIGHT_CORNER" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftEyeRightCorner
                }
                "LEFT_EYE_TOP_BOUNDARY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftEyeTopBoundary
                }
                "LEFT_EYEBROW_UPPER_MIDPOINT" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftEyebrowUpperMidpoint
                }
                "LEFT_OF_LEFT_EYEBROW" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftOfLeftEyebrow
                }
                "LEFT_OF_RIGHT_EYEBROW" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LeftOfRightEyebrow
                }
                "LOWER_LIP" => GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::LowerLip,
                "MIDPOINT_BETWEEN_EYES" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::MidpointBetweenEyes
                }
                "MOUTH_CENTER" => GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::MouthCenter,
                "MOUTH_LEFT" => GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::MouthLeft,
                "MOUTH_RIGHT" => GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::MouthRight,
                "NOSE_BOTTOM_CENTER" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::NoseBottomCenter
                }
                "NOSE_BOTTOM_LEFT" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::NoseBottomLeft
                }
                "NOSE_BOTTOM_RIGHT" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::NoseBottomRight
                }
                "NOSE_TIP" => GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::NoseTip,
                "RIGHT_CHEEK_CENTER" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightCheekCenter
                }
                "RIGHT_EAR_TRAGION" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightEarTragion
                }
                "RIGHT_EYE" => GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightEye,
                "RIGHT_EYE_BOTTOM_BOUNDARY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightEyeBottomBoundary
                }
                "RIGHT_EYE_LEFT_CORNER" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightEyeLeftCorner
                }
                "RIGHT_EYE_PUPIL" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightEyePupil
                }
                "RIGHT_EYE_RIGHT_CORNER" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightEyeRightCorner
                }
                "RIGHT_EYE_TOP_BOUNDARY" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightEyeTopBoundary
                }
                "RIGHT_EYEBROW_UPPER_MIDPOINT" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightEyebrowUpperMidpoint
                }
                "RIGHT_OF_LEFT_EYEBROW" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightOfLeftEyebrow
                }
                "RIGHT_OF_RIGHT_EYEBROW" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::RightOfRightEyebrow
                }
                "UNKNOWN_LANDMARK" => {
                    GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::UnknownLandmark
                }
                "UPPER_LIP" => GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType::UpperLip,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1FaceAnnotationLandmarkType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1GcsDestination {
        #[doc = "Google Cloud Storage URI prefix where the results will be stored. Results will be in JSON format and preceded by its corresponding input URI prefix. This field can either represent a gcs file prefix or gcs directory. In either case, the uri should be unique because in order to get all of the output files, you will need to do a wildcard gcs search on the uri prefix you provide. Examples: * File Prefix: gs://bucket-name/here/filenameprefix The output files will be created in gs://bucket-name/here/ and the names of the output files will begin with “filenameprefix”. * Directory Prefix: gs://bucket-name/some/location/ The output files will be created in gs://bucket-name/some/location/ and the names of the output files could be anything because there was no filename prefix specified. If multiple outputs, each response is still AnnotateFileResponse, each of which contains some subset of the full list of AnnotateImageResponse. Multiple outputs can happen if, for example, the output JSON is too large and overflows into multiple sharded files."]
        #[serde(
            rename = "uri",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub uri: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1GcsDestination {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1GcsDestination {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1GcsSource {
        #[doc = "Google Cloud Storage URI for the input file. This must only be a Google Cloud Storage object. Wildcards are not currently supported."]
        #[serde(
            rename = "uri",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub uri: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1GcsSource {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1GcsSource {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1ImageAnnotationContext {
        #[doc = "If the file was a PDF or TIFF, this field gives the page number within the file used to produce the image."]
        #[serde(
            rename = "pageNumber",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_number: ::std::option::Option<i32>,
        #[doc = "The URI of the file used to produce the image."]
        #[serde(
            rename = "uri",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub uri: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1ImageAnnotationContext {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1ImageAnnotationContext {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1ImageProperties {
        #[doc = "If present, dominant colors completed successfully."]
        #[serde(
            rename = "dominantColors",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dominant_colors: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P3Beta1DominantColorsAnnotation,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1ImageProperties {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1ImageProperties {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct GoogleCloudVisionV1P3Beta1ImportProductSetsResponse {
        #[doc = "The list of reference_images that are imported successfully."]
        #[serde(
            rename = "referenceImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub reference_images:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P3Beta1ReferenceImage>>,
        #[doc = "The rpc status for each ImportProductSet request, including both successes and errors. The number of statuses here matches the number of lines in the csv file, and statuses\\[i\\] stores the success or failure status of processing the i-th line of the csv, starting from line 0."]
        #[serde(
            rename = "statuses",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub statuses: ::std::option::Option<Vec<crate::schemas::Status>>,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P3Beta1ImportProductSetsResponse
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1ImportProductSetsResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1InputConfig {
        #[doc = "File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently, this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests."]
        #[serde(
            rename = "content",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content: ::std::option::Option<::google_api_bytes::Bytes>,
        #[doc = "The Google Cloud Storage location to read the input from."]
        #[serde(
            rename = "gcsSource",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub gcs_source: ::std::option::Option<crate::schemas::GoogleCloudVisionV1P3Beta1GcsSource>,
        #[doc = "The type of the file. Currently only “application/pdf”, “image/tiff” and “image/gif” are supported. Wildcards are not supported."]
        #[serde(
            rename = "mimeType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mime_type: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1InputConfig {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1InputConfig {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1LocalizedObjectAnnotation {
        #[doc = "Image region to which this object belongs. This must be populated."]
        #[serde(
            rename = "boundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_poly:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P3Beta1BoundingPoly>,
        #[doc = "The BCP-47 language code, such as “en-US” or “sr-Latn”. For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."]
        #[serde(
            rename = "languageCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language_code: ::std::option::Option<String>,
        #[doc = "Object ID that should align with EntityAnnotation mid."]
        #[serde(
            rename = "mid",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mid: ::std::option::Option<String>,
        #[doc = "Object name, expressed in its `language_code` language."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Score of the result. Range \\[0, 1\\]."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P3Beta1LocalizedObjectAnnotation
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1LocalizedObjectAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1LocationInfo {
        #[doc = "lat/long location coordinates."]
        #[serde(
            rename = "latLng",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub lat_lng: ::std::option::Option<crate::schemas::LatLng>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1LocationInfo {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1LocationInfo {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1NormalizedVertex {
        #[doc = "X coordinate."]
        #[serde(
            rename = "x",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub x: ::std::option::Option<f32>,
        #[doc = "Y coordinate."]
        #[serde(
            rename = "y",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub y: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1NormalizedVertex {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1NormalizedVertex {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1OperationMetadata {
        #[doc = "The time when the batch request was received."]
        #[serde(
            rename = "createTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub create_time: ::std::option::Option<String>,
        #[doc = "Current state of the batch operation."]
        #[serde(
            rename = "state",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub state:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P3Beta1OperationMetadataState>,
        #[doc = "The time when the operation result was last updated."]
        #[serde(
            rename = "updateTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub update_time: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1OperationMetadata {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1OperationMetadata {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P3Beta1OperationMetadataState {
        #[doc = "The batch processing was cancelled."]
        Cancelled,
        #[doc = "Request is received."]
        Created,
        #[doc = "The batch processing is done."]
        Done,
        #[doc = "Request is actively being processed."]
        Running,
        #[doc = "Invalid."]
        StateUnspecified,
    }
    impl GoogleCloudVisionV1P3Beta1OperationMetadataState {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P3Beta1OperationMetadataState::Cancelled => "CANCELLED",
                GoogleCloudVisionV1P3Beta1OperationMetadataState::Created => "CREATED",
                GoogleCloudVisionV1P3Beta1OperationMetadataState::Done => "DONE",
                GoogleCloudVisionV1P3Beta1OperationMetadataState::Running => "RUNNING",
                GoogleCloudVisionV1P3Beta1OperationMetadataState::StateUnspecified => {
                    "STATE_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P3Beta1OperationMetadataState {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P3Beta1OperationMetadataState {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P3Beta1OperationMetadataState, ()> {
            Ok(match s {
                "CANCELLED" => GoogleCloudVisionV1P3Beta1OperationMetadataState::Cancelled,
                "CREATED" => GoogleCloudVisionV1P3Beta1OperationMetadataState::Created,
                "DONE" => GoogleCloudVisionV1P3Beta1OperationMetadataState::Done,
                "RUNNING" => GoogleCloudVisionV1P3Beta1OperationMetadataState::Running,
                "STATE_UNSPECIFIED" => {
                    GoogleCloudVisionV1P3Beta1OperationMetadataState::StateUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P3Beta1OperationMetadataState {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P3Beta1OperationMetadataState {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P3Beta1OperationMetadataState {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CANCELLED" => GoogleCloudVisionV1P3Beta1OperationMetadataState::Cancelled,
                "CREATED" => GoogleCloudVisionV1P3Beta1OperationMetadataState::Created,
                "DONE" => GoogleCloudVisionV1P3Beta1OperationMetadataState::Done,
                "RUNNING" => GoogleCloudVisionV1P3Beta1OperationMetadataState::Running,
                "STATE_UNSPECIFIED" => {
                    GoogleCloudVisionV1P3Beta1OperationMetadataState::StateUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1OperationMetadataState {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1OperationMetadataState {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1OutputConfig {
        #[doc = "The max number of response protos to put into each output JSON file on Google Cloud Storage. The valid range is \\[1, 100\\]. If not specified, the default value is 20. For example, for one pdf file with 100 pages, 100 response protos will be generated. If `batch_size` = 20, then 5 json files each containing 20 response protos will be written under the prefix `gcs_destination`.`uri`. Currently, batch_size only applies to GcsDestination, with potential future support for other output configurations."]
        #[serde(
            rename = "batchSize",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub batch_size: ::std::option::Option<i32>,
        #[doc = "The Google Cloud Storage location to write the output(s) to."]
        #[serde(
            rename = "gcsDestination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub gcs_destination:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P3Beta1GcsDestination>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1OutputConfig {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1OutputConfig {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1Page {
        #[doc = "List of blocks of text, images etc on this page."]
        #[serde(
            rename = "blocks",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub blocks: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P3Beta1Block>>,
        #[doc = "Confidence of the OCR results on the page. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels."]
        #[serde(
            rename = "height",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub height: ::std::option::Option<i32>,
        #[doc = "Additional information detected on the page."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P3Beta1TextAnnotationTextProperty,
        >,
        #[doc = "Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels."]
        #[serde(
            rename = "width",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub width: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1Page {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1Page {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1Paragraph {
        #[doc = "The bounding box for the paragraph. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the ‘natural’ orientation. For example: * when the text is horizontal it might look like: 0––1 | | 3––2 * when it’s rotated 180 degrees around the top-left corner it becomes: 2––3 | | 1––0 and the vertex order will still be (0, 1, 2, 3)."]
        #[serde(
            rename = "boundingBox",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_box:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P3Beta1BoundingPoly>,
        #[doc = "Confidence of the OCR results for the paragraph. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Additional information detected for the paragraph."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P3Beta1TextAnnotationTextProperty,
        >,
        #[doc = "List of all words in this paragraph."]
        #[serde(
            rename = "words",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub words: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P3Beta1Word>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1Paragraph {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1Paragraph {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1Position {
        #[doc = "X coordinate."]
        #[serde(
            rename = "x",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub x: ::std::option::Option<f32>,
        #[doc = "Y coordinate."]
        #[serde(
            rename = "y",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub y: ::std::option::Option<f32>,
        #[doc = "Z coordinate (or depth)."]
        #[serde(
            rename = "z",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub z: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1Position {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1Position {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1Product {
        #[doc = "User-provided metadata to be stored with this product. Must be at most 4096 characters long."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Immutable. The category for the product identified by the reference image. This should be one of “homegoods-v2”, “apparel-v2”, “toys-v2”, “packagedgoods-v1” or “general-v1”. The legacy categories “homegoods”, “apparel”, and “toys” are still supported, but these should not be used for new products."]
        #[serde(
            rename = "productCategory",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product_category: ::std::option::Option<String>,
        #[doc = "Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. “1199”. Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet."]
        #[serde(
            rename = "productLabels",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product_labels:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P3Beta1ProductKeyValue>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1Product {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1Product {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1ProductKeyValue {
        #[doc = "The key of the label attached to the product. Cannot be empty and cannot exceed 128 bytes."]
        #[serde(
            rename = "key",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub key: ::std::option::Option<String>,
        #[doc = "The value of the label attached to the product. Cannot be empty and cannot exceed 128 bytes."]
        #[serde(
            rename = "value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub value: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1ProductKeyValue {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1ProductKeyValue {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1ProductSearchResults {
        #[doc = "Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current results."]
        #[serde(
            rename = "indexTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub index_time: ::std::option::Option<String>,
        #[doc = "List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to that region. There may be duplicate product matches in the union of all the per-product results."]
        #[serde(
            rename = "productGroupedResults",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product_grouped_results: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P3Beta1ProductSearchResultsGroupedResult>,
        >,
        #[doc = "List of results, one for each product match."]
        #[serde(
            rename = "results",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub results: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P3Beta1ProductSearchResultsResult>,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1ProductSearchResults {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1ProductSearchResults {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1ProductSearchResultsGroupedResult {
        #[doc = "The bounding polygon around the product detected in the query image."]
        #[serde(
            rename = "boundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_poly:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P3Beta1BoundingPoly>,
        #[doc = "List of generic predictions for the object in the bounding box."]
        #[serde(
            rename = "objectAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub object_annotations: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P3Beta1ProductSearchResultsObjectAnnotation>,
        >,
        #[doc = "List of results, one for each product match."]
        #[serde(
            rename = "results",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub results: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P3Beta1ProductSearchResultsResult>,
        >,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P3Beta1ProductSearchResultsGroupedResult
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P3Beta1ProductSearchResultsGroupedResult
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1ProductSearchResultsObjectAnnotation {
        #[doc = "The BCP-47 language code, such as “en-US” or “sr-Latn”. For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."]
        #[serde(
            rename = "languageCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language_code: ::std::option::Option<String>,
        #[doc = "Object ID that should align with EntityAnnotation mid."]
        #[serde(
            rename = "mid",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mid: ::std::option::Option<String>,
        #[doc = "Object name, expressed in its `language_code` language."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Score of the result. Range \\[0, 1\\]."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P3Beta1ProductSearchResultsObjectAnnotation
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P3Beta1ProductSearchResultsObjectAnnotation
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1ProductSearchResultsResult {
        #[doc = "The resource name of the image from the product that is the closest match to the query."]
        #[serde(
            rename = "image",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub image: ::std::option::Option<String>,
        #[doc = "The Product."]
        #[serde(
            rename = "product",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product: ::std::option::Option<crate::schemas::GoogleCloudVisionV1P3Beta1Product>,
        #[doc = "A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence)."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P3Beta1ProductSearchResultsResult
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1ProductSearchResultsResult {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1Property {
        #[doc = "Name of the property."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Value of numeric properties."]
        #[serde(
            rename = "uint64Value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub uint_64_value: ::std::option::Option<u64>,
        #[doc = "Value of the property."]
        #[serde(
            rename = "value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub value: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1Property {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1Property {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1ReferenceImage {
        #[doc = "Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not)."]
        #[serde(
            rename = "boundingPolys",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_polys:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P3Beta1BoundingPoly>>,
        #[doc = "The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a reference image."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Required. The Google Cloud Storage URI of the reference image. The URI must start with `gs://`."]
        #[serde(
            rename = "uri",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub uri: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1ReferenceImage {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1ReferenceImage {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1SafeSearchAnnotation {
        #[doc = "Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities."]
        #[serde(
            rename = "adult",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub adult: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult,
        >,
        #[doc = "Likelihood that this is a medical image."]
        #[serde(
            rename = "medical",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub medical: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical,
        >,
        #[doc = "Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative poses, or close-ups of sensitive body areas."]
        #[serde(
            rename = "racy",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub racy: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy,
        >,
        #[doc = "Spoof likelihood. The likelihood that an modification was made to the image’s canonical version to make it appear funny or offensive."]
        #[serde(
            rename = "spoof",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub spoof: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof,
        >,
        #[doc = "Likelihood that this image contains violent content."]
        #[serde(
            rename = "violence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub violence: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1SafeSearchAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1SafeSearchAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult::Likely => "LIKELY",
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult::Possible => "POSSIBLE",
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult::VeryLikely => "VERY_LIKELY",
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationAdult {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical::Likely => "LIKELY",
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical::Possible => "POSSIBLE",
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical::VeryLikely => "VERY_LIKELY",
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationMedical
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy::Likely => "LIKELY",
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy::Possible => "POSSIBLE",
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy::VeryLikely => "VERY_LIKELY",
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy::VeryUnlikely => "VERY_UNLIKELY",
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy, ()> {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy::VeryLikely,
                "VERY_UNLIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy::VeryUnlikely,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy::VeryLikely,
                "VERY_UNLIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy::VeryUnlikely,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationRacy {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof::Likely => "LIKELY",
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof::Possible => "POSSIBLE",
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof::VeryLikely => "VERY_LIKELY",
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationSpoof {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence::Likely => "LIKELY",
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence::Possible => "POSSIBLE",
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence::VeryLikely => "VERY_LIKELY",
                GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P3Beta1SafeSearchAnnotationViolence
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1Symbol {
        #[doc = "The bounding box for the symbol. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the ‘natural’ orientation. For example: * when the text is horizontal it might look like: 0––1 | | 3––2 * when it’s rotated 180 degrees around the top-left corner it becomes: 2––3 | | 1––0 and the vertex order will still be (0, 1, 2, 3)."]
        #[serde(
            rename = "boundingBox",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_box:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P3Beta1BoundingPoly>,
        #[doc = "Confidence of the OCR results for the symbol. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Additional information detected for the symbol."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P3Beta1TextAnnotationTextProperty,
        >,
        #[doc = "The actual UTF-8 representation of the symbol."]
        #[serde(
            rename = "text",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub text: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1Symbol {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1Symbol {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1TextAnnotation {
        #[doc = "List of pages detected by OCR."]
        #[serde(
            rename = "pages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pages: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P3Beta1Page>>,
        #[doc = "UTF-8 text detected on the pages."]
        #[serde(
            rename = "text",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub text: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1TextAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1TextAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreak {
        #[doc = "True if break prepends the element."]
        #[serde(
            rename = "isPrefix",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_prefix: ::std::option::Option<bool>,
        #[doc = "Detected break type."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType,
        >,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreak
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreak
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType {
        #[doc = "Line-wrapping break."]
        EolSureSpace,
        #[doc = "End-line hyphen that is not present in text; does not co-occur with `SPACE`, `LEADER_SPACE`, or `LINE_BREAK`."]
        Hyphen,
        #[doc = "Line break that ends a paragraph."]
        LineBreak,
        #[doc = "Regular space."]
        Space,
        #[doc = "Sure space (very wide)."]
        SureSpace,
        #[doc = "Unknown break label type."]
        Unknown,
    }
    impl GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType::EolSureSpace => {
                    "EOL_SURE_SPACE"
                }
                GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType::Hyphen => "HYPHEN",
                GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType::LineBreak => {
                    "LINE_BREAK"
                }
                GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType::Space => "SPACE",
                GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType::SureSpace => {
                    "SURE_SPACE"
                }
                GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType::Unknown => "UNKNOWN",
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType, ()>
        {
            Ok(match s {
                "EOL_SURE_SPACE" => {
                    GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType::EolSureSpace
                }
                "HYPHEN" => GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType::Hyphen,
                "LINE_BREAK" => {
                    GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType::LineBreak
                }
                "SPACE" => GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType::Space,
                "SURE_SPACE" => {
                    GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType::SureSpace
                }
                "UNKNOWN" => GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType::Unknown,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "EOL_SURE_SPACE" => {
                    GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType::EolSureSpace
                }
                "HYPHEN" => GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType::Hyphen,
                "LINE_BREAK" => {
                    GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType::LineBreak
                }
                "SPACE" => GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType::Space,
                "SURE_SPACE" => {
                    GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType::SureSpace
                }
                "UNKNOWN" => GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType::Unknown,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreakType
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1TextAnnotationDetectedLanguage {
        #[doc = "Confidence of detected language. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "The BCP-47 language code, such as “en-US” or “sr-Latn”. For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."]
        #[serde(
            rename = "languageCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language_code: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P3Beta1TextAnnotationDetectedLanguage
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P3Beta1TextAnnotationDetectedLanguage
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1TextAnnotationTextProperty {
        #[doc = "Detected start or end of a text segment."]
        #[serde(
            rename = "detectedBreak",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub detected_break: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P3Beta1TextAnnotationDetectedBreak,
        >,
        #[doc = "A list of detected languages together with confidence."]
        #[serde(
            rename = "detectedLanguages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub detected_languages: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P3Beta1TextAnnotationDetectedLanguage>,
        >,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P3Beta1TextAnnotationTextProperty
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1TextAnnotationTextProperty {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1Vertex {
        #[doc = "X coordinate."]
        #[serde(
            rename = "x",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub x: ::std::option::Option<i32>,
        #[doc = "Y coordinate."]
        #[serde(
            rename = "y",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub y: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1Vertex {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1Vertex {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1WebDetection {
        #[doc = "The service’s best guess as to the topic of the request image. Inferred from similar images on the open web."]
        #[serde(
            rename = "bestGuessLabels",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub best_guess_labels: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P3Beta1WebDetectionWebLabel>,
        >,
        #[doc = "Fully matching images from the Internet. Can include resized copies of the query image."]
        #[serde(
            rename = "fullMatchingImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub full_matching_images: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P3Beta1WebDetectionWebImage>,
        >,
        #[doc = "Web pages containing the matching images from the Internet."]
        #[serde(
            rename = "pagesWithMatchingImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pages_with_matching_images: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P3Beta1WebDetectionWebPage>,
        >,
        #[doc = "Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops."]
        #[serde(
            rename = "partialMatchingImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub partial_matching_images: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P3Beta1WebDetectionWebImage>,
        >,
        #[doc = "The visually similar image results."]
        #[serde(
            rename = "visuallySimilarImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visually_similar_images: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P3Beta1WebDetectionWebImage>,
        >,
        #[doc = "Deduced entities from similar images on the Internet."]
        #[serde(
            rename = "webEntities",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub web_entities: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P3Beta1WebDetectionWebEntity>,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1WebDetection {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1WebDetection {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1WebDetectionWebEntity {
        #[doc = "Canonical description of the entity, in English."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "Opaque entity ID."]
        #[serde(
            rename = "entityId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub entity_id: ::std::option::Option<String>,
        #[doc = "Overall relevancy score for the entity. Not normalized and not comparable across different image queries."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1WebDetectionWebEntity {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1WebDetectionWebEntity {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1WebDetectionWebImage {
        #[doc = "(Deprecated) Overall relevancy score for the image."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
        #[doc = "The result image URL."]
        #[serde(
            rename = "url",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1WebDetectionWebImage {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1WebDetectionWebImage {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1WebDetectionWebLabel {
        #[doc = "Label for extra metadata."]
        #[serde(
            rename = "label",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub label: ::std::option::Option<String>,
        #[doc = "The BCP-47 language code for `label`, such as “en-US” or “sr-Latn”. For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."]
        #[serde(
            rename = "languageCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language_code: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1WebDetectionWebLabel {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1WebDetectionWebLabel {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1WebDetectionWebPage {
        #[doc = "Fully matching images on the page. Can include resized copies of the query image."]
        #[serde(
            rename = "fullMatchingImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub full_matching_images: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P3Beta1WebDetectionWebImage>,
        >,
        #[doc = "Title for the web page, may contain HTML markups."]
        #[serde(
            rename = "pageTitle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_title: ::std::option::Option<String>,
        #[doc = "Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops."]
        #[serde(
            rename = "partialMatchingImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub partial_matching_images: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P3Beta1WebDetectionWebImage>,
        >,
        #[doc = "(Deprecated) Overall relevancy score for the web page."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
        #[doc = "The result web page URL."]
        #[serde(
            rename = "url",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1WebDetectionWebPage {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1WebDetectionWebPage {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P3Beta1Word {
        #[doc = "The bounding box for the word. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the ‘natural’ orientation. For example: * when the text is horizontal it might look like: 0––1 | | 3––2 * when it’s rotated 180 degrees around the top-left corner it becomes: 2––3 | | 1––0 and the vertex order will still be (0, 1, 2, 3)."]
        #[serde(
            rename = "boundingBox",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_box:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P3Beta1BoundingPoly>,
        #[doc = "Confidence of the OCR results for the word. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Additional information detected for the word."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P3Beta1TextAnnotationTextProperty,
        >,
        #[doc = "List of symbols in the word. The order of the symbols follows the natural reading order."]
        #[serde(
            rename = "symbols",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub symbols: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P3Beta1Symbol>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P3Beta1Word {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P3Beta1Word {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct GoogleCloudVisionV1P4Beta1AnnotateFileResponse {
        #[doc = "If set, represents the error message for the failed request. The `responses` field will not be set in this case."]
        #[serde(
            rename = "error",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub error: ::std::option::Option<crate::schemas::Status>,
        #[doc = "Information about the file for which this response is generated."]
        #[serde(
            rename = "inputConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub input_config:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1InputConfig>,
        #[doc = "Individual responses to images found within the file. This field will be empty if the `error` field is set."]
        #[serde(
            rename = "responses",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub responses: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P4Beta1AnnotateImageResponse>,
        >,
        #[doc = "This field gives the total number of pages in the file."]
        #[serde(
            rename = "totalPages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub total_pages: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1AnnotateFileResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1AnnotateFileResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct GoogleCloudVisionV1P4Beta1AnnotateImageResponse {
        #[doc = "If present, contextual information is needed to understand where this image comes from."]
        #[serde(
            rename = "context",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub context:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1ImageAnnotationContext>,
        #[doc = "If present, crop hints have completed successfully."]
        #[serde(
            rename = "cropHintsAnnotation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub crop_hints_annotation:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1CropHintsAnnotation>,
        #[doc = "If set, represents the error message for the operation. Note that filled-in image annotations are guaranteed to be correct, even when `error` is set."]
        #[serde(
            rename = "error",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub error: ::std::option::Option<crate::schemas::Status>,
        #[doc = "If present, face detection has completed successfully."]
        #[serde(
            rename = "faceAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub face_annotations:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P4Beta1FaceAnnotation>>,
        #[doc = "If present, text (OCR) detection or document (OCR) text detection has completed successfully. This annotation provides the structural hierarchy for the OCR detected text."]
        #[serde(
            rename = "fullTextAnnotation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub full_text_annotation:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1TextAnnotation>,
        #[doc = "If present, image properties were extracted successfully."]
        #[serde(
            rename = "imagePropertiesAnnotation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub image_properties_annotation:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1ImageProperties>,
        #[doc = "If present, label detection has completed successfully."]
        #[serde(
            rename = "labelAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub label_annotations:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P4Beta1EntityAnnotation>>,
        #[doc = "If present, landmark detection has completed successfully."]
        #[serde(
            rename = "landmarkAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub landmark_annotations:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P4Beta1EntityAnnotation>>,
        #[doc = "If present, localized object detection has completed successfully. This will be sorted descending by confidence score."]
        #[serde(
            rename = "localizedObjectAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub localized_object_annotations: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P4Beta1LocalizedObjectAnnotation>,
        >,
        #[doc = "If present, logo detection has completed successfully."]
        #[serde(
            rename = "logoAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub logo_annotations:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P4Beta1EntityAnnotation>>,
        #[doc = "If present, product search has completed successfully."]
        #[serde(
            rename = "productSearchResults",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product_search_results:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1ProductSearchResults>,
        #[doc = "If present, safe-search annotation has completed successfully."]
        #[serde(
            rename = "safeSearchAnnotation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub safe_search_annotation:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1SafeSearchAnnotation>,
        #[doc = "If present, text (OCR) detection has completed successfully."]
        #[serde(
            rename = "textAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub text_annotations:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P4Beta1EntityAnnotation>>,
        #[doc = "If present, web detection has completed successfully."]
        #[serde(
            rename = "webDetection",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub web_detection:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1WebDetection>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1AnnotateImageResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1AnnotateImageResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1AsyncAnnotateFileResponse {
        #[doc = "The output location and metadata from AsyncAnnotateFileRequest."]
        #[serde(
            rename = "outputConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub output_config:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1OutputConfig>,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P4Beta1AsyncAnnotateFileResponse
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1AsyncAnnotateFileResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1AsyncBatchAnnotateFilesResponse {
        #[doc = "The list of file annotation responses, one for each request in AsyncBatchAnnotateFilesRequest."]
        #[serde(
            rename = "responses",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub responses: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P4Beta1AsyncAnnotateFileResponse>,
        >,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P4Beta1AsyncBatchAnnotateFilesResponse
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P4Beta1AsyncBatchAnnotateFilesResponse
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1AsyncBatchAnnotateImagesResponse {
        #[doc = "The output location and metadata from AsyncBatchAnnotateImagesRequest."]
        #[serde(
            rename = "outputConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub output_config:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1OutputConfig>,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P4Beta1AsyncBatchAnnotateImagesResponse
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P4Beta1AsyncBatchAnnotateImagesResponse
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct GoogleCloudVisionV1P4Beta1BatchAnnotateFilesResponse {
        #[doc = "The list of file annotation responses, each response corresponding to each AnnotateFileRequest in BatchAnnotateFilesRequest."]
        #[serde(
            rename = "responses",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub responses: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P4Beta1AnnotateFileResponse>,
        >,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P4Beta1BatchAnnotateFilesResponse
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1BatchAnnotateFilesResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1BatchOperationMetadata {
        #[doc = "The time when the batch request is finished and google.longrunning.Operation.done is set to true."]
        #[serde(
            rename = "endTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub end_time: ::std::option::Option<String>,
        #[doc = "The current state of the batch operation."]
        #[serde(
            rename = "state",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub state: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P4Beta1BatchOperationMetadataState,
        >,
        #[doc = "The time when the batch request was submitted to the server."]
        #[serde(
            rename = "submitTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub submit_time: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1BatchOperationMetadata {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1BatchOperationMetadata {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P4Beta1BatchOperationMetadataState {
        #[doc = "The request is done after the longrunning.Operations.CancelOperation has been called by the user. Any records that were processed before the cancel command are output as specified in the request."]
        Cancelled,
        #[doc = "The request is done and no item has been successfully processed."]
        Failed,
        #[doc = "Request is actively being processed."]
        Processing,
        #[doc = "Invalid."]
        StateUnspecified,
        #[doc = "The request is done and at least one item has been successfully processed."]
        Successful,
    }
    impl GoogleCloudVisionV1P4Beta1BatchOperationMetadataState {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P4Beta1BatchOperationMetadataState::Cancelled => "CANCELLED",
                GoogleCloudVisionV1P4Beta1BatchOperationMetadataState::Failed => "FAILED",
                GoogleCloudVisionV1P4Beta1BatchOperationMetadataState::Processing => "PROCESSING",
                GoogleCloudVisionV1P4Beta1BatchOperationMetadataState::StateUnspecified => {
                    "STATE_UNSPECIFIED"
                }
                GoogleCloudVisionV1P4Beta1BatchOperationMetadataState::Successful => "SUCCESSFUL",
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P4Beta1BatchOperationMetadataState {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P4Beta1BatchOperationMetadataState {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P4Beta1BatchOperationMetadataState, ()>
        {
            Ok(match s {
                "CANCELLED" => GoogleCloudVisionV1P4Beta1BatchOperationMetadataState::Cancelled,
                "FAILED" => GoogleCloudVisionV1P4Beta1BatchOperationMetadataState::Failed,
                "PROCESSING" => GoogleCloudVisionV1P4Beta1BatchOperationMetadataState::Processing,
                "STATE_UNSPECIFIED" => {
                    GoogleCloudVisionV1P4Beta1BatchOperationMetadataState::StateUnspecified
                }
                "SUCCESSFUL" => GoogleCloudVisionV1P4Beta1BatchOperationMetadataState::Successful,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P4Beta1BatchOperationMetadataState {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P4Beta1BatchOperationMetadataState {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P4Beta1BatchOperationMetadataState {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CANCELLED" => GoogleCloudVisionV1P4Beta1BatchOperationMetadataState::Cancelled,
                "FAILED" => GoogleCloudVisionV1P4Beta1BatchOperationMetadataState::Failed,
                "PROCESSING" => GoogleCloudVisionV1P4Beta1BatchOperationMetadataState::Processing,
                "STATE_UNSPECIFIED" => {
                    GoogleCloudVisionV1P4Beta1BatchOperationMetadataState::StateUnspecified
                }
                "SUCCESSFUL" => GoogleCloudVisionV1P4Beta1BatchOperationMetadataState::Successful,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P4Beta1BatchOperationMetadataState
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P4Beta1BatchOperationMetadataState
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1Block {
        #[doc = "Detected block type (text, image etc) for this block."]
        #[serde(
            rename = "blockType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub block_type:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1BlockBlockType>,
        #[doc = "The bounding box for the block. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the ‘natural’ orientation. For example: * when the text is horizontal it might look like: 0––1 | | 3––2 * when it’s rotated 180 degrees around the top-left corner it becomes: 2––3 | | 1––0 and the vertex order will still be (0, 1, 2, 3)."]
        #[serde(
            rename = "boundingBox",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_box:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1BoundingPoly>,
        #[doc = "Confidence of the OCR results on the block. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "List of paragraphs in this block (if this blocks is of type text)."]
        #[serde(
            rename = "paragraphs",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub paragraphs:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P4Beta1Paragraph>>,
        #[doc = "Additional information detected for the block."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P4Beta1TextAnnotationTextProperty,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1Block {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1Block {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P4Beta1BlockBlockType {
        #[doc = "Barcode block."]
        Barcode,
        #[doc = "Image block."]
        Picture,
        #[doc = "Horizontal/vertical line box."]
        Ruler,
        #[doc = "Table block."]
        Table,
        #[doc = "Regular text block."]
        Text,
        #[doc = "Unknown block type."]
        Unknown,
    }
    impl GoogleCloudVisionV1P4Beta1BlockBlockType {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P4Beta1BlockBlockType::Barcode => "BARCODE",
                GoogleCloudVisionV1P4Beta1BlockBlockType::Picture => "PICTURE",
                GoogleCloudVisionV1P4Beta1BlockBlockType::Ruler => "RULER",
                GoogleCloudVisionV1P4Beta1BlockBlockType::Table => "TABLE",
                GoogleCloudVisionV1P4Beta1BlockBlockType::Text => "TEXT",
                GoogleCloudVisionV1P4Beta1BlockBlockType::Unknown => "UNKNOWN",
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P4Beta1BlockBlockType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P4Beta1BlockBlockType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P4Beta1BlockBlockType, ()> {
            Ok(match s {
                "BARCODE" => GoogleCloudVisionV1P4Beta1BlockBlockType::Barcode,
                "PICTURE" => GoogleCloudVisionV1P4Beta1BlockBlockType::Picture,
                "RULER" => GoogleCloudVisionV1P4Beta1BlockBlockType::Ruler,
                "TABLE" => GoogleCloudVisionV1P4Beta1BlockBlockType::Table,
                "TEXT" => GoogleCloudVisionV1P4Beta1BlockBlockType::Text,
                "UNKNOWN" => GoogleCloudVisionV1P4Beta1BlockBlockType::Unknown,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P4Beta1BlockBlockType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P4Beta1BlockBlockType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P4Beta1BlockBlockType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "BARCODE" => GoogleCloudVisionV1P4Beta1BlockBlockType::Barcode,
                "PICTURE" => GoogleCloudVisionV1P4Beta1BlockBlockType::Picture,
                "RULER" => GoogleCloudVisionV1P4Beta1BlockBlockType::Ruler,
                "TABLE" => GoogleCloudVisionV1P4Beta1BlockBlockType::Table,
                "TEXT" => GoogleCloudVisionV1P4Beta1BlockBlockType::Text,
                "UNKNOWN" => GoogleCloudVisionV1P4Beta1BlockBlockType::Unknown,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1BlockBlockType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1BlockBlockType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1BoundingPoly {
        #[doc = "The bounding polygon normalized vertices."]
        #[serde(
            rename = "normalizedVertices",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub normalized_vertices:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P4Beta1NormalizedVertex>>,
        #[doc = "The bounding polygon vertices."]
        #[serde(
            rename = "vertices",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub vertices: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P4Beta1Vertex>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1BoundingPoly {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1BoundingPoly {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1Celebrity {
        #[doc = "The Celebrity’s description."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "The Celebrity’s display name."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "The resource name of the preloaded Celebrity. Has the format `builtin/{mid}`."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1Celebrity {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1Celebrity {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1ColorInfo {
        #[doc = "RGB components of the color."]
        #[serde(
            rename = "color",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub color: ::std::option::Option<crate::schemas::Color>,
        #[doc = "The fraction of pixels the color occupies in the image. Value in range \\[0, 1\\]."]
        #[serde(
            rename = "pixelFraction",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pixel_fraction: ::std::option::Option<f32>,
        #[doc = "Image-specific score for this color. Value in range \\[0, 1\\]."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1ColorInfo {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1ColorInfo {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1CropHint {
        #[doc = "The bounding polygon for the crop region. The coordinates of the bounding box are in the original image’s scale."]
        #[serde(
            rename = "boundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_poly:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1BoundingPoly>,
        #[doc = "Confidence of this being a salient region. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Fraction of importance of this salient region with respect to the original image."]
        #[serde(
            rename = "importanceFraction",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub importance_fraction: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1CropHint {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1CropHint {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1CropHintsAnnotation {
        #[doc = "Crop hint results."]
        #[serde(
            rename = "cropHints",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub crop_hints:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P4Beta1CropHint>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1CropHintsAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1CropHintsAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1DominantColorsAnnotation {
        #[doc = "RGB color values with their score and pixel fraction."]
        #[serde(
            rename = "colors",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub colors: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P4Beta1ColorInfo>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1DominantColorsAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1DominantColorsAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1EntityAnnotation {
        #[doc = "Image region to which this entity belongs. Not produced for `LABEL_DETECTION` features."]
        #[serde(
            rename = "boundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_poly:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1BoundingPoly>,
        #[doc = "**Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the “Eiffel Tower” entity is detected, this field represents the confidence that there is a tower in the query image. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Entity textual description, expressed in its `locale` language."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "The language code for the locale in which the entity textual `description` is expressed."]
        #[serde(
            rename = "locale",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub locale: ::std::option::Option<String>,
        #[doc = "The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks."]
        #[serde(
            rename = "locations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub locations:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P4Beta1LocationInfo>>,
        #[doc = "Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/)."]
        #[serde(
            rename = "mid",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mid: ::std::option::Option<String>,
        #[doc = "Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity."]
        #[serde(
            rename = "properties",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub properties:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P4Beta1Property>>,
        #[doc = "Overall score of the result. Range \\[0, 1\\]."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
        #[doc = "The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of “tower” is likely higher to an image containing the detected “Eiffel Tower” than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range \\[0, 1\\]."]
        #[serde(
            rename = "topicality",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub topicality: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1EntityAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1EntityAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1FaceAnnotation {
        #[doc = "Anger likelihood."]
        #[serde(
            rename = "angerLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub anger_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood,
        >,
        #[doc = "Blurred likelihood."]
        #[serde(
            rename = "blurredLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub blurred_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood,
        >,
        #[doc = "The bounding polygon around the face. The coordinates of the bounding box are in the original image’s scale. The bounding box is computed to “frame” the face in accordance with human expectations. It is based on the landmarker results. Note that one or more x and/or y coordinates may not be generated in the `BoundingPoly` (the polygon will be unbounded) if only a partial face appears in the image to be annotated."]
        #[serde(
            rename = "boundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_poly:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1BoundingPoly>,
        #[doc = "Detection confidence. Range \\[0, 1\\]."]
        #[serde(
            rename = "detectionConfidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub detection_confidence: ::std::option::Option<f32>,
        #[doc = "The `fd_bounding_poly` bounding polygon is tighter than the `boundingPoly`, and encloses only the skin part of the face. Typically, it is used to eliminate the face from any image analysis that detects the “amount of skin” visible in an image. It is not based on the landmarker results, only on the initial face detection, hence the fd (face detection) prefix."]
        #[serde(
            rename = "fdBoundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub fd_bounding_poly:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1BoundingPoly>,
        #[doc = "Headwear likelihood."]
        #[serde(
            rename = "headwearLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub headwear_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood,
        >,
        #[doc = "Joy likelihood."]
        #[serde(
            rename = "joyLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub joy_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood,
        >,
        #[doc = "Face landmarking confidence. Range \\[0, 1\\]."]
        #[serde(
            rename = "landmarkingConfidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub landmarking_confidence: ::std::option::Option<f32>,
        #[doc = "Detected face landmarks."]
        #[serde(
            rename = "landmarks",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub landmarks: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P4Beta1FaceAnnotationLandmark>,
        >,
        #[doc = "Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range \\[-180,180\\]."]
        #[serde(
            rename = "panAngle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pan_angle: ::std::option::Option<f32>,
        #[doc = "Additional recognition information. Only computed if image_context.face_recognition_params is provided, **and** a match is found to a Celebrity in the input CelebritySet. This field is sorted in order of decreasing confidence values."]
        #[serde(
            rename = "recognitionResult",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub recognition_result: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P4Beta1FaceRecognitionResult>,
        >,
        #[doc = "Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range \\[-180,180\\]."]
        #[serde(
            rename = "rollAngle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub roll_angle: ::std::option::Option<f32>,
        #[doc = "Sorrow likelihood."]
        #[serde(
            rename = "sorrowLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub sorrow_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood,
        >,
        #[doc = "Surprise likelihood."]
        #[serde(
            rename = "surpriseLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub surprise_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood,
        >,
        #[doc = "Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image’s horizontal plane. Range \\[-180,180\\]."]
        #[serde(
            rename = "tiltAngle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tilt_angle: ::std::option::Option<f32>,
        #[doc = "Under-exposed likelihood."]
        #[serde(
            rename = "underExposedLikelihood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub under_exposed_likelihood: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1FaceAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1FaceAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood::Possible => "POSSIBLE",
                GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood::VeryLikely => {
                    "VERY_LIKELY"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P4Beta1FaceAnnotationAngerLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood::Possible => "POSSIBLE",
                GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood::VeryLikely => {
                    "VERY_LIKELY"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P4Beta1FaceAnnotationBlurredLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood::Possible => "POSSIBLE",
                GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood::VeryLikely => {
                    "VERY_LIKELY"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P4Beta1FaceAnnotationHeadwearLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood::Possible => "POSSIBLE",
                GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood::VeryLikely => "VERY_LIKELY",
                GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P4Beta1FaceAnnotationJoyLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood::Possible => "POSSIBLE",
                GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood::VeryLikely => {
                    "VERY_LIKELY"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P4Beta1FaceAnnotationSorrowLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood::Possible => "POSSIBLE",
                GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood::VeryLikely => {
                    "VERY_LIKELY"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood::Unlikely,
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P4Beta1FaceAnnotationSurpriseLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood::Likely => "LIKELY",
                GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood::Possible => {
                    "POSSIBLE"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood::Unknown => {
                    "UNKNOWN"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood::Unlikely => {
                    "UNLIKELY"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood::VeryLikely => {
                    "VERY_LIKELY"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood::Likely,
                "POSSIBLE" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood::Possible
                }
                "UNKNOWN" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood::Unknown
                }
                "UNLIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood::Unlikely
                }
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de>
        for GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood
    {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood::Likely,
                "POSSIBLE" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood::Possible
                }
                "UNKNOWN" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood::Unknown
                }
                "UNLIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood::Unlikely
                }
                "VERY_LIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood::VeryLikely
                }
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P4Beta1FaceAnnotationUnderExposedLikelihood
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1FaceAnnotationLandmark {
        #[doc = "Face landmark position."]
        #[serde(
            rename = "position",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub position: ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1Position>,
        #[doc = "Face landmark type."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1FaceAnnotationLandmark {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1FaceAnnotationLandmark {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType {
        #[doc = "Chin gnathion."]
        ChinGnathion,
        #[doc = "Chin left gonion."]
        ChinLeftGonion,
        #[doc = "Chin right gonion."]
        ChinRightGonion,
        #[doc = "Forehead glabella."]
        ForeheadGlabella,
        #[doc = "Left cheek center."]
        LeftCheekCenter,
        #[doc = "Left ear tragion."]
        LeftEarTragion,
        #[doc = "Left eye."]
        LeftEye,
        #[doc = "Left eye, bottom boundary."]
        LeftEyeBottomBoundary,
        #[doc = "Left eye, left corner."]
        LeftEyeLeftCorner,
        #[doc = "Left eye pupil."]
        LeftEyePupil,
        #[doc = "Left eye, right corner."]
        LeftEyeRightCorner,
        #[doc = "Left eye, top boundary."]
        LeftEyeTopBoundary,
        #[doc = "Left eyebrow, upper midpoint."]
        LeftEyebrowUpperMidpoint,
        #[doc = "Left of left eyebrow."]
        LeftOfLeftEyebrow,
        #[doc = "Left of right eyebrow."]
        LeftOfRightEyebrow,
        #[doc = "Lower lip."]
        LowerLip,
        #[doc = "Midpoint between eyes."]
        MidpointBetweenEyes,
        #[doc = "Mouth center."]
        MouthCenter,
        #[doc = "Mouth left."]
        MouthLeft,
        #[doc = "Mouth right."]
        MouthRight,
        #[doc = "Nose, bottom center."]
        NoseBottomCenter,
        #[doc = "Nose, bottom left."]
        NoseBottomLeft,
        #[doc = "Nose, bottom right."]
        NoseBottomRight,
        #[doc = "Nose tip."]
        NoseTip,
        #[doc = "Right cheek center."]
        RightCheekCenter,
        #[doc = "Right ear tragion."]
        RightEarTragion,
        #[doc = "Right eye."]
        RightEye,
        #[doc = "Right eye, bottom boundary."]
        RightEyeBottomBoundary,
        #[doc = "Right eye, left corner."]
        RightEyeLeftCorner,
        #[doc = "Right eye pupil."]
        RightEyePupil,
        #[doc = "Right eye, right corner."]
        RightEyeRightCorner,
        #[doc = "Right eye, top boundary."]
        RightEyeTopBoundary,
        #[doc = "Right eyebrow, upper midpoint."]
        RightEyebrowUpperMidpoint,
        #[doc = "Right of left eyebrow."]
        RightOfLeftEyebrow,
        #[doc = "Right of right eyebrow."]
        RightOfRightEyebrow,
        #[doc = "Unknown face landmark detected. Should not be filled."]
        UnknownLandmark,
        #[doc = "Upper lip."]
        UpperLip,
    }
    impl GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::ChinGnathion => {
                    "CHIN_GNATHION"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::ChinLeftGonion => {
                    "CHIN_LEFT_GONION"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::ChinRightGonion => {
                    "CHIN_RIGHT_GONION"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::ForeheadGlabella => {
                    "FOREHEAD_GLABELLA"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftCheekCenter => {
                    "LEFT_CHEEK_CENTER"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftEarTragion => {
                    "LEFT_EAR_TRAGION"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftEye => "LEFT_EYE",
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftEyeBottomBoundary => {
                    "LEFT_EYE_BOTTOM_BOUNDARY"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftEyeLeftCorner => {
                    "LEFT_EYE_LEFT_CORNER"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftEyePupil => {
                    "LEFT_EYE_PUPIL"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftEyeRightCorner => {
                    "LEFT_EYE_RIGHT_CORNER"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftEyeTopBoundary => {
                    "LEFT_EYE_TOP_BOUNDARY"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftEyebrowUpperMidpoint => {
                    "LEFT_EYEBROW_UPPER_MIDPOINT"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftOfLeftEyebrow => {
                    "LEFT_OF_LEFT_EYEBROW"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftOfRightEyebrow => {
                    "LEFT_OF_RIGHT_EYEBROW"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LowerLip => "LOWER_LIP",
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::MidpointBetweenEyes => {
                    "MIDPOINT_BETWEEN_EYES"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::MouthCenter => "MOUTH_CENTER",
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::MouthLeft => "MOUTH_LEFT",
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::MouthRight => "MOUTH_RIGHT",
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::NoseBottomCenter => {
                    "NOSE_BOTTOM_CENTER"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::NoseBottomLeft => {
                    "NOSE_BOTTOM_LEFT"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::NoseBottomRight => {
                    "NOSE_BOTTOM_RIGHT"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::NoseTip => "NOSE_TIP",
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightCheekCenter => {
                    "RIGHT_CHEEK_CENTER"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightEarTragion => {
                    "RIGHT_EAR_TRAGION"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightEye => "RIGHT_EYE",
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightEyeBottomBoundary => {
                    "RIGHT_EYE_BOTTOM_BOUNDARY"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightEyeLeftCorner => {
                    "RIGHT_EYE_LEFT_CORNER"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightEyePupil => {
                    "RIGHT_EYE_PUPIL"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightEyeRightCorner => {
                    "RIGHT_EYE_RIGHT_CORNER"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightEyeTopBoundary => {
                    "RIGHT_EYE_TOP_BOUNDARY"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightEyebrowUpperMidpoint => {
                    "RIGHT_EYEBROW_UPPER_MIDPOINT"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightOfLeftEyebrow => {
                    "RIGHT_OF_LEFT_EYEBROW"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightOfRightEyebrow => {
                    "RIGHT_OF_RIGHT_EYEBROW"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::UnknownLandmark => {
                    "UNKNOWN_LANDMARK"
                }
                GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::UpperLip => "UPPER_LIP",
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType, ()>
        {
            Ok(match s {
                "CHIN_GNATHION" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::ChinGnathion
                }
                "CHIN_LEFT_GONION" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::ChinLeftGonion
                }
                "CHIN_RIGHT_GONION" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::ChinRightGonion
                }
                "FOREHEAD_GLABELLA" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::ForeheadGlabella
                }
                "LEFT_CHEEK_CENTER" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftCheekCenter
                }
                "LEFT_EAR_TRAGION" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftEarTragion
                }
                "LEFT_EYE" => GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftEye,
                "LEFT_EYE_BOTTOM_BOUNDARY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftEyeBottomBoundary
                }
                "LEFT_EYE_LEFT_CORNER" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftEyeLeftCorner
                }
                "LEFT_EYE_PUPIL" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftEyePupil
                }
                "LEFT_EYE_RIGHT_CORNER" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftEyeRightCorner
                }
                "LEFT_EYE_TOP_BOUNDARY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftEyeTopBoundary
                }
                "LEFT_EYEBROW_UPPER_MIDPOINT" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftEyebrowUpperMidpoint
                }
                "LEFT_OF_LEFT_EYEBROW" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftOfLeftEyebrow
                }
                "LEFT_OF_RIGHT_EYEBROW" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftOfRightEyebrow
                }
                "LOWER_LIP" => GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LowerLip,
                "MIDPOINT_BETWEEN_EYES" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::MidpointBetweenEyes
                }
                "MOUTH_CENTER" => GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::MouthCenter,
                "MOUTH_LEFT" => GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::MouthLeft,
                "MOUTH_RIGHT" => GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::MouthRight,
                "NOSE_BOTTOM_CENTER" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::NoseBottomCenter
                }
                "NOSE_BOTTOM_LEFT" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::NoseBottomLeft
                }
                "NOSE_BOTTOM_RIGHT" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::NoseBottomRight
                }
                "NOSE_TIP" => GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::NoseTip,
                "RIGHT_CHEEK_CENTER" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightCheekCenter
                }
                "RIGHT_EAR_TRAGION" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightEarTragion
                }
                "RIGHT_EYE" => GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightEye,
                "RIGHT_EYE_BOTTOM_BOUNDARY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightEyeBottomBoundary
                }
                "RIGHT_EYE_LEFT_CORNER" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightEyeLeftCorner
                }
                "RIGHT_EYE_PUPIL" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightEyePupil
                }
                "RIGHT_EYE_RIGHT_CORNER" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightEyeRightCorner
                }
                "RIGHT_EYE_TOP_BOUNDARY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightEyeTopBoundary
                }
                "RIGHT_EYEBROW_UPPER_MIDPOINT" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightEyebrowUpperMidpoint
                }
                "RIGHT_OF_LEFT_EYEBROW" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightOfLeftEyebrow
                }
                "RIGHT_OF_RIGHT_EYEBROW" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightOfRightEyebrow
                }
                "UNKNOWN_LANDMARK" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::UnknownLandmark
                }
                "UPPER_LIP" => GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::UpperLip,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CHIN_GNATHION" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::ChinGnathion
                }
                "CHIN_LEFT_GONION" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::ChinLeftGonion
                }
                "CHIN_RIGHT_GONION" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::ChinRightGonion
                }
                "FOREHEAD_GLABELLA" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::ForeheadGlabella
                }
                "LEFT_CHEEK_CENTER" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftCheekCenter
                }
                "LEFT_EAR_TRAGION" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftEarTragion
                }
                "LEFT_EYE" => GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftEye,
                "LEFT_EYE_BOTTOM_BOUNDARY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftEyeBottomBoundary
                }
                "LEFT_EYE_LEFT_CORNER" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftEyeLeftCorner
                }
                "LEFT_EYE_PUPIL" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftEyePupil
                }
                "LEFT_EYE_RIGHT_CORNER" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftEyeRightCorner
                }
                "LEFT_EYE_TOP_BOUNDARY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftEyeTopBoundary
                }
                "LEFT_EYEBROW_UPPER_MIDPOINT" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftEyebrowUpperMidpoint
                }
                "LEFT_OF_LEFT_EYEBROW" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftOfLeftEyebrow
                }
                "LEFT_OF_RIGHT_EYEBROW" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LeftOfRightEyebrow
                }
                "LOWER_LIP" => GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::LowerLip,
                "MIDPOINT_BETWEEN_EYES" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::MidpointBetweenEyes
                }
                "MOUTH_CENTER" => GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::MouthCenter,
                "MOUTH_LEFT" => GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::MouthLeft,
                "MOUTH_RIGHT" => GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::MouthRight,
                "NOSE_BOTTOM_CENTER" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::NoseBottomCenter
                }
                "NOSE_BOTTOM_LEFT" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::NoseBottomLeft
                }
                "NOSE_BOTTOM_RIGHT" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::NoseBottomRight
                }
                "NOSE_TIP" => GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::NoseTip,
                "RIGHT_CHEEK_CENTER" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightCheekCenter
                }
                "RIGHT_EAR_TRAGION" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightEarTragion
                }
                "RIGHT_EYE" => GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightEye,
                "RIGHT_EYE_BOTTOM_BOUNDARY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightEyeBottomBoundary
                }
                "RIGHT_EYE_LEFT_CORNER" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightEyeLeftCorner
                }
                "RIGHT_EYE_PUPIL" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightEyePupil
                }
                "RIGHT_EYE_RIGHT_CORNER" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightEyeRightCorner
                }
                "RIGHT_EYE_TOP_BOUNDARY" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightEyeTopBoundary
                }
                "RIGHT_EYEBROW_UPPER_MIDPOINT" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightEyebrowUpperMidpoint
                }
                "RIGHT_OF_LEFT_EYEBROW" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightOfLeftEyebrow
                }
                "RIGHT_OF_RIGHT_EYEBROW" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::RightOfRightEyebrow
                }
                "UNKNOWN_LANDMARK" => {
                    GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::UnknownLandmark
                }
                "UPPER_LIP" => GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType::UpperLip,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1FaceAnnotationLandmarkType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1FaceRecognitionResult {
        #[doc = "The Celebrity that this face was matched to."]
        #[serde(
            rename = "celebrity",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub celebrity: ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1Celebrity>,
        #[doc = "Recognition confidence. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1FaceRecognitionResult {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1FaceRecognitionResult {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1GcsDestination {
        #[doc = "Google Cloud Storage URI prefix where the results will be stored. Results will be in JSON format and preceded by its corresponding input URI prefix. This field can either represent a gcs file prefix or gcs directory. In either case, the uri should be unique because in order to get all of the output files, you will need to do a wildcard gcs search on the uri prefix you provide. Examples: * File Prefix: gs://bucket-name/here/filenameprefix The output files will be created in gs://bucket-name/here/ and the names of the output files will begin with “filenameprefix”. * Directory Prefix: gs://bucket-name/some/location/ The output files will be created in gs://bucket-name/some/location/ and the names of the output files could be anything because there was no filename prefix specified. If multiple outputs, each response is still AnnotateFileResponse, each of which contains some subset of the full list of AnnotateImageResponse. Multiple outputs can happen if, for example, the output JSON is too large and overflows into multiple sharded files."]
        #[serde(
            rename = "uri",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub uri: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1GcsDestination {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1GcsDestination {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1GcsSource {
        #[doc = "Google Cloud Storage URI for the input file. This must only be a Google Cloud Storage object. Wildcards are not currently supported."]
        #[serde(
            rename = "uri",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub uri: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1GcsSource {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1GcsSource {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1ImageAnnotationContext {
        #[doc = "If the file was a PDF or TIFF, this field gives the page number within the file used to produce the image."]
        #[serde(
            rename = "pageNumber",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_number: ::std::option::Option<i32>,
        #[doc = "The URI of the file used to produce the image."]
        #[serde(
            rename = "uri",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub uri: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1ImageAnnotationContext {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1ImageAnnotationContext {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1ImageProperties {
        #[doc = "If present, dominant colors completed successfully."]
        #[serde(
            rename = "dominantColors",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dominant_colors: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P4Beta1DominantColorsAnnotation,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1ImageProperties {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1ImageProperties {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct GoogleCloudVisionV1P4Beta1ImportProductSetsResponse {
        #[doc = "The list of reference_images that are imported successfully."]
        #[serde(
            rename = "referenceImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub reference_images:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P4Beta1ReferenceImage>>,
        #[doc = "The rpc status for each ImportProductSet request, including both successes and errors. The number of statuses here matches the number of lines in the csv file, and statuses\\[i\\] stores the success or failure status of processing the i-th line of the csv, starting from line 0."]
        #[serde(
            rename = "statuses",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub statuses: ::std::option::Option<Vec<crate::schemas::Status>>,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P4Beta1ImportProductSetsResponse
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1ImportProductSetsResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1InputConfig {
        #[doc = "File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently, this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests."]
        #[serde(
            rename = "content",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content: ::std::option::Option<::google_api_bytes::Bytes>,
        #[doc = "The Google Cloud Storage location to read the input from."]
        #[serde(
            rename = "gcsSource",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub gcs_source: ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1GcsSource>,
        #[doc = "The type of the file. Currently only “application/pdf”, “image/tiff” and “image/gif” are supported. Wildcards are not supported."]
        #[serde(
            rename = "mimeType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mime_type: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1InputConfig {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1InputConfig {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1LocalizedObjectAnnotation {
        #[doc = "Image region to which this object belongs. This must be populated."]
        #[serde(
            rename = "boundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_poly:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1BoundingPoly>,
        #[doc = "The BCP-47 language code, such as “en-US” or “sr-Latn”. For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."]
        #[serde(
            rename = "languageCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language_code: ::std::option::Option<String>,
        #[doc = "Object ID that should align with EntityAnnotation mid."]
        #[serde(
            rename = "mid",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mid: ::std::option::Option<String>,
        #[doc = "Object name, expressed in its `language_code` language."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Score of the result. Range \\[0, 1\\]."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P4Beta1LocalizedObjectAnnotation
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1LocalizedObjectAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1LocationInfo {
        #[doc = "lat/long location coordinates."]
        #[serde(
            rename = "latLng",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub lat_lng: ::std::option::Option<crate::schemas::LatLng>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1LocationInfo {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1LocationInfo {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1NormalizedVertex {
        #[doc = "X coordinate."]
        #[serde(
            rename = "x",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub x: ::std::option::Option<f32>,
        #[doc = "Y coordinate."]
        #[serde(
            rename = "y",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub y: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1NormalizedVertex {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1NormalizedVertex {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1OperationMetadata {
        #[doc = "The time when the batch request was received."]
        #[serde(
            rename = "createTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub create_time: ::std::option::Option<String>,
        #[doc = "Current state of the batch operation."]
        #[serde(
            rename = "state",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub state:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1OperationMetadataState>,
        #[doc = "The time when the operation result was last updated."]
        #[serde(
            rename = "updateTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub update_time: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1OperationMetadata {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1OperationMetadata {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P4Beta1OperationMetadataState {
        #[doc = "The batch processing was cancelled."]
        Cancelled,
        #[doc = "Request is received."]
        Created,
        #[doc = "The batch processing is done."]
        Done,
        #[doc = "Request is actively being processed."]
        Running,
        #[doc = "Invalid."]
        StateUnspecified,
    }
    impl GoogleCloudVisionV1P4Beta1OperationMetadataState {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P4Beta1OperationMetadataState::Cancelled => "CANCELLED",
                GoogleCloudVisionV1P4Beta1OperationMetadataState::Created => "CREATED",
                GoogleCloudVisionV1P4Beta1OperationMetadataState::Done => "DONE",
                GoogleCloudVisionV1P4Beta1OperationMetadataState::Running => "RUNNING",
                GoogleCloudVisionV1P4Beta1OperationMetadataState::StateUnspecified => {
                    "STATE_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P4Beta1OperationMetadataState {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P4Beta1OperationMetadataState {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P4Beta1OperationMetadataState, ()> {
            Ok(match s {
                "CANCELLED" => GoogleCloudVisionV1P4Beta1OperationMetadataState::Cancelled,
                "CREATED" => GoogleCloudVisionV1P4Beta1OperationMetadataState::Created,
                "DONE" => GoogleCloudVisionV1P4Beta1OperationMetadataState::Done,
                "RUNNING" => GoogleCloudVisionV1P4Beta1OperationMetadataState::Running,
                "STATE_UNSPECIFIED" => {
                    GoogleCloudVisionV1P4Beta1OperationMetadataState::StateUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P4Beta1OperationMetadataState {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P4Beta1OperationMetadataState {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P4Beta1OperationMetadataState {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CANCELLED" => GoogleCloudVisionV1P4Beta1OperationMetadataState::Cancelled,
                "CREATED" => GoogleCloudVisionV1P4Beta1OperationMetadataState::Created,
                "DONE" => GoogleCloudVisionV1P4Beta1OperationMetadataState::Done,
                "RUNNING" => GoogleCloudVisionV1P4Beta1OperationMetadataState::Running,
                "STATE_UNSPECIFIED" => {
                    GoogleCloudVisionV1P4Beta1OperationMetadataState::StateUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1OperationMetadataState {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1OperationMetadataState {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1OutputConfig {
        #[doc = "The max number of response protos to put into each output JSON file on Google Cloud Storage. The valid range is \\[1, 100\\]. If not specified, the default value is 20. For example, for one pdf file with 100 pages, 100 response protos will be generated. If `batch_size` = 20, then 5 json files each containing 20 response protos will be written under the prefix `gcs_destination`.`uri`. Currently, batch_size only applies to GcsDestination, with potential future support for other output configurations."]
        #[serde(
            rename = "batchSize",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub batch_size: ::std::option::Option<i32>,
        #[doc = "The Google Cloud Storage location to write the output(s) to."]
        #[serde(
            rename = "gcsDestination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub gcs_destination:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1GcsDestination>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1OutputConfig {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1OutputConfig {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1Page {
        #[doc = "List of blocks of text, images etc on this page."]
        #[serde(
            rename = "blocks",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub blocks: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P4Beta1Block>>,
        #[doc = "Confidence of the OCR results on the page. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels."]
        #[serde(
            rename = "height",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub height: ::std::option::Option<i32>,
        #[doc = "Additional information detected on the page."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P4Beta1TextAnnotationTextProperty,
        >,
        #[doc = "Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels."]
        #[serde(
            rename = "width",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub width: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1Page {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1Page {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1Paragraph {
        #[doc = "The bounding box for the paragraph. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the ‘natural’ orientation. For example: * when the text is horizontal it might look like: 0––1 | | 3––2 * when it’s rotated 180 degrees around the top-left corner it becomes: 2––3 | | 1––0 and the vertex order will still be (0, 1, 2, 3)."]
        #[serde(
            rename = "boundingBox",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_box:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1BoundingPoly>,
        #[doc = "Confidence of the OCR results for the paragraph. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Additional information detected for the paragraph."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P4Beta1TextAnnotationTextProperty,
        >,
        #[doc = "List of all words in this paragraph."]
        #[serde(
            rename = "words",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub words: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P4Beta1Word>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1Paragraph {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1Paragraph {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1Position {
        #[doc = "X coordinate."]
        #[serde(
            rename = "x",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub x: ::std::option::Option<f32>,
        #[doc = "Y coordinate."]
        #[serde(
            rename = "y",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub y: ::std::option::Option<f32>,
        #[doc = "Z coordinate (or depth)."]
        #[serde(
            rename = "z",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub z: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1Position {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1Position {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1Product {
        #[doc = "User-provided metadata to be stored with this product. Must be at most 4096 characters long."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Immutable. The category for the product identified by the reference image. This should be one of “homegoods-v2”, “apparel-v2”, “toys-v2”, “packagedgoods-v1” or “general-v1”. The legacy categories “homegoods”, “apparel”, and “toys” are still supported, but these should not be used for new products."]
        #[serde(
            rename = "productCategory",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product_category: ::std::option::Option<String>,
        #[doc = "Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. “1199”. Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet."]
        #[serde(
            rename = "productLabels",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product_labels:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P4Beta1ProductKeyValue>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1Product {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1Product {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1ProductKeyValue {
        #[doc = "The key of the label attached to the product. Cannot be empty and cannot exceed 128 bytes."]
        #[serde(
            rename = "key",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub key: ::std::option::Option<String>,
        #[doc = "The value of the label attached to the product. Cannot be empty and cannot exceed 128 bytes."]
        #[serde(
            rename = "value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub value: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1ProductKeyValue {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1ProductKeyValue {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1ProductSearchResults {
        #[doc = "Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current results."]
        #[serde(
            rename = "indexTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub index_time: ::std::option::Option<String>,
        #[doc = "List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to that region. There may be duplicate product matches in the union of all the per-product results."]
        #[serde(
            rename = "productGroupedResults",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product_grouped_results: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P4Beta1ProductSearchResultsGroupedResult>,
        >,
        #[doc = "List of results, one for each product match."]
        #[serde(
            rename = "results",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub results: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P4Beta1ProductSearchResultsResult>,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1ProductSearchResults {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1ProductSearchResults {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1ProductSearchResultsGroupedResult {
        #[doc = "The bounding polygon around the product detected in the query image."]
        #[serde(
            rename = "boundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_poly:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1BoundingPoly>,
        #[doc = "List of generic predictions for the object in the bounding box."]
        #[serde(
            rename = "objectAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub object_annotations: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P4Beta1ProductSearchResultsObjectAnnotation>,
        >,
        #[doc = "List of results, one for each product match."]
        #[serde(
            rename = "results",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub results: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P4Beta1ProductSearchResultsResult>,
        >,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P4Beta1ProductSearchResultsGroupedResult
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P4Beta1ProductSearchResultsGroupedResult
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1ProductSearchResultsObjectAnnotation {
        #[doc = "The BCP-47 language code, such as “en-US” or “sr-Latn”. For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."]
        #[serde(
            rename = "languageCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language_code: ::std::option::Option<String>,
        #[doc = "Object ID that should align with EntityAnnotation mid."]
        #[serde(
            rename = "mid",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mid: ::std::option::Option<String>,
        #[doc = "Object name, expressed in its `language_code` language."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Score of the result. Range \\[0, 1\\]."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P4Beta1ProductSearchResultsObjectAnnotation
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P4Beta1ProductSearchResultsObjectAnnotation
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1ProductSearchResultsResult {
        #[doc = "The resource name of the image from the product that is the closest match to the query."]
        #[serde(
            rename = "image",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub image: ::std::option::Option<String>,
        #[doc = "The Product."]
        #[serde(
            rename = "product",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product: ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1Product>,
        #[doc = "A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence)."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P4Beta1ProductSearchResultsResult
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1ProductSearchResultsResult {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1Property {
        #[doc = "Name of the property."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Value of numeric properties."]
        #[serde(
            rename = "uint64Value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub uint_64_value: ::std::option::Option<u64>,
        #[doc = "Value of the property."]
        #[serde(
            rename = "value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub value: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1Property {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1Property {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1ReferenceImage {
        #[doc = "Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not)."]
        #[serde(
            rename = "boundingPolys",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_polys:
            ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P4Beta1BoundingPoly>>,
        #[doc = "The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a reference image."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Required. The Google Cloud Storage URI of the reference image. The URI must start with `gs://`."]
        #[serde(
            rename = "uri",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub uri: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1ReferenceImage {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1ReferenceImage {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1SafeSearchAnnotation {
        #[doc = "Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities."]
        #[serde(
            rename = "adult",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub adult: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult,
        >,
        #[doc = "Likelihood that this is a medical image."]
        #[serde(
            rename = "medical",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub medical: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical,
        >,
        #[doc = "Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative poses, or close-ups of sensitive body areas."]
        #[serde(
            rename = "racy",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub racy: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy,
        >,
        #[doc = "Spoof likelihood. The likelihood that an modification was made to the image’s canonical version to make it appear funny or offensive."]
        #[serde(
            rename = "spoof",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub spoof: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof,
        >,
        #[doc = "Likelihood that this image contains violent content."]
        #[serde(
            rename = "violence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub violence: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1SafeSearchAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1SafeSearchAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult::Likely => "LIKELY",
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult::Possible => "POSSIBLE",
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult::VeryLikely => "VERY_LIKELY",
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationAdult {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical::Likely => "LIKELY",
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical::Possible => "POSSIBLE",
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical::VeryLikely => "VERY_LIKELY",
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationMedical
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy::Likely => "LIKELY",
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy::Possible => "POSSIBLE",
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy::VeryLikely => "VERY_LIKELY",
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy::VeryUnlikely => "VERY_UNLIKELY",
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy, ()> {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy::VeryLikely,
                "VERY_UNLIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy::VeryUnlikely,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy::VeryLikely,
                "VERY_UNLIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy::VeryUnlikely,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationRacy {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof::Likely => "LIKELY",
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof::Possible => "POSSIBLE",
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof::VeryLikely => "VERY_LIKELY",
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationSpoof {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence::Likely => "LIKELY",
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence::Possible => "POSSIBLE",
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence::Unknown => "UNKNOWN",
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence::Unlikely => "UNLIKELY",
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence::VeryLikely => "VERY_LIKELY",
                GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence::VeryUnlikely => {
                    "VERY_UNLIKELY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence, ()>
        {
            Ok(match s {
                "LIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence::VeryUnlikely
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence::Likely,
                "POSSIBLE" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence::Possible,
                "UNKNOWN" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence::Unknown,
                "UNLIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence::Unlikely,
                "VERY_LIKELY" => GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence::VeryLikely,
                "VERY_UNLIKELY" => {
                    GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence::VeryUnlikely
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P4Beta1SafeSearchAnnotationViolence
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1Symbol {
        #[doc = "The bounding box for the symbol. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the ‘natural’ orientation. For example: * when the text is horizontal it might look like: 0––1 | | 3––2 * when it’s rotated 180 degrees around the top-left corner it becomes: 2––3 | | 1––0 and the vertex order will still be (0, 1, 2, 3)."]
        #[serde(
            rename = "boundingBox",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_box:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1BoundingPoly>,
        #[doc = "Confidence of the OCR results for the symbol. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Additional information detected for the symbol."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P4Beta1TextAnnotationTextProperty,
        >,
        #[doc = "The actual UTF-8 representation of the symbol."]
        #[serde(
            rename = "text",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub text: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1Symbol {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1Symbol {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1TextAnnotation {
        #[doc = "List of pages detected by OCR."]
        #[serde(
            rename = "pages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pages: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P4Beta1Page>>,
        #[doc = "UTF-8 text detected on the pages."]
        #[serde(
            rename = "text",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub text: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1TextAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1TextAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreak {
        #[doc = "True if break prepends the element."]
        #[serde(
            rename = "isPrefix",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_prefix: ::std::option::Option<bool>,
        #[doc = "Detected break type."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType,
        >,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreak
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreak
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType {
        #[doc = "Line-wrapping break."]
        EolSureSpace,
        #[doc = "End-line hyphen that is not present in text; does not co-occur with `SPACE`, `LEADER_SPACE`, or `LINE_BREAK`."]
        Hyphen,
        #[doc = "Line break that ends a paragraph."]
        LineBreak,
        #[doc = "Regular space."]
        Space,
        #[doc = "Sure space (very wide)."]
        SureSpace,
        #[doc = "Unknown break label type."]
        Unknown,
    }
    impl GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType::EolSureSpace => {
                    "EOL_SURE_SPACE"
                }
                GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType::Hyphen => "HYPHEN",
                GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType::LineBreak => {
                    "LINE_BREAK"
                }
                GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType::Space => "SPACE",
                GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType::SureSpace => {
                    "SURE_SPACE"
                }
                GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType::Unknown => "UNKNOWN",
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType, ()>
        {
            Ok(match s {
                "EOL_SURE_SPACE" => {
                    GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType::EolSureSpace
                }
                "HYPHEN" => GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType::Hyphen,
                "LINE_BREAK" => {
                    GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType::LineBreak
                }
                "SPACE" => GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType::Space,
                "SURE_SPACE" => {
                    GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType::SureSpace
                }
                "UNKNOWN" => GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType::Unknown,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "EOL_SURE_SPACE" => {
                    GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType::EolSureSpace
                }
                "HYPHEN" => GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType::Hyphen,
                "LINE_BREAK" => {
                    GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType::LineBreak
                }
                "SPACE" => GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType::Space,
                "SURE_SPACE" => {
                    GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType::SureSpace
                }
                "UNKNOWN" => GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType::Unknown,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreakType
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1TextAnnotationDetectedLanguage {
        #[doc = "Confidence of detected language. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "The BCP-47 language code, such as “en-US” or “sr-Latn”. For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."]
        #[serde(
            rename = "languageCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language_code: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P4Beta1TextAnnotationDetectedLanguage
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for GoogleCloudVisionV1P4Beta1TextAnnotationDetectedLanguage
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1TextAnnotationTextProperty {
        #[doc = "Detected start or end of a text segment."]
        #[serde(
            rename = "detectedBreak",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub detected_break: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P4Beta1TextAnnotationDetectedBreak,
        >,
        #[doc = "A list of detected languages together with confidence."]
        #[serde(
            rename = "detectedLanguages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub detected_languages: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P4Beta1TextAnnotationDetectedLanguage>,
        >,
    }
    impl ::google_field_selector::FieldSelector
        for GoogleCloudVisionV1P4Beta1TextAnnotationTextProperty
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1TextAnnotationTextProperty {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1Vertex {
        #[doc = "X coordinate."]
        #[serde(
            rename = "x",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub x: ::std::option::Option<i32>,
        #[doc = "Y coordinate."]
        #[serde(
            rename = "y",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub y: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1Vertex {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1Vertex {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1WebDetection {
        #[doc = "The service’s best guess as to the topic of the request image. Inferred from similar images on the open web."]
        #[serde(
            rename = "bestGuessLabels",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub best_guess_labels: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P4Beta1WebDetectionWebLabel>,
        >,
        #[doc = "Fully matching images from the Internet. Can include resized copies of the query image."]
        #[serde(
            rename = "fullMatchingImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub full_matching_images: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P4Beta1WebDetectionWebImage>,
        >,
        #[doc = "Web pages containing the matching images from the Internet."]
        #[serde(
            rename = "pagesWithMatchingImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pages_with_matching_images: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P4Beta1WebDetectionWebPage>,
        >,
        #[doc = "Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops."]
        #[serde(
            rename = "partialMatchingImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub partial_matching_images: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P4Beta1WebDetectionWebImage>,
        >,
        #[doc = "The visually similar image results."]
        #[serde(
            rename = "visuallySimilarImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visually_similar_images: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P4Beta1WebDetectionWebImage>,
        >,
        #[doc = "Deduced entities from similar images on the Internet."]
        #[serde(
            rename = "webEntities",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub web_entities: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P4Beta1WebDetectionWebEntity>,
        >,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1WebDetection {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1WebDetection {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1WebDetectionWebEntity {
        #[doc = "Canonical description of the entity, in English."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "Opaque entity ID."]
        #[serde(
            rename = "entityId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub entity_id: ::std::option::Option<String>,
        #[doc = "Overall relevancy score for the entity. Not normalized and not comparable across different image queries."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1WebDetectionWebEntity {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1WebDetectionWebEntity {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1WebDetectionWebImage {
        #[doc = "(Deprecated) Overall relevancy score for the image."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
        #[doc = "The result image URL."]
        #[serde(
            rename = "url",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1WebDetectionWebImage {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1WebDetectionWebImage {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1WebDetectionWebLabel {
        #[doc = "Label for extra metadata."]
        #[serde(
            rename = "label",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub label: ::std::option::Option<String>,
        #[doc = "The BCP-47 language code for `label`, such as “en-US” or “sr-Latn”. For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."]
        #[serde(
            rename = "languageCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language_code: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1WebDetectionWebLabel {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1WebDetectionWebLabel {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1WebDetectionWebPage {
        #[doc = "Fully matching images on the page. Can include resized copies of the query image."]
        #[serde(
            rename = "fullMatchingImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub full_matching_images: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P4Beta1WebDetectionWebImage>,
        >,
        #[doc = "Title for the web page, may contain HTML markups."]
        #[serde(
            rename = "pageTitle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_title: ::std::option::Option<String>,
        #[doc = "Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops."]
        #[serde(
            rename = "partialMatchingImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub partial_matching_images: ::std::option::Option<
            Vec<crate::schemas::GoogleCloudVisionV1P4Beta1WebDetectionWebImage>,
        >,
        #[doc = "(Deprecated) Overall relevancy score for the web page."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
        #[doc = "The result web page URL."]
        #[serde(
            rename = "url",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1WebDetectionWebPage {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1WebDetectionWebPage {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GoogleCloudVisionV1P4Beta1Word {
        #[doc = "The bounding box for the word. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the ‘natural’ orientation. For example: * when the text is horizontal it might look like: 0––1 | | 3––2 * when it’s rotated 180 degrees around the top-left corner it becomes: 2––3 | | 1––0 and the vertex order will still be (0, 1, 2, 3)."]
        #[serde(
            rename = "boundingBox",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_box:
            ::std::option::Option<crate::schemas::GoogleCloudVisionV1P4Beta1BoundingPoly>,
        #[doc = "Confidence of the OCR results for the word. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Additional information detected for the word."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<
            crate::schemas::GoogleCloudVisionV1P4Beta1TextAnnotationTextProperty,
        >,
        #[doc = "List of symbols in the word. The order of the symbols follows the natural reading order."]
        #[serde(
            rename = "symbols",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub symbols: ::std::option::Option<Vec<crate::schemas::GoogleCloudVisionV1P4Beta1Symbol>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleCloudVisionV1P4Beta1Word {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleCloudVisionV1P4Beta1Word {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GroupedResult {
        #[doc = "The bounding polygon around the product detected in the query image."]
        #[serde(
            rename = "boundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_poly: ::std::option::Option<crate::schemas::BoundingPoly>,
        #[doc = "List of generic predictions for the object in the bounding box."]
        #[serde(
            rename = "objectAnnotations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub object_annotations: ::std::option::Option<Vec<crate::schemas::ObjectAnnotation>>,
        #[doc = "List of results, one for each product match."]
        #[serde(
            rename = "results",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub results: ::std::option::Option<Vec<crate::schemas::Result>>,
    }
    impl ::google_field_selector::FieldSelector for GroupedResult {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GroupedResult {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ImageAnnotationContext {
        #[doc = "If the file was a PDF or TIFF, this field gives the page number within the file used to produce the image."]
        #[serde(
            rename = "pageNumber",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_number: ::std::option::Option<i32>,
        #[doc = "The URI of the file used to produce the image."]
        #[serde(
            rename = "uri",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub uri: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ImageAnnotationContext {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ImageAnnotationContext {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct ImageProperties {
        #[doc = "If present, dominant colors completed successfully."]
        #[serde(
            rename = "dominantColors",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dominant_colors: ::std::option::Option<crate::schemas::DominantColorsAnnotation>,
    }
    impl ::google_field_selector::FieldSelector for ImageProperties {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ImageProperties {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct ImportProductSetsResponse {
        #[doc = "The list of reference_images that are imported successfully."]
        #[serde(
            rename = "referenceImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub reference_images: ::std::option::Option<Vec<crate::schemas::ReferenceImage>>,
        #[doc = "The rpc status for each ImportProductSet request, including both successes and errors. The number of statuses here matches the number of lines in the csv file, and statuses\\[i\\] stores the success or failure status of processing the i-th line of the csv, starting from line 0."]
        #[serde(
            rename = "statuses",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub statuses: ::std::option::Option<Vec<crate::schemas::Status>>,
    }
    impl ::google_field_selector::FieldSelector for ImportProductSetsResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ImportProductSetsResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct InputConfig {
        #[doc = "File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently, this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests."]
        #[serde(
            rename = "content",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content: ::std::option::Option<::google_api_bytes::Bytes>,
        #[doc = "The Google Cloud Storage location to read the input from."]
        #[serde(
            rename = "gcsSource",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub gcs_source: ::std::option::Option<crate::schemas::GcsSource>,
        #[doc = "The type of the file. Currently only “application/pdf”, “image/tiff” and “image/gif” are supported. Wildcards are not supported."]
        #[serde(
            rename = "mimeType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mime_type: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for InputConfig {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InputConfig {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct KeyValue {
        #[doc = "The key of the label attached to the product. Cannot be empty and cannot exceed 128 bytes."]
        #[serde(
            rename = "key",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub key: ::std::option::Option<String>,
        #[doc = "The value of the label attached to the product. Cannot be empty and cannot exceed 128 bytes."]
        #[serde(
            rename = "value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub value: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for KeyValue {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for KeyValue {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct Landmark {
        #[doc = "Face landmark position."]
        #[serde(
            rename = "position",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub position: ::std::option::Option<crate::schemas::Position>,
        #[doc = "Face landmark type."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::LandmarkType>,
    }
    impl ::google_field_selector::FieldSelector for Landmark {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Landmark {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LandmarkType {
        #[doc = "Chin gnathion."]
        ChinGnathion,
        #[doc = "Chin left gonion."]
        ChinLeftGonion,
        #[doc = "Chin right gonion."]
        ChinRightGonion,
        #[doc = "Forehead glabella."]
        ForeheadGlabella,
        #[doc = "Left cheek center."]
        LeftCheekCenter,
        #[doc = "Left ear tragion."]
        LeftEarTragion,
        #[doc = "Left eye."]
        LeftEye,
        #[doc = "Left eye, bottom boundary."]
        LeftEyeBottomBoundary,
        #[doc = "Left eye, left corner."]
        LeftEyeLeftCorner,
        #[doc = "Left eye pupil."]
        LeftEyePupil,
        #[doc = "Left eye, right corner."]
        LeftEyeRightCorner,
        #[doc = "Left eye, top boundary."]
        LeftEyeTopBoundary,
        #[doc = "Left eyebrow, upper midpoint."]
        LeftEyebrowUpperMidpoint,
        #[doc = "Left of left eyebrow."]
        LeftOfLeftEyebrow,
        #[doc = "Left of right eyebrow."]
        LeftOfRightEyebrow,
        #[doc = "Lower lip."]
        LowerLip,
        #[doc = "Midpoint between eyes."]
        MidpointBetweenEyes,
        #[doc = "Mouth center."]
        MouthCenter,
        #[doc = "Mouth left."]
        MouthLeft,
        #[doc = "Mouth right."]
        MouthRight,
        #[doc = "Nose, bottom center."]
        NoseBottomCenter,
        #[doc = "Nose, bottom left."]
        NoseBottomLeft,
        #[doc = "Nose, bottom right."]
        NoseBottomRight,
        #[doc = "Nose tip."]
        NoseTip,
        #[doc = "Right cheek center."]
        RightCheekCenter,
        #[doc = "Right ear tragion."]
        RightEarTragion,
        #[doc = "Right eye."]
        RightEye,
        #[doc = "Right eye, bottom boundary."]
        RightEyeBottomBoundary,
        #[doc = "Right eye, left corner."]
        RightEyeLeftCorner,
        #[doc = "Right eye pupil."]
        RightEyePupil,
        #[doc = "Right eye, right corner."]
        RightEyeRightCorner,
        #[doc = "Right eye, top boundary."]
        RightEyeTopBoundary,
        #[doc = "Right eyebrow, upper midpoint."]
        RightEyebrowUpperMidpoint,
        #[doc = "Right of left eyebrow."]
        RightOfLeftEyebrow,
        #[doc = "Right of right eyebrow."]
        RightOfRightEyebrow,
        #[doc = "Unknown face landmark detected. Should not be filled."]
        UnknownLandmark,
        #[doc = "Upper lip."]
        UpperLip,
    }
    impl LandmarkType {
        pub fn as_str(self) -> &'static str {
            match self {
                LandmarkType::ChinGnathion => "CHIN_GNATHION",
                LandmarkType::ChinLeftGonion => "CHIN_LEFT_GONION",
                LandmarkType::ChinRightGonion => "CHIN_RIGHT_GONION",
                LandmarkType::ForeheadGlabella => "FOREHEAD_GLABELLA",
                LandmarkType::LeftCheekCenter => "LEFT_CHEEK_CENTER",
                LandmarkType::LeftEarTragion => "LEFT_EAR_TRAGION",
                LandmarkType::LeftEye => "LEFT_EYE",
                LandmarkType::LeftEyeBottomBoundary => "LEFT_EYE_BOTTOM_BOUNDARY",
                LandmarkType::LeftEyeLeftCorner => "LEFT_EYE_LEFT_CORNER",
                LandmarkType::LeftEyePupil => "LEFT_EYE_PUPIL",
                LandmarkType::LeftEyeRightCorner => "LEFT_EYE_RIGHT_CORNER",
                LandmarkType::LeftEyeTopBoundary => "LEFT_EYE_TOP_BOUNDARY",
                LandmarkType::LeftEyebrowUpperMidpoint => "LEFT_EYEBROW_UPPER_MIDPOINT",
                LandmarkType::LeftOfLeftEyebrow => "LEFT_OF_LEFT_EYEBROW",
                LandmarkType::LeftOfRightEyebrow => "LEFT_OF_RIGHT_EYEBROW",
                LandmarkType::LowerLip => "LOWER_LIP",
                LandmarkType::MidpointBetweenEyes => "MIDPOINT_BETWEEN_EYES",
                LandmarkType::MouthCenter => "MOUTH_CENTER",
                LandmarkType::MouthLeft => "MOUTH_LEFT",
                LandmarkType::MouthRight => "MOUTH_RIGHT",
                LandmarkType::NoseBottomCenter => "NOSE_BOTTOM_CENTER",
                LandmarkType::NoseBottomLeft => "NOSE_BOTTOM_LEFT",
                LandmarkType::NoseBottomRight => "NOSE_BOTTOM_RIGHT",
                LandmarkType::NoseTip => "NOSE_TIP",
                LandmarkType::RightCheekCenter => "RIGHT_CHEEK_CENTER",
                LandmarkType::RightEarTragion => "RIGHT_EAR_TRAGION",
                LandmarkType::RightEye => "RIGHT_EYE",
                LandmarkType::RightEyeBottomBoundary => "RIGHT_EYE_BOTTOM_BOUNDARY",
                LandmarkType::RightEyeLeftCorner => "RIGHT_EYE_LEFT_CORNER",
                LandmarkType::RightEyePupil => "RIGHT_EYE_PUPIL",
                LandmarkType::RightEyeRightCorner => "RIGHT_EYE_RIGHT_CORNER",
                LandmarkType::RightEyeTopBoundary => "RIGHT_EYE_TOP_BOUNDARY",
                LandmarkType::RightEyebrowUpperMidpoint => "RIGHT_EYEBROW_UPPER_MIDPOINT",
                LandmarkType::RightOfLeftEyebrow => "RIGHT_OF_LEFT_EYEBROW",
                LandmarkType::RightOfRightEyebrow => "RIGHT_OF_RIGHT_EYEBROW",
                LandmarkType::UnknownLandmark => "UNKNOWN_LANDMARK",
                LandmarkType::UpperLip => "UPPER_LIP",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LandmarkType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LandmarkType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LandmarkType, ()> {
            Ok(match s {
                "CHIN_GNATHION" => LandmarkType::ChinGnathion,
                "CHIN_LEFT_GONION" => LandmarkType::ChinLeftGonion,
                "CHIN_RIGHT_GONION" => LandmarkType::ChinRightGonion,
                "FOREHEAD_GLABELLA" => LandmarkType::ForeheadGlabella,
                "LEFT_CHEEK_CENTER" => LandmarkType::LeftCheekCenter,
                "LEFT_EAR_TRAGION" => LandmarkType::LeftEarTragion,
                "LEFT_EYE" => LandmarkType::LeftEye,
                "LEFT_EYE_BOTTOM_BOUNDARY" => LandmarkType::LeftEyeBottomBoundary,
                "LEFT_EYE_LEFT_CORNER" => LandmarkType::LeftEyeLeftCorner,
                "LEFT_EYE_PUPIL" => LandmarkType::LeftEyePupil,
                "LEFT_EYE_RIGHT_CORNER" => LandmarkType::LeftEyeRightCorner,
                "LEFT_EYE_TOP_BOUNDARY" => LandmarkType::LeftEyeTopBoundary,
                "LEFT_EYEBROW_UPPER_MIDPOINT" => LandmarkType::LeftEyebrowUpperMidpoint,
                "LEFT_OF_LEFT_EYEBROW" => LandmarkType::LeftOfLeftEyebrow,
                "LEFT_OF_RIGHT_EYEBROW" => LandmarkType::LeftOfRightEyebrow,
                "LOWER_LIP" => LandmarkType::LowerLip,
                "MIDPOINT_BETWEEN_EYES" => LandmarkType::MidpointBetweenEyes,
                "MOUTH_CENTER" => LandmarkType::MouthCenter,
                "MOUTH_LEFT" => LandmarkType::MouthLeft,
                "MOUTH_RIGHT" => LandmarkType::MouthRight,
                "NOSE_BOTTOM_CENTER" => LandmarkType::NoseBottomCenter,
                "NOSE_BOTTOM_LEFT" => LandmarkType::NoseBottomLeft,
                "NOSE_BOTTOM_RIGHT" => LandmarkType::NoseBottomRight,
                "NOSE_TIP" => LandmarkType::NoseTip,
                "RIGHT_CHEEK_CENTER" => LandmarkType::RightCheekCenter,
                "RIGHT_EAR_TRAGION" => LandmarkType::RightEarTragion,
                "RIGHT_EYE" => LandmarkType::RightEye,
                "RIGHT_EYE_BOTTOM_BOUNDARY" => LandmarkType::RightEyeBottomBoundary,
                "RIGHT_EYE_LEFT_CORNER" => LandmarkType::RightEyeLeftCorner,
                "RIGHT_EYE_PUPIL" => LandmarkType::RightEyePupil,
                "RIGHT_EYE_RIGHT_CORNER" => LandmarkType::RightEyeRightCorner,
                "RIGHT_EYE_TOP_BOUNDARY" => LandmarkType::RightEyeTopBoundary,
                "RIGHT_EYEBROW_UPPER_MIDPOINT" => LandmarkType::RightEyebrowUpperMidpoint,
                "RIGHT_OF_LEFT_EYEBROW" => LandmarkType::RightOfLeftEyebrow,
                "RIGHT_OF_RIGHT_EYEBROW" => LandmarkType::RightOfRightEyebrow,
                "UNKNOWN_LANDMARK" => LandmarkType::UnknownLandmark,
                "UPPER_LIP" => LandmarkType::UpperLip,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LandmarkType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LandmarkType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LandmarkType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CHIN_GNATHION" => LandmarkType::ChinGnathion,
                "CHIN_LEFT_GONION" => LandmarkType::ChinLeftGonion,
                "CHIN_RIGHT_GONION" => LandmarkType::ChinRightGonion,
                "FOREHEAD_GLABELLA" => LandmarkType::ForeheadGlabella,
                "LEFT_CHEEK_CENTER" => LandmarkType::LeftCheekCenter,
                "LEFT_EAR_TRAGION" => LandmarkType::LeftEarTragion,
                "LEFT_EYE" => LandmarkType::LeftEye,
                "LEFT_EYE_BOTTOM_BOUNDARY" => LandmarkType::LeftEyeBottomBoundary,
                "LEFT_EYE_LEFT_CORNER" => LandmarkType::LeftEyeLeftCorner,
                "LEFT_EYE_PUPIL" => LandmarkType::LeftEyePupil,
                "LEFT_EYE_RIGHT_CORNER" => LandmarkType::LeftEyeRightCorner,
                "LEFT_EYE_TOP_BOUNDARY" => LandmarkType::LeftEyeTopBoundary,
                "LEFT_EYEBROW_UPPER_MIDPOINT" => LandmarkType::LeftEyebrowUpperMidpoint,
                "LEFT_OF_LEFT_EYEBROW" => LandmarkType::LeftOfLeftEyebrow,
                "LEFT_OF_RIGHT_EYEBROW" => LandmarkType::LeftOfRightEyebrow,
                "LOWER_LIP" => LandmarkType::LowerLip,
                "MIDPOINT_BETWEEN_EYES" => LandmarkType::MidpointBetweenEyes,
                "MOUTH_CENTER" => LandmarkType::MouthCenter,
                "MOUTH_LEFT" => LandmarkType::MouthLeft,
                "MOUTH_RIGHT" => LandmarkType::MouthRight,
                "NOSE_BOTTOM_CENTER" => LandmarkType::NoseBottomCenter,
                "NOSE_BOTTOM_LEFT" => LandmarkType::NoseBottomLeft,
                "NOSE_BOTTOM_RIGHT" => LandmarkType::NoseBottomRight,
                "NOSE_TIP" => LandmarkType::NoseTip,
                "RIGHT_CHEEK_CENTER" => LandmarkType::RightCheekCenter,
                "RIGHT_EAR_TRAGION" => LandmarkType::RightEarTragion,
                "RIGHT_EYE" => LandmarkType::RightEye,
                "RIGHT_EYE_BOTTOM_BOUNDARY" => LandmarkType::RightEyeBottomBoundary,
                "RIGHT_EYE_LEFT_CORNER" => LandmarkType::RightEyeLeftCorner,
                "RIGHT_EYE_PUPIL" => LandmarkType::RightEyePupil,
                "RIGHT_EYE_RIGHT_CORNER" => LandmarkType::RightEyeRightCorner,
                "RIGHT_EYE_TOP_BOUNDARY" => LandmarkType::RightEyeTopBoundary,
                "RIGHT_EYEBROW_UPPER_MIDPOINT" => LandmarkType::RightEyebrowUpperMidpoint,
                "RIGHT_OF_LEFT_EYEBROW" => LandmarkType::RightOfLeftEyebrow,
                "RIGHT_OF_RIGHT_EYEBROW" => LandmarkType::RightOfRightEyebrow,
                "UNKNOWN_LANDMARK" => LandmarkType::UnknownLandmark,
                "UPPER_LIP" => LandmarkType::UpperLip,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LandmarkType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LandmarkType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct LatLng {
        #[doc = "The latitude in degrees. It must be in the range \\[-90.0, +90.0\\]."]
        #[serde(
            rename = "latitude",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub latitude: ::std::option::Option<f64>,
        #[doc = "The longitude in degrees. It must be in the range \\[-180.0, +180.0\\]."]
        #[serde(
            rename = "longitude",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub longitude: ::std::option::Option<f64>,
    }
    impl ::google_field_selector::FieldSelector for LatLng {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LatLng {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct LocalizedObjectAnnotation {
        #[doc = "Image region to which this object belongs. This must be populated."]
        #[serde(
            rename = "boundingPoly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_poly: ::std::option::Option<crate::schemas::BoundingPoly>,
        #[doc = "The BCP-47 language code, such as “en-US” or “sr-Latn”. For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."]
        #[serde(
            rename = "languageCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language_code: ::std::option::Option<String>,
        #[doc = "Object ID that should align with EntityAnnotation mid."]
        #[serde(
            rename = "mid",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mid: ::std::option::Option<String>,
        #[doc = "Object name, expressed in its `language_code` language."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Score of the result. Range \\[0, 1\\]."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for LocalizedObjectAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LocalizedObjectAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct LocationInfo {
        #[doc = "lat/long location coordinates."]
        #[serde(
            rename = "latLng",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub lat_lng: ::std::option::Option<crate::schemas::LatLng>,
    }
    impl ::google_field_selector::FieldSelector for LocationInfo {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LocationInfo {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct NormalizedVertex {
        #[doc = "X coordinate."]
        #[serde(
            rename = "x",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub x: ::std::option::Option<f32>,
        #[doc = "Y coordinate."]
        #[serde(
            rename = "y",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub y: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for NormalizedVertex {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for NormalizedVertex {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct ObjectAnnotation {
        #[doc = "The BCP-47 language code, such as “en-US” or “sr-Latn”. For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."]
        #[serde(
            rename = "languageCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language_code: ::std::option::Option<String>,
        #[doc = "Object ID that should align with EntityAnnotation mid."]
        #[serde(
            rename = "mid",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mid: ::std::option::Option<String>,
        #[doc = "Object name, expressed in its `language_code` language."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Score of the result. Range \\[0, 1\\]."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for ObjectAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ObjectAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct Operation {
        #[doc = "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."]
        #[serde(
            rename = "done",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub done: ::std::option::Option<bool>,
        #[doc = "The error result of the operation in case of failure or cancellation."]
        #[serde(
            rename = "error",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub error: ::std::option::Option<crate::schemas::Status>,
        #[doc = "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any."]
        #[serde(
            rename = "metadata",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub metadata:
            ::std::option::Option<::std::collections::BTreeMap<String, ::serde_json::Value>>,
        #[doc = "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."]
        #[serde(
            rename = "response",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub response:
            ::std::option::Option<::std::collections::BTreeMap<String, ::serde_json::Value>>,
    }
    impl ::google_field_selector::FieldSelector for Operation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Operation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct OperationMetadata {
        #[doc = "The time when the batch request was received."]
        #[serde(
            rename = "createTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub create_time: ::std::option::Option<String>,
        #[doc = "Current state of the batch operation."]
        #[serde(
            rename = "state",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub state: ::std::option::Option<crate::schemas::OperationMetadataState>,
        #[doc = "The time when the operation result was last updated."]
        #[serde(
            rename = "updateTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub update_time: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for OperationMetadata {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for OperationMetadata {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum OperationMetadataState {
        #[doc = "The batch processing was cancelled."]
        Cancelled,
        #[doc = "Request is received."]
        Created,
        #[doc = "The batch processing is done."]
        Done,
        #[doc = "Request is actively being processed."]
        Running,
        #[doc = "Invalid."]
        StateUnspecified,
    }
    impl OperationMetadataState {
        pub fn as_str(self) -> &'static str {
            match self {
                OperationMetadataState::Cancelled => "CANCELLED",
                OperationMetadataState::Created => "CREATED",
                OperationMetadataState::Done => "DONE",
                OperationMetadataState::Running => "RUNNING",
                OperationMetadataState::StateUnspecified => "STATE_UNSPECIFIED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for OperationMetadataState {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for OperationMetadataState {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<OperationMetadataState, ()> {
            Ok(match s {
                "CANCELLED" => OperationMetadataState::Cancelled,
                "CREATED" => OperationMetadataState::Created,
                "DONE" => OperationMetadataState::Done,
                "RUNNING" => OperationMetadataState::Running,
                "STATE_UNSPECIFIED" => OperationMetadataState::StateUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for OperationMetadataState {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for OperationMetadataState {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for OperationMetadataState {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CANCELLED" => OperationMetadataState::Cancelled,
                "CREATED" => OperationMetadataState::Created,
                "DONE" => OperationMetadataState::Done,
                "RUNNING" => OperationMetadataState::Running,
                "STATE_UNSPECIFIED" => OperationMetadataState::StateUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for OperationMetadataState {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for OperationMetadataState {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct OutputConfig {
        #[doc = "The max number of response protos to put into each output JSON file on Google Cloud Storage. The valid range is \\[1, 100\\]. If not specified, the default value is 20. For example, for one pdf file with 100 pages, 100 response protos will be generated. If `batch_size` = 20, then 5 json files each containing 20 response protos will be written under the prefix `gcs_destination`.`uri`. Currently, batch_size only applies to GcsDestination, with potential future support for other output configurations."]
        #[serde(
            rename = "batchSize",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub batch_size: ::std::option::Option<i32>,
        #[doc = "The Google Cloud Storage location to write the output(s) to."]
        #[serde(
            rename = "gcsDestination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub gcs_destination: ::std::option::Option<crate::schemas::GcsDestination>,
    }
    impl ::google_field_selector::FieldSelector for OutputConfig {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for OutputConfig {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct Page {
        #[doc = "List of blocks of text, images etc on this page."]
        #[serde(
            rename = "blocks",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub blocks: ::std::option::Option<Vec<crate::schemas::Block>>,
        #[doc = "Confidence of the OCR results on the page. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels."]
        #[serde(
            rename = "height",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub height: ::std::option::Option<i32>,
        #[doc = "Additional information detected on the page."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<crate::schemas::TextProperty>,
        #[doc = "Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels."]
        #[serde(
            rename = "width",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub width: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for Page {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Page {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct Paragraph {
        #[doc = "The bounding box for the paragraph. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the ‘natural’ orientation. For example: * when the text is horizontal it might look like: 0––1 | | 3––2 * when it’s rotated 180 degrees around the top-left corner it becomes: 2––3 | | 1––0 and the vertex order will still be (0, 1, 2, 3)."]
        #[serde(
            rename = "boundingBox",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_box: ::std::option::Option<crate::schemas::BoundingPoly>,
        #[doc = "Confidence of the OCR results for the paragraph. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Additional information detected for the paragraph."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<crate::schemas::TextProperty>,
        #[doc = "List of all words in this paragraph."]
        #[serde(
            rename = "words",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub words: ::std::option::Option<Vec<crate::schemas::Word>>,
    }
    impl ::google_field_selector::FieldSelector for Paragraph {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Paragraph {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct Position {
        #[doc = "X coordinate."]
        #[serde(
            rename = "x",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub x: ::std::option::Option<f32>,
        #[doc = "Y coordinate."]
        #[serde(
            rename = "y",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub y: ::std::option::Option<f32>,
        #[doc = "Z coordinate (or depth)."]
        #[serde(
            rename = "z",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub z: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for Position {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Position {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Product {
        #[doc = "User-provided metadata to be stored with this product. Must be at most 4096 characters long."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Immutable. The category for the product identified by the reference image. This should be one of “homegoods-v2”, “apparel-v2”, “toys-v2”, “packagedgoods-v1” or “general-v1”. The legacy categories “homegoods”, “apparel”, and “toys” are still supported, but these should not be used for new products."]
        #[serde(
            rename = "productCategory",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product_category: ::std::option::Option<String>,
        #[doc = "Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. “1199”. Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet."]
        #[serde(
            rename = "productLabels",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product_labels: ::std::option::Option<Vec<crate::schemas::KeyValue>>,
    }
    impl ::google_field_selector::FieldSelector for Product {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Product {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct ProductSearchResults {
        #[doc = "Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current results."]
        #[serde(
            rename = "indexTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub index_time: ::std::option::Option<String>,
        #[doc = "List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to that region. There may be duplicate product matches in the union of all the per-product results."]
        #[serde(
            rename = "productGroupedResults",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product_grouped_results: ::std::option::Option<Vec<crate::schemas::GroupedResult>>,
        #[doc = "List of results, one for each product match."]
        #[serde(
            rename = "results",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub results: ::std::option::Option<Vec<crate::schemas::Result>>,
    }
    impl ::google_field_selector::FieldSelector for ProductSearchResults {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ProductSearchResults {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Property {
        #[doc = "Name of the property."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Value of numeric properties."]
        #[serde(
            rename = "uint64Value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub uint_64_value: ::std::option::Option<u64>,
        #[doc = "Value of the property."]
        #[serde(
            rename = "value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub value: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for Property {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Property {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct ReferenceImage {
        #[doc = "Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not)."]
        #[serde(
            rename = "boundingPolys",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_polys: ::std::option::Option<Vec<crate::schemas::BoundingPoly>>,
        #[doc = "The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a reference image."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Required. The Google Cloud Storage URI of the reference image. The URI must start with `gs://`."]
        #[serde(
            rename = "uri",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub uri: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ReferenceImage {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ReferenceImage {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct Result {
        #[doc = "The resource name of the image from the product that is the closest match to the query."]
        #[serde(
            rename = "image",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub image: ::std::option::Option<String>,
        #[doc = "The Product."]
        #[serde(
            rename = "product",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub product: ::std::option::Option<crate::schemas::Product>,
        #[doc = "A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence)."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for Result {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Result {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SafeSearchAnnotation {
        #[doc = "Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities."]
        #[serde(
            rename = "adult",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub adult: ::std::option::Option<crate::schemas::SafeSearchAnnotationAdult>,
        #[doc = "Likelihood that this is a medical image."]
        #[serde(
            rename = "medical",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub medical: ::std::option::Option<crate::schemas::SafeSearchAnnotationMedical>,
        #[doc = "Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative poses, or close-ups of sensitive body areas."]
        #[serde(
            rename = "racy",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub racy: ::std::option::Option<crate::schemas::SafeSearchAnnotationRacy>,
        #[doc = "Spoof likelihood. The likelihood that an modification was made to the image’s canonical version to make it appear funny or offensive."]
        #[serde(
            rename = "spoof",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub spoof: ::std::option::Option<crate::schemas::SafeSearchAnnotationSpoof>,
        #[doc = "Likelihood that this image contains violent content."]
        #[serde(
            rename = "violence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub violence: ::std::option::Option<crate::schemas::SafeSearchAnnotationViolence>,
    }
    impl ::google_field_selector::FieldSelector for SafeSearchAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SafeSearchAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum SafeSearchAnnotationAdult {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl SafeSearchAnnotationAdult {
        pub fn as_str(self) -> &'static str {
            match self {
                SafeSearchAnnotationAdult::Likely => "LIKELY",
                SafeSearchAnnotationAdult::Possible => "POSSIBLE",
                SafeSearchAnnotationAdult::Unknown => "UNKNOWN",
                SafeSearchAnnotationAdult::Unlikely => "UNLIKELY",
                SafeSearchAnnotationAdult::VeryLikely => "VERY_LIKELY",
                SafeSearchAnnotationAdult::VeryUnlikely => "VERY_UNLIKELY",
            }
        }
    }
    impl ::std::convert::AsRef<str> for SafeSearchAnnotationAdult {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for SafeSearchAnnotationAdult {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<SafeSearchAnnotationAdult, ()> {
            Ok(match s {
                "LIKELY" => SafeSearchAnnotationAdult::Likely,
                "POSSIBLE" => SafeSearchAnnotationAdult::Possible,
                "UNKNOWN" => SafeSearchAnnotationAdult::Unknown,
                "UNLIKELY" => SafeSearchAnnotationAdult::Unlikely,
                "VERY_LIKELY" => SafeSearchAnnotationAdult::VeryLikely,
                "VERY_UNLIKELY" => SafeSearchAnnotationAdult::VeryUnlikely,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for SafeSearchAnnotationAdult {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for SafeSearchAnnotationAdult {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for SafeSearchAnnotationAdult {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => SafeSearchAnnotationAdult::Likely,
                "POSSIBLE" => SafeSearchAnnotationAdult::Possible,
                "UNKNOWN" => SafeSearchAnnotationAdult::Unknown,
                "UNLIKELY" => SafeSearchAnnotationAdult::Unlikely,
                "VERY_LIKELY" => SafeSearchAnnotationAdult::VeryLikely,
                "VERY_UNLIKELY" => SafeSearchAnnotationAdult::VeryUnlikely,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for SafeSearchAnnotationAdult {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SafeSearchAnnotationAdult {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum SafeSearchAnnotationMedical {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl SafeSearchAnnotationMedical {
        pub fn as_str(self) -> &'static str {
            match self {
                SafeSearchAnnotationMedical::Likely => "LIKELY",
                SafeSearchAnnotationMedical::Possible => "POSSIBLE",
                SafeSearchAnnotationMedical::Unknown => "UNKNOWN",
                SafeSearchAnnotationMedical::Unlikely => "UNLIKELY",
                SafeSearchAnnotationMedical::VeryLikely => "VERY_LIKELY",
                SafeSearchAnnotationMedical::VeryUnlikely => "VERY_UNLIKELY",
            }
        }
    }
    impl ::std::convert::AsRef<str> for SafeSearchAnnotationMedical {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for SafeSearchAnnotationMedical {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<SafeSearchAnnotationMedical, ()> {
            Ok(match s {
                "LIKELY" => SafeSearchAnnotationMedical::Likely,
                "POSSIBLE" => SafeSearchAnnotationMedical::Possible,
                "UNKNOWN" => SafeSearchAnnotationMedical::Unknown,
                "UNLIKELY" => SafeSearchAnnotationMedical::Unlikely,
                "VERY_LIKELY" => SafeSearchAnnotationMedical::VeryLikely,
                "VERY_UNLIKELY" => SafeSearchAnnotationMedical::VeryUnlikely,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for SafeSearchAnnotationMedical {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for SafeSearchAnnotationMedical {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for SafeSearchAnnotationMedical {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => SafeSearchAnnotationMedical::Likely,
                "POSSIBLE" => SafeSearchAnnotationMedical::Possible,
                "UNKNOWN" => SafeSearchAnnotationMedical::Unknown,
                "UNLIKELY" => SafeSearchAnnotationMedical::Unlikely,
                "VERY_LIKELY" => SafeSearchAnnotationMedical::VeryLikely,
                "VERY_UNLIKELY" => SafeSearchAnnotationMedical::VeryUnlikely,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for SafeSearchAnnotationMedical {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SafeSearchAnnotationMedical {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum SafeSearchAnnotationRacy {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl SafeSearchAnnotationRacy {
        pub fn as_str(self) -> &'static str {
            match self {
                SafeSearchAnnotationRacy::Likely => "LIKELY",
                SafeSearchAnnotationRacy::Possible => "POSSIBLE",
                SafeSearchAnnotationRacy::Unknown => "UNKNOWN",
                SafeSearchAnnotationRacy::Unlikely => "UNLIKELY",
                SafeSearchAnnotationRacy::VeryLikely => "VERY_LIKELY",
                SafeSearchAnnotationRacy::VeryUnlikely => "VERY_UNLIKELY",
            }
        }
    }
    impl ::std::convert::AsRef<str> for SafeSearchAnnotationRacy {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for SafeSearchAnnotationRacy {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<SafeSearchAnnotationRacy, ()> {
            Ok(match s {
                "LIKELY" => SafeSearchAnnotationRacy::Likely,
                "POSSIBLE" => SafeSearchAnnotationRacy::Possible,
                "UNKNOWN" => SafeSearchAnnotationRacy::Unknown,
                "UNLIKELY" => SafeSearchAnnotationRacy::Unlikely,
                "VERY_LIKELY" => SafeSearchAnnotationRacy::VeryLikely,
                "VERY_UNLIKELY" => SafeSearchAnnotationRacy::VeryUnlikely,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for SafeSearchAnnotationRacy {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for SafeSearchAnnotationRacy {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for SafeSearchAnnotationRacy {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => SafeSearchAnnotationRacy::Likely,
                "POSSIBLE" => SafeSearchAnnotationRacy::Possible,
                "UNKNOWN" => SafeSearchAnnotationRacy::Unknown,
                "UNLIKELY" => SafeSearchAnnotationRacy::Unlikely,
                "VERY_LIKELY" => SafeSearchAnnotationRacy::VeryLikely,
                "VERY_UNLIKELY" => SafeSearchAnnotationRacy::VeryUnlikely,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for SafeSearchAnnotationRacy {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SafeSearchAnnotationRacy {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum SafeSearchAnnotationSpoof {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl SafeSearchAnnotationSpoof {
        pub fn as_str(self) -> &'static str {
            match self {
                SafeSearchAnnotationSpoof::Likely => "LIKELY",
                SafeSearchAnnotationSpoof::Possible => "POSSIBLE",
                SafeSearchAnnotationSpoof::Unknown => "UNKNOWN",
                SafeSearchAnnotationSpoof::Unlikely => "UNLIKELY",
                SafeSearchAnnotationSpoof::VeryLikely => "VERY_LIKELY",
                SafeSearchAnnotationSpoof::VeryUnlikely => "VERY_UNLIKELY",
            }
        }
    }
    impl ::std::convert::AsRef<str> for SafeSearchAnnotationSpoof {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for SafeSearchAnnotationSpoof {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<SafeSearchAnnotationSpoof, ()> {
            Ok(match s {
                "LIKELY" => SafeSearchAnnotationSpoof::Likely,
                "POSSIBLE" => SafeSearchAnnotationSpoof::Possible,
                "UNKNOWN" => SafeSearchAnnotationSpoof::Unknown,
                "UNLIKELY" => SafeSearchAnnotationSpoof::Unlikely,
                "VERY_LIKELY" => SafeSearchAnnotationSpoof::VeryLikely,
                "VERY_UNLIKELY" => SafeSearchAnnotationSpoof::VeryUnlikely,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for SafeSearchAnnotationSpoof {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for SafeSearchAnnotationSpoof {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for SafeSearchAnnotationSpoof {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => SafeSearchAnnotationSpoof::Likely,
                "POSSIBLE" => SafeSearchAnnotationSpoof::Possible,
                "UNKNOWN" => SafeSearchAnnotationSpoof::Unknown,
                "UNLIKELY" => SafeSearchAnnotationSpoof::Unlikely,
                "VERY_LIKELY" => SafeSearchAnnotationSpoof::VeryLikely,
                "VERY_UNLIKELY" => SafeSearchAnnotationSpoof::VeryUnlikely,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for SafeSearchAnnotationSpoof {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SafeSearchAnnotationSpoof {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum SafeSearchAnnotationViolence {
        #[doc = "It is likely."]
        Likely,
        #[doc = "It is possible."]
        Possible,
        #[doc = "Unknown likelihood."]
        Unknown,
        #[doc = "It is unlikely."]
        Unlikely,
        #[doc = "It is very likely."]
        VeryLikely,
        #[doc = "It is very unlikely."]
        VeryUnlikely,
    }
    impl SafeSearchAnnotationViolence {
        pub fn as_str(self) -> &'static str {
            match self {
                SafeSearchAnnotationViolence::Likely => "LIKELY",
                SafeSearchAnnotationViolence::Possible => "POSSIBLE",
                SafeSearchAnnotationViolence::Unknown => "UNKNOWN",
                SafeSearchAnnotationViolence::Unlikely => "UNLIKELY",
                SafeSearchAnnotationViolence::VeryLikely => "VERY_LIKELY",
                SafeSearchAnnotationViolence::VeryUnlikely => "VERY_UNLIKELY",
            }
        }
    }
    impl ::std::convert::AsRef<str> for SafeSearchAnnotationViolence {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for SafeSearchAnnotationViolence {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<SafeSearchAnnotationViolence, ()> {
            Ok(match s {
                "LIKELY" => SafeSearchAnnotationViolence::Likely,
                "POSSIBLE" => SafeSearchAnnotationViolence::Possible,
                "UNKNOWN" => SafeSearchAnnotationViolence::Unknown,
                "UNLIKELY" => SafeSearchAnnotationViolence::Unlikely,
                "VERY_LIKELY" => SafeSearchAnnotationViolence::VeryLikely,
                "VERY_UNLIKELY" => SafeSearchAnnotationViolence::VeryUnlikely,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for SafeSearchAnnotationViolence {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for SafeSearchAnnotationViolence {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for SafeSearchAnnotationViolence {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LIKELY" => SafeSearchAnnotationViolence::Likely,
                "POSSIBLE" => SafeSearchAnnotationViolence::Possible,
                "UNKNOWN" => SafeSearchAnnotationViolence::Unknown,
                "UNLIKELY" => SafeSearchAnnotationViolence::Unlikely,
                "VERY_LIKELY" => SafeSearchAnnotationViolence::VeryLikely,
                "VERY_UNLIKELY" => SafeSearchAnnotationViolence::VeryUnlikely,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for SafeSearchAnnotationViolence {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SafeSearchAnnotationViolence {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct Status {
        #[doc = "The status code, which should be an enum value of google.rpc.Code."]
        #[serde(
            rename = "code",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub code: ::std::option::Option<i32>,
        #[doc = "A list of messages that carry the error details. There is a common set of message types for APIs to use."]
        #[serde(
            rename = "details",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub details:
            ::std::option::Option<Vec<::std::collections::BTreeMap<String, ::serde_json::Value>>>,
        #[doc = "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."]
        #[serde(
            rename = "message",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub message: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for Status {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Status {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct Symbol {
        #[doc = "The bounding box for the symbol. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the ‘natural’ orientation. For example: * when the text is horizontal it might look like: 0––1 | | 3––2 * when it’s rotated 180 degrees around the top-left corner it becomes: 2––3 | | 1––0 and the vertex order will still be (0, 1, 2, 3)."]
        #[serde(
            rename = "boundingBox",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_box: ::std::option::Option<crate::schemas::BoundingPoly>,
        #[doc = "Confidence of the OCR results for the symbol. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Additional information detected for the symbol."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<crate::schemas::TextProperty>,
        #[doc = "The actual UTF-8 representation of the symbol."]
        #[serde(
            rename = "text",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub text: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for Symbol {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Symbol {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct TextAnnotation {
        #[doc = "List of pages detected by OCR."]
        #[serde(
            rename = "pages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pages: ::std::option::Option<Vec<crate::schemas::Page>>,
        #[doc = "UTF-8 text detected on the pages."]
        #[serde(
            rename = "text",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub text: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for TextAnnotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for TextAnnotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct TextProperty {
        #[doc = "Detected start or end of a text segment."]
        #[serde(
            rename = "detectedBreak",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub detected_break: ::std::option::Option<crate::schemas::DetectedBreak>,
        #[doc = "A list of detected languages together with confidence."]
        #[serde(
            rename = "detectedLanguages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub detected_languages: ::std::option::Option<Vec<crate::schemas::DetectedLanguage>>,
    }
    impl ::google_field_selector::FieldSelector for TextProperty {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for TextProperty {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Vertex {
        #[doc = "X coordinate."]
        #[serde(
            rename = "x",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub x: ::std::option::Option<i32>,
        #[doc = "Y coordinate."]
        #[serde(
            rename = "y",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub y: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for Vertex {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Vertex {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct WebDetection {
        #[doc = "The service’s best guess as to the topic of the request image. Inferred from similar images on the open web."]
        #[serde(
            rename = "bestGuessLabels",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub best_guess_labels: ::std::option::Option<Vec<crate::schemas::WebLabel>>,
        #[doc = "Fully matching images from the Internet. Can include resized copies of the query image."]
        #[serde(
            rename = "fullMatchingImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub full_matching_images: ::std::option::Option<Vec<crate::schemas::WebImage>>,
        #[doc = "Web pages containing the matching images from the Internet."]
        #[serde(
            rename = "pagesWithMatchingImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pages_with_matching_images: ::std::option::Option<Vec<crate::schemas::WebPage>>,
        #[doc = "Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops."]
        #[serde(
            rename = "partialMatchingImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub partial_matching_images: ::std::option::Option<Vec<crate::schemas::WebImage>>,
        #[doc = "The visually similar image results."]
        #[serde(
            rename = "visuallySimilarImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visually_similar_images: ::std::option::Option<Vec<crate::schemas::WebImage>>,
        #[doc = "Deduced entities from similar images on the Internet."]
        #[serde(
            rename = "webEntities",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub web_entities: ::std::option::Option<Vec<crate::schemas::WebEntity>>,
    }
    impl ::google_field_selector::FieldSelector for WebDetection {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for WebDetection {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct WebEntity {
        #[doc = "Canonical description of the entity, in English."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "Opaque entity ID."]
        #[serde(
            rename = "entityId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub entity_id: ::std::option::Option<String>,
        #[doc = "Overall relevancy score for the entity. Not normalized and not comparable across different image queries."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
    }
    impl ::google_field_selector::FieldSelector for WebEntity {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for WebEntity {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct WebImage {
        #[doc = "(Deprecated) Overall relevancy score for the image."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
        #[doc = "The result image URL."]
        #[serde(
            rename = "url",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for WebImage {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for WebImage {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct WebLabel {
        #[doc = "Label for extra metadata."]
        #[serde(
            rename = "label",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub label: ::std::option::Option<String>,
        #[doc = "The BCP-47 language code for `label`, such as “en-US” or “sr-Latn”. For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."]
        #[serde(
            rename = "languageCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language_code: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for WebLabel {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for WebLabel {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct WebPage {
        #[doc = "Fully matching images on the page. Can include resized copies of the query image."]
        #[serde(
            rename = "fullMatchingImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub full_matching_images: ::std::option::Option<Vec<crate::schemas::WebImage>>,
        #[doc = "Title for the web page, may contain HTML markups."]
        #[serde(
            rename = "pageTitle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_title: ::std::option::Option<String>,
        #[doc = "Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops."]
        #[serde(
            rename = "partialMatchingImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub partial_matching_images: ::std::option::Option<Vec<crate::schemas::WebImage>>,
        #[doc = "(Deprecated) Overall relevancy score for the web page."]
        #[serde(
            rename = "score",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub score: ::std::option::Option<f32>,
        #[doc = "The result web page URL."]
        #[serde(
            rename = "url",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for WebPage {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for WebPage {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct Word {
        #[doc = "The bounding box for the word. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the ‘natural’ orientation. For example: * when the text is horizontal it might look like: 0––1 | | 3––2 * when it’s rotated 180 degrees around the top-left corner it becomes: 2––3 | | 1––0 and the vertex order will still be (0, 1, 2, 3)."]
        #[serde(
            rename = "boundingBox",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bounding_box: ::std::option::Option<crate::schemas::BoundingPoly>,
        #[doc = "Confidence of the OCR results for the word. Range \\[0, 1\\]."]
        #[serde(
            rename = "confidence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub confidence: ::std::option::Option<f32>,
        #[doc = "Additional information detected for the word."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<crate::schemas::TextProperty>,
        #[doc = "List of symbols in the word. The order of the symbols follows the natural reading order."]
        #[serde(
            rename = "symbols",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub symbols: ::std::option::Option<Vec<crate::schemas::Symbol>>,
    }
    impl ::google_field_selector::FieldSelector for Word {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Word {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
}
pub mod params {
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum Alt {
        #[doc = "Responses with Content-Type of application/json"]
        Json,
        #[doc = "Media download with context-dependent Content-Type"]
        Media,
        #[doc = "Responses with Content-Type of application/x-protobuf"]
        Proto,
    }
    impl Alt {
        pub fn as_str(self) -> &'static str {
            match self {
                Alt::Json => "json",
                Alt::Media => "media",
                Alt::Proto => "proto",
            }
        }
    }
    impl ::std::convert::AsRef<str> for Alt {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for Alt {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<Alt, ()> {
            Ok(match s {
                "json" => Alt::Json,
                "media" => Alt::Media,
                "proto" => Alt::Proto,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for Alt {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for Alt {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for Alt {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "json" => Alt::Json,
                "media" => Alt::Media,
                "proto" => Alt::Proto,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for Alt {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Alt {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum Xgafv {
        #[doc = "v1 error format"]
        _1,
        #[doc = "v2 error format"]
        _2,
    }
    impl Xgafv {
        pub fn as_str(self) -> &'static str {
            match self {
                Xgafv::_1 => "1",
                Xgafv::_2 => "2",
            }
        }
    }
    impl ::std::convert::AsRef<str> for Xgafv {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for Xgafv {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<Xgafv, ()> {
            Ok(match s {
                "1" => Xgafv::_1,
                "2" => Xgafv::_2,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for Xgafv {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for Xgafv {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for Xgafv {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "1" => Xgafv::_1,
                "2" => Xgafv::_2,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for Xgafv {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Xgafv {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
}
pub struct Client {
    reqwest: ::reqwest::Client,
    auth: Box<dyn ::google_api_auth::GetAccessToken>,
}
impl Client {
    pub fn new<A>(auth: A) -> Self
    where
        A: ::google_api_auth::GetAccessToken + 'static,
    {
        Client::with_reqwest_client(auth, ::reqwest::Client::builder().build().unwrap())
    }
    pub fn with_reqwest_client<A>(auth: A, reqwest: ::reqwest::Client) -> Self
    where
        A: ::google_api_auth::GetAccessToken + 'static,
    {
        Client {
            reqwest,
            auth: Box::new(auth),
        }
    }
    fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
        self.auth.as_ref()
    }
    #[doc = "Actions that can be performed on the files resource"]
    pub fn files(&self) -> crate::resources::files::FilesActions {
        crate::resources::files::FilesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the images resource"]
    pub fn images(&self) -> crate::resources::images::ImagesActions {
        crate::resources::images::ImagesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the projects resource"]
    pub fn projects(&self) -> crate::resources::projects::ProjectsActions {
        crate::resources::projects::ProjectsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
}
pub mod resources {
    pub mod files {
        pub mod params {}
        pub struct FilesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> FilesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Service that performs image detection and annotation for a batch of files. Now only “application/pdf”, “image/tiff” and “image/gif” are supported. This service will extract at most 5 (customers can specify which 5 in AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each file provided and perform detection and annotation for each image extracted."]
            pub fn annotate(
                &self,
                request: crate::schemas::GoogleCloudVisionV1P1Beta1BatchAnnotateFilesRequest,
            ) -> AnnotateRequestBuilder {
                AnnotateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                }
            }
            #[doc = "Run asynchronous image detection and annotation for a list of generic files, such as PDF files, which may contain multiple pages and multiple images per page. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results)."]
            pub fn async_batch_annotate(
                &self,
                request: crate::schemas::GoogleCloudVisionV1P1Beta1AsyncBatchAnnotateFilesRequest,
            ) -> AsyncBatchAnnotateRequestBuilder {
                AsyncBatchAnnotateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                }
            }
        }
        #[doc = "Created via [FilesActions::annotate()](struct.FilesActions.html#method.annotate)"]
        #[derive(Debug, Clone)]
        pub struct AnnotateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::GoogleCloudVisionV1P1Beta1BatchAnnotateFilesRequest,
            access_token: ::std::option::Option<String>,
            alt: ::std::option::Option<crate::params::Alt>,
            callback: ::std::option::Option<String>,
            fields: ::std::option::Option<String>,
            key: ::std::option::Option<String>,
            oauth_token: ::std::option::Option<String>,
            pretty_print: ::std::option::Option<bool>,
            quota_user: ::std::option::Option<String>,
            upload_protocol: ::std::option::Option<String>,
            upload_type: ::std::option::Option<String>,
            xgafv: ::std::option::Option<crate::params::Xgafv>,
        }
        impl<'a> AnnotateRequestBuilder<'a> {
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. “raw”, “multipart”)."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. “media”, “multipart”)."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub async fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: ::std::option::Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields).await
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub async fn execute_with_default_fields(
                self,
            ) -> Result<
                crate::schemas::GoogleCloudVisionV1P1Beta1BatchAnnotateFilesResponse,
                crate::Error,
            > {
                self.execute_with_fields(None::<&str>).await
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub async fn execute_with_all_fields(
                self,
            ) -> Result<
                crate::schemas::GoogleCloudVisionV1P1Beta1BatchAnnotateFilesResponse,
                crate::Error,
            > {
                self.execute_with_fields(Some("*")).await
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub async fn execute_with_fields<T, F>(
                mut self,
                fields: ::std::option::Option<F>,
            ) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute().await
            }
            async fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path()).await?;
                let req = req.json(&self.request);
                Ok(req.send().await?.error_for_status()?.json().await?)
            }
            fn _path(&self) -> String {
                let mut output = "https://vision.googleapis.com/".to_owned();
                output.push_str("v1p1beta1/files:annotate");
                output
            }
            async fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let mut req = self.reqwest.request(::reqwest::Method::POST, path);
                req = req.query(&[("access_token", &self.access_token)]);
                req = req.query(&[("alt", &self.alt)]);
                req = req.query(&[("callback", &self.callback)]);
                req = req.query(&[("fields", &self.fields)]);
                req = req.query(&[("key", &self.key)]);
                req = req.query(&[("oauth_token", &self.oauth_token)]);
                req = req.query(&[("prettyPrint", &self.pretty_print)]);
                req = req.query(&[("quotaUser", &self.quota_user)]);
                req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                req = req.query(&[("uploadType", &self.upload_type)]);
                req = req.query(&[("$.xgafv", &self.xgafv)]);
                let access_token = self
                    .auth
                    .access_token()
                    .await
                    .map_err(|err| crate::Error::OAuth2(err))?;
                req = req.bearer_auth(access_token);
                Ok(req)
            }
        }
        #[doc = "Created via [FilesActions::async_batch_annotate()](struct.FilesActions.html#method.async_batch_annotate)"]
        #[derive(Debug, Clone)]
        pub struct AsyncBatchAnnotateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::GoogleCloudVisionV1P1Beta1AsyncBatchAnnotateFilesRequest,
            access_token: ::std::option::Option<String>,
            alt: ::std::option::Option<crate::params::Alt>,
            callback: ::std::option::Option<String>,
            fields: ::std::option::Option<String>,
            key: ::std::option::Option<String>,
            oauth_token: ::std::option::Option<String>,
            pretty_print: ::std::option::Option<bool>,
            quota_user: ::std::option::Option<String>,
            upload_protocol: ::std::option::Option<String>,
            upload_type: ::std::option::Option<String>,
            xgafv: ::std::option::Option<crate::params::Xgafv>,
        }
        impl<'a> AsyncBatchAnnotateRequestBuilder<'a> {
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. “raw”, “multipart”)."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. “media”, “multipart”)."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub async fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: ::std::option::Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields).await
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub async fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Operation, crate::Error> {
                self.execute_with_fields(None::<&str>).await
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub async fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::Operation, crate::Error> {
                self.execute_with_fields(Some("*")).await
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub async fn execute_with_fields<T, F>(
                mut self,
                fields: ::std::option::Option<F>,
            ) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute().await
            }
            async fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path()).await?;
                let req = req.json(&self.request);
                Ok(req.send().await?.error_for_status()?.json().await?)
            }
            fn _path(&self) -> String {
                let mut output = "https://vision.googleapis.com/".to_owned();
                output.push_str("v1p1beta1/files:asyncBatchAnnotate");
                output
            }
            async fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let mut req = self.reqwest.request(::reqwest::Method::POST, path);
                req = req.query(&[("access_token", &self.access_token)]);
                req = req.query(&[("alt", &self.alt)]);
                req = req.query(&[("callback", &self.callback)]);
                req = req.query(&[("fields", &self.fields)]);
                req = req.query(&[("key", &self.key)]);
                req = req.query(&[("oauth_token", &self.oauth_token)]);
                req = req.query(&[("prettyPrint", &self.pretty_print)]);
                req = req.query(&[("quotaUser", &self.quota_user)]);
                req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                req = req.query(&[("uploadType", &self.upload_type)]);
                req = req.query(&[("$.xgafv", &self.xgafv)]);
                let access_token = self
                    .auth
                    .access_token()
                    .await
                    .map_err(|err| crate::Error::OAuth2(err))?;
                req = req.bearer_auth(access_token);
                Ok(req)
            }
        }
    }
    pub mod images {
        pub mod params {}
        pub struct ImagesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> ImagesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Run image detection and annotation for a batch of images."]
            pub fn annotate(
                &self,
                request: crate::schemas::GoogleCloudVisionV1P1Beta1BatchAnnotateImagesRequest,
            ) -> AnnotateRequestBuilder {
                AnnotateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                }
            }
            #[doc = "Run asynchronous image detection and annotation for a list of images. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results). This service will write image annotation outputs to json files in customer GCS bucket, each json file containing BatchAnnotateImagesResponse proto."]
            pub fn async_batch_annotate(
                &self,
                request: crate::schemas::GoogleCloudVisionV1P1Beta1AsyncBatchAnnotateImagesRequest,
            ) -> AsyncBatchAnnotateRequestBuilder {
                AsyncBatchAnnotateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                }
            }
        }
        #[doc = "Created via [ImagesActions::annotate()](struct.ImagesActions.html#method.annotate)"]
        #[derive(Debug, Clone)]
        pub struct AnnotateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::GoogleCloudVisionV1P1Beta1BatchAnnotateImagesRequest,
            access_token: ::std::option::Option<String>,
            alt: ::std::option::Option<crate::params::Alt>,
            callback: ::std::option::Option<String>,
            fields: ::std::option::Option<String>,
            key: ::std::option::Option<String>,
            oauth_token: ::std::option::Option<String>,
            pretty_print: ::std::option::Option<bool>,
            quota_user: ::std::option::Option<String>,
            upload_protocol: ::std::option::Option<String>,
            upload_type: ::std::option::Option<String>,
            xgafv: ::std::option::Option<crate::params::Xgafv>,
        }
        impl<'a> AnnotateRequestBuilder<'a> {
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. “raw”, “multipart”)."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. “media”, “multipart”)."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub async fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: ::std::option::Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields).await
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub async fn execute_with_default_fields(
                self,
            ) -> Result<
                crate::schemas::GoogleCloudVisionV1P1Beta1BatchAnnotateImagesResponse,
                crate::Error,
            > {
                self.execute_with_fields(None::<&str>).await
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub async fn execute_with_all_fields(
                self,
            ) -> Result<
                crate::schemas::GoogleCloudVisionV1P1Beta1BatchAnnotateImagesResponse,
                crate::Error,
            > {
                self.execute_with_fields(Some("*")).await
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub async fn execute_with_fields<T, F>(
                mut self,
                fields: ::std::option::Option<F>,
            ) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute().await
            }
            async fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path()).await?;
                let req = req.json(&self.request);
                Ok(req.send().await?.error_for_status()?.json().await?)
            }
            fn _path(&self) -> String {
                let mut output = "https://vision.googleapis.com/".to_owned();
                output.push_str("v1p1beta1/images:annotate");
                output
            }
            async fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let mut req = self.reqwest.request(::reqwest::Method::POST, path);
                req = req.query(&[("access_token", &self.access_token)]);
                req = req.query(&[("alt", &self.alt)]);
                req = req.query(&[("callback", &self.callback)]);
                req = req.query(&[("fields", &self.fields)]);
                req = req.query(&[("key", &self.key)]);
                req = req.query(&[("oauth_token", &self.oauth_token)]);
                req = req.query(&[("prettyPrint", &self.pretty_print)]);
                req = req.query(&[("quotaUser", &self.quota_user)]);
                req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                req = req.query(&[("uploadType", &self.upload_type)]);
                req = req.query(&[("$.xgafv", &self.xgafv)]);
                let access_token = self
                    .auth
                    .access_token()
                    .await
                    .map_err(|err| crate::Error::OAuth2(err))?;
                req = req.bearer_auth(access_token);
                Ok(req)
            }
        }
        #[doc = "Created via [ImagesActions::async_batch_annotate()](struct.ImagesActions.html#method.async_batch_annotate)"]
        #[derive(Debug, Clone)]
        pub struct AsyncBatchAnnotateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::GoogleCloudVisionV1P1Beta1AsyncBatchAnnotateImagesRequest,
            access_token: ::std::option::Option<String>,
            alt: ::std::option::Option<crate::params::Alt>,
            callback: ::std::option::Option<String>,
            fields: ::std::option::Option<String>,
            key: ::std::option::Option<String>,
            oauth_token: ::std::option::Option<String>,
            pretty_print: ::std::option::Option<bool>,
            quota_user: ::std::option::Option<String>,
            upload_protocol: ::std::option::Option<String>,
            upload_type: ::std::option::Option<String>,
            xgafv: ::std::option::Option<crate::params::Xgafv>,
        }
        impl<'a> AsyncBatchAnnotateRequestBuilder<'a> {
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. “raw”, “multipart”)."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. “media”, “multipart”)."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub async fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: ::std::option::Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields).await
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub async fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Operation, crate::Error> {
                self.execute_with_fields(None::<&str>).await
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub async fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::Operation, crate::Error> {
                self.execute_with_fields(Some("*")).await
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub async fn execute_with_fields<T, F>(
                mut self,
                fields: ::std::option::Option<F>,
            ) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute().await
            }
            async fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path()).await?;
                let req = req.json(&self.request);
                Ok(req.send().await?.error_for_status()?.json().await?)
            }
            fn _path(&self) -> String {
                let mut output = "https://vision.googleapis.com/".to_owned();
                output.push_str("v1p1beta1/images:asyncBatchAnnotate");
                output
            }
            async fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let mut req = self.reqwest.request(::reqwest::Method::POST, path);
                req = req.query(&[("access_token", &self.access_token)]);
                req = req.query(&[("alt", &self.alt)]);
                req = req.query(&[("callback", &self.callback)]);
                req = req.query(&[("fields", &self.fields)]);
                req = req.query(&[("key", &self.key)]);
                req = req.query(&[("oauth_token", &self.oauth_token)]);
                req = req.query(&[("prettyPrint", &self.pretty_print)]);
                req = req.query(&[("quotaUser", &self.quota_user)]);
                req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                req = req.query(&[("uploadType", &self.upload_type)]);
                req = req.query(&[("$.xgafv", &self.xgafv)]);
                let access_token = self
                    .auth
                    .access_token()
                    .await
                    .map_err(|err| crate::Error::OAuth2(err))?;
                req = req.bearer_auth(access_token);
                Ok(req)
            }
        }
    }
    pub mod projects {
        pub mod params {}
        pub struct ProjectsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> ProjectsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Actions that can be performed on the files resource"]
            pub fn files(&self) -> crate::resources::projects::files::FilesActions {
                crate::resources::projects::files::FilesActions {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                }
            }
            #[doc = "Actions that can be performed on the images resource"]
            pub fn images(&self) -> crate::resources::projects::images::ImagesActions {
                crate::resources::projects::images::ImagesActions {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                }
            }
            #[doc = "Actions that can be performed on the locations resource"]
            pub fn locations(&self) -> crate::resources::projects::locations::LocationsActions {
                crate::resources::projects::locations::LocationsActions {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                }
            }
        }
        pub mod files {
            pub mod params {}
            pub struct FilesActions<'a> {
                pub(crate) reqwest: &'a reqwest::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            }
            impl<'a> FilesActions<'a> {
                fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                    self.auth
                }
                #[doc = "Service that performs image detection and annotation for a batch of files. Now only “application/pdf”, “image/tiff” and “image/gif” are supported. This service will extract at most 5 (customers can specify which 5 in AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each file provided and perform detection and annotation for each image extracted."]
                pub fn annotate(
                    &self,
                    request: crate::schemas::GoogleCloudVisionV1P1Beta1BatchAnnotateFilesRequest,
                    parent: impl Into<String>,
                ) -> AnnotateRequestBuilder {
                    AnnotateRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        request,
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        parent: parent.into(),
                    }
                }
                #[doc = "Run asynchronous image detection and annotation for a list of generic files, such as PDF files, which may contain multiple pages and multiple images per page. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results)."]
                pub fn async_batch_annotate(
                    &self,
                    request : crate :: schemas :: GoogleCloudVisionV1P1Beta1AsyncBatchAnnotateFilesRequest,
                    parent: impl Into<String>,
                ) -> AsyncBatchAnnotateRequestBuilder {
                    AsyncBatchAnnotateRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        request,
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        parent: parent.into(),
                    }
                }
            }
            #[doc = "Created via [FilesActions::annotate()](struct.FilesActions.html#method.annotate)"]
            #[derive(Debug, Clone)]
            pub struct AnnotateRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                request: crate::schemas::GoogleCloudVisionV1P1Beta1BatchAnnotateFilesRequest,
                parent: String,
                access_token: ::std::option::Option<String>,
                alt: ::std::option::Option<crate::params::Alt>,
                callback: ::std::option::Option<String>,
                fields: ::std::option::Option<String>,
                key: ::std::option::Option<String>,
                oauth_token: ::std::option::Option<String>,
                pretty_print: ::std::option::Option<bool>,
                quota_user: ::std::option::Option<String>,
                upload_protocol: ::std::option::Option<String>,
                upload_type: ::std::option::Option<String>,
                xgafv: ::std::option::Option<crate::params::Xgafv>,
            }
            impl<'a> AnnotateRequestBuilder<'a> {
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. “raw”, “multipart”)."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. “media”, “multipart”)."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub async fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: ::std::option::Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields).await
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub async fn execute_with_default_fields(
                    self,
                ) -> Result<
                    crate::schemas::GoogleCloudVisionV1P1Beta1BatchAnnotateFilesResponse,
                    crate::Error,
                > {
                    self.execute_with_fields(None::<&str>).await
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub async fn execute_with_all_fields(
                    self,
                ) -> Result<
                    crate::schemas::GoogleCloudVisionV1P1Beta1BatchAnnotateFilesResponse,
                    crate::Error,
                > {
                    self.execute_with_fields(Some("*")).await
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub async fn execute_with_fields<T, F>(
                    mut self,
                    fields: ::std::option::Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute().await
                }
                async fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path()).await?;
                    let req = req.json(&self.request);
                    Ok(req.send().await?.error_for_status()?.json().await?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://vision.googleapis.com/".to_owned();
                    output.push_str("v1p1beta1/");
                    {
                        let var_as_str = &self.parent;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/files:annotate");
                    output
                }
                async fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::RequestBuilder, crate::Error> {
                    let mut req = self.reqwest.request(::reqwest::Method::POST, path);
                    req = req.query(&[("access_token", &self.access_token)]);
                    req = req.query(&[("alt", &self.alt)]);
                    req = req.query(&[("callback", &self.callback)]);
                    req = req.query(&[("fields", &self.fields)]);
                    req = req.query(&[("key", &self.key)]);
                    req = req.query(&[("oauth_token", &self.oauth_token)]);
                    req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    req = req.query(&[("quotaUser", &self.quota_user)]);
                    req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    req = req.query(&[("uploadType", &self.upload_type)]);
                    req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let access_token = self
                        .auth
                        .access_token()
                        .await
                        .map_err(|err| crate::Error::OAuth2(err))?;
                    req = req.bearer_auth(access_token);
                    Ok(req)
                }
            }
            #[doc = "Created via [FilesActions::async_batch_annotate()](struct.FilesActions.html#method.async_batch_annotate)"]
            #[derive(Debug, Clone)]
            pub struct AsyncBatchAnnotateRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                request: crate::schemas::GoogleCloudVisionV1P1Beta1AsyncBatchAnnotateFilesRequest,
                parent: String,
                access_token: ::std::option::Option<String>,
                alt: ::std::option::Option<crate::params::Alt>,
                callback: ::std::option::Option<String>,
                fields: ::std::option::Option<String>,
                key: ::std::option::Option<String>,
                oauth_token: ::std::option::Option<String>,
                pretty_print: ::std::option::Option<bool>,
                quota_user: ::std::option::Option<String>,
                upload_protocol: ::std::option::Option<String>,
                upload_type: ::std::option::Option<String>,
                xgafv: ::std::option::Option<crate::params::Xgafv>,
            }
            impl<'a> AsyncBatchAnnotateRequestBuilder<'a> {
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. “raw”, “multipart”)."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. “media”, “multipart”)."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub async fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: ::std::option::Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields).await
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub async fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::Operation, crate::Error> {
                    self.execute_with_fields(None::<&str>).await
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub async fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::Operation, crate::Error> {
                    self.execute_with_fields(Some("*")).await
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub async fn execute_with_fields<T, F>(
                    mut self,
                    fields: ::std::option::Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute().await
                }
                async fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path()).await?;
                    let req = req.json(&self.request);
                    Ok(req.send().await?.error_for_status()?.json().await?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://vision.googleapis.com/".to_owned();
                    output.push_str("v1p1beta1/");
                    {
                        let var_as_str = &self.parent;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/files:asyncBatchAnnotate");
                    output
                }
                async fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::RequestBuilder, crate::Error> {
                    let mut req = self.reqwest.request(::reqwest::Method::POST, path);
                    req = req.query(&[("access_token", &self.access_token)]);
                    req = req.query(&[("alt", &self.alt)]);
                    req = req.query(&[("callback", &self.callback)]);
                    req = req.query(&[("fields", &self.fields)]);
                    req = req.query(&[("key", &self.key)]);
                    req = req.query(&[("oauth_token", &self.oauth_token)]);
                    req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    req = req.query(&[("quotaUser", &self.quota_user)]);
                    req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    req = req.query(&[("uploadType", &self.upload_type)]);
                    req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let access_token = self
                        .auth
                        .access_token()
                        .await
                        .map_err(|err| crate::Error::OAuth2(err))?;
                    req = req.bearer_auth(access_token);
                    Ok(req)
                }
            }
        }
        pub mod images {
            pub mod params {}
            pub struct ImagesActions<'a> {
                pub(crate) reqwest: &'a reqwest::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            }
            impl<'a> ImagesActions<'a> {
                fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                    self.auth
                }
                #[doc = "Run image detection and annotation for a batch of images."]
                pub fn annotate(
                    &self,
                    request: crate::schemas::GoogleCloudVisionV1P1Beta1BatchAnnotateImagesRequest,
                    parent: impl Into<String>,
                ) -> AnnotateRequestBuilder {
                    AnnotateRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        request,
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        parent: parent.into(),
                    }
                }
                #[doc = "Run asynchronous image detection and annotation for a list of images. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results). This service will write image annotation outputs to json files in customer GCS bucket, each json file containing BatchAnnotateImagesResponse proto."]
                pub fn async_batch_annotate(
                    &self,
                    request : crate :: schemas :: GoogleCloudVisionV1P1Beta1AsyncBatchAnnotateImagesRequest,
                    parent: impl Into<String>,
                ) -> AsyncBatchAnnotateRequestBuilder {
                    AsyncBatchAnnotateRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        request,
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        parent: parent.into(),
                    }
                }
            }
            #[doc = "Created via [ImagesActions::annotate()](struct.ImagesActions.html#method.annotate)"]
            #[derive(Debug, Clone)]
            pub struct AnnotateRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                request: crate::schemas::GoogleCloudVisionV1P1Beta1BatchAnnotateImagesRequest,
                parent: String,
                access_token: ::std::option::Option<String>,
                alt: ::std::option::Option<crate::params::Alt>,
                callback: ::std::option::Option<String>,
                fields: ::std::option::Option<String>,
                key: ::std::option::Option<String>,
                oauth_token: ::std::option::Option<String>,
                pretty_print: ::std::option::Option<bool>,
                quota_user: ::std::option::Option<String>,
                upload_protocol: ::std::option::Option<String>,
                upload_type: ::std::option::Option<String>,
                xgafv: ::std::option::Option<crate::params::Xgafv>,
            }
            impl<'a> AnnotateRequestBuilder<'a> {
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. “raw”, “multipart”)."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. “media”, “multipart”)."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub async fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: ::std::option::Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields).await
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub async fn execute_with_default_fields(
                    self,
                ) -> Result<
                    crate::schemas::GoogleCloudVisionV1P1Beta1BatchAnnotateImagesResponse,
                    crate::Error,
                > {
                    self.execute_with_fields(None::<&str>).await
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub async fn execute_with_all_fields(
                    self,
                ) -> Result<
                    crate::schemas::GoogleCloudVisionV1P1Beta1BatchAnnotateImagesResponse,
                    crate::Error,
                > {
                    self.execute_with_fields(Some("*")).await
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub async fn execute_with_fields<T, F>(
                    mut self,
                    fields: ::std::option::Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute().await
                }
                async fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path()).await?;
                    let req = req.json(&self.request);
                    Ok(req.send().await?.error_for_status()?.json().await?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://vision.googleapis.com/".to_owned();
                    output.push_str("v1p1beta1/");
                    {
                        let var_as_str = &self.parent;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/images:annotate");
                    output
                }
                async fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::RequestBuilder, crate::Error> {
                    let mut req = self.reqwest.request(::reqwest::Method::POST, path);
                    req = req.query(&[("access_token", &self.access_token)]);
                    req = req.query(&[("alt", &self.alt)]);
                    req = req.query(&[("callback", &self.callback)]);
                    req = req.query(&[("fields", &self.fields)]);
                    req = req.query(&[("key", &self.key)]);
                    req = req.query(&[("oauth_token", &self.oauth_token)]);
                    req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    req = req.query(&[("quotaUser", &self.quota_user)]);
                    req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    req = req.query(&[("uploadType", &self.upload_type)]);
                    req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let access_token = self
                        .auth
                        .access_token()
                        .await
                        .map_err(|err| crate::Error::OAuth2(err))?;
                    req = req.bearer_auth(access_token);
                    Ok(req)
                }
            }
            #[doc = "Created via [ImagesActions::async_batch_annotate()](struct.ImagesActions.html#method.async_batch_annotate)"]
            #[derive(Debug, Clone)]
            pub struct AsyncBatchAnnotateRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                request: crate::schemas::GoogleCloudVisionV1P1Beta1AsyncBatchAnnotateImagesRequest,
                parent: String,
                access_token: ::std::option::Option<String>,
                alt: ::std::option::Option<crate::params::Alt>,
                callback: ::std::option::Option<String>,
                fields: ::std::option::Option<String>,
                key: ::std::option::Option<String>,
                oauth_token: ::std::option::Option<String>,
                pretty_print: ::std::option::Option<bool>,
                quota_user: ::std::option::Option<String>,
                upload_protocol: ::std::option::Option<String>,
                upload_type: ::std::option::Option<String>,
                xgafv: ::std::option::Option<crate::params::Xgafv>,
            }
            impl<'a> AsyncBatchAnnotateRequestBuilder<'a> {
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. “raw”, “multipart”)."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. “media”, “multipart”)."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub async fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: ::std::option::Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields).await
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub async fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::Operation, crate::Error> {
                    self.execute_with_fields(None::<&str>).await
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub async fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::Operation, crate::Error> {
                    self.execute_with_fields(Some("*")).await
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub async fn execute_with_fields<T, F>(
                    mut self,
                    fields: ::std::option::Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute().await
                }
                async fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path()).await?;
                    let req = req.json(&self.request);
                    Ok(req.send().await?.error_for_status()?.json().await?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://vision.googleapis.com/".to_owned();
                    output.push_str("v1p1beta1/");
                    {
                        let var_as_str = &self.parent;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/images:asyncBatchAnnotate");
                    output
                }
                async fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::RequestBuilder, crate::Error> {
                    let mut req = self.reqwest.request(::reqwest::Method::POST, path);
                    req = req.query(&[("access_token", &self.access_token)]);
                    req = req.query(&[("alt", &self.alt)]);
                    req = req.query(&[("callback", &self.callback)]);
                    req = req.query(&[("fields", &self.fields)]);
                    req = req.query(&[("key", &self.key)]);
                    req = req.query(&[("oauth_token", &self.oauth_token)]);
                    req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    req = req.query(&[("quotaUser", &self.quota_user)]);
                    req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    req = req.query(&[("uploadType", &self.upload_type)]);
                    req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let access_token = self
                        .auth
                        .access_token()
                        .await
                        .map_err(|err| crate::Error::OAuth2(err))?;
                    req = req.bearer_auth(access_token);
                    Ok(req)
                }
            }
        }
        pub mod locations {
            pub mod params {}
            pub struct LocationsActions<'a> {
                pub(crate) reqwest: &'a reqwest::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            }
            impl<'a> LocationsActions<'a> {
                fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                    self.auth
                }
                #[doc = "Actions that can be performed on the files resource"]
                pub fn files(&self) -> crate::resources::projects::locations::files::FilesActions {
                    crate::resources::projects::locations::files::FilesActions {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                    }
                }
                #[doc = "Actions that can be performed on the images resource"]
                pub fn images(
                    &self,
                ) -> crate::resources::projects::locations::images::ImagesActions {
                    crate::resources::projects::locations::images::ImagesActions {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                    }
                }
            }
            pub mod files {
                pub mod params {}
                pub struct FilesActions<'a> {
                    pub(crate) reqwest: &'a reqwest::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                }
                impl<'a> FilesActions<'a> {
                    fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                        self.auth
                    }
                    #[doc = "Service that performs image detection and annotation for a batch of files. Now only “application/pdf”, “image/tiff” and “image/gif” are supported. This service will extract at most 5 (customers can specify which 5 in AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each file provided and perform detection and annotation for each image extracted."]
                    pub fn annotate(
                        &self,
                        request : crate :: schemas :: GoogleCloudVisionV1P1Beta1BatchAnnotateFilesRequest,
                        parent: impl Into<String>,
                    ) -> AnnotateRequestBuilder {
                        AnnotateRequestBuilder {
                            reqwest: &self.reqwest,
                            auth: self.auth_ref(),
                            request,
                            access_token: None,
                            alt: None,
                            callback: None,
                            fields: None,
                            key: None,
                            oauth_token: None,
                            pretty_print: None,
                            quota_user: None,
                            upload_protocol: None,
                            upload_type: None,
                            xgafv: None,
                            parent: parent.into(),
                        }
                    }
                    #[doc = "Run asynchronous image detection and annotation for a list of generic files, such as PDF files, which may contain multiple pages and multiple images per page. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results)."]
                    pub fn async_batch_annotate(
                        &self,
                        request : crate :: schemas :: GoogleCloudVisionV1P1Beta1AsyncBatchAnnotateFilesRequest,
                        parent: impl Into<String>,
                    ) -> AsyncBatchAnnotateRequestBuilder {
                        AsyncBatchAnnotateRequestBuilder {
                            reqwest: &self.reqwest,
                            auth: self.auth_ref(),
                            request,
                            access_token: None,
                            alt: None,
                            callback: None,
                            fields: None,
                            key: None,
                            oauth_token: None,
                            pretty_print: None,
                            quota_user: None,
                            upload_protocol: None,
                            upload_type: None,
                            xgafv: None,
                            parent: parent.into(),
                        }
                    }
                }
                #[doc = "Created via [FilesActions::annotate()](struct.FilesActions.html#method.annotate)"]
                #[derive(Debug, Clone)]
                pub struct AnnotateRequestBuilder<'a> {
                    pub(crate) reqwest: &'a ::reqwest::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                    request: crate::schemas::GoogleCloudVisionV1P1Beta1BatchAnnotateFilesRequest,
                    parent: String,
                    access_token: ::std::option::Option<String>,
                    alt: ::std::option::Option<crate::params::Alt>,
                    callback: ::std::option::Option<String>,
                    fields: ::std::option::Option<String>,
                    key: ::std::option::Option<String>,
                    oauth_token: ::std::option::Option<String>,
                    pretty_print: ::std::option::Option<bool>,
                    quota_user: ::std::option::Option<String>,
                    upload_protocol: ::std::option::Option<String>,
                    upload_type: ::std::option::Option<String>,
                    xgafv: ::std::option::Option<crate::params::Xgafv>,
                }
                impl<'a> AnnotateRequestBuilder<'a> {
                    #[doc = "OAuth access token."]
                    pub fn access_token(mut self, value: impl Into<String>) -> Self {
                        self.access_token = Some(value.into());
                        self
                    }
                    #[doc = "JSONP"]
                    pub fn callback(mut self, value: impl Into<String>) -> Self {
                        self.callback = Some(value.into());
                        self
                    }
                    #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                    pub fn key(mut self, value: impl Into<String>) -> Self {
                        self.key = Some(value.into());
                        self
                    }
                    #[doc = "OAuth 2.0 token for the current user."]
                    pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                        self.oauth_token = Some(value.into());
                        self
                    }
                    #[doc = "Returns response with indentations and line breaks."]
                    pub fn pretty_print(mut self, value: bool) -> Self {
                        self.pretty_print = Some(value);
                        self
                    }
                    #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                    pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                        self.quota_user = Some(value.into());
                        self
                    }
                    #[doc = "Upload protocol for media (e.g. “raw”, “multipart”)."]
                    pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                        self.upload_protocol = Some(value.into());
                        self
                    }
                    #[doc = "Legacy upload protocol for media (e.g. “media”, “multipart”)."]
                    pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                        self.upload_type = Some(value.into());
                        self
                    }
                    #[doc = "V1 error format."]
                    pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                        self.xgafv = Some(value);
                        self
                    }
                    #[doc = r" Execute the given operation. The fields requested are"]
                    #[doc = r" determined by the FieldSelector attribute of the return type."]
                    #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                    #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                    #[doc = r" are not generic over the return type and deserialize the"]
                    #[doc = r" response into an auto-generated struct will all possible"]
                    #[doc = r" fields."]
                    pub async fn execute<T>(self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: ::std::option::Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.execute_with_fields(fields).await
                    }
                    #[doc = r" Execute the given operation. This will not provide any"]
                    #[doc = r" `fields` selector indicating that the server will determine"]
                    #[doc = r" the fields returned. This typically includes the most common"]
                    #[doc = r" fields, but it will not include every possible attribute of"]
                    #[doc = r" the response resource."]
                    pub async fn execute_with_default_fields(
                        self,
                    ) -> Result<
                        crate::schemas::GoogleCloudVisionV1P1Beta1BatchAnnotateFilesResponse,
                        crate::Error,
                    > {
                        self.execute_with_fields(None::<&str>).await
                    }
                    #[doc = r" Execute the given operation. This will provide a `fields`"]
                    #[doc = r" selector of `*`. This will include every attribute of the"]
                    #[doc = r" response resource and should be limited to use during"]
                    #[doc = r" development or debugging."]
                    pub async fn execute_with_all_fields(
                        self,
                    ) -> Result<
                        crate::schemas::GoogleCloudVisionV1P1Beta1BatchAnnotateFilesResponse,
                        crate::Error,
                    > {
                        self.execute_with_fields(Some("*")).await
                    }
                    #[doc = r" Execute the given operation. This will use the `fields`"]
                    #[doc = r" selector provided and will deserialize the response into"]
                    #[doc = r" whatever return value is provided."]
                    pub async fn execute_with_fields<T, F>(
                        mut self,
                        fields: ::std::option::Option<F>,
                    ) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: Into<String>,
                    {
                        self.fields = fields.map(Into::into);
                        self._execute().await
                    }
                    async fn _execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        let req = self._request(&self._path()).await?;
                        let req = req.json(&self.request);
                        Ok(req.send().await?.error_for_status()?.json().await?)
                    }
                    fn _path(&self) -> String {
                        let mut output = "https://vision.googleapis.com/".to_owned();
                        output.push_str("v1p1beta1/");
                        {
                            let var_as_str = &self.parent;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/files:annotate");
                        output
                    }
                    async fn _request(
                        &self,
                        path: &str,
                    ) -> Result<::reqwest::RequestBuilder, crate::Error> {
                        let mut req = self.reqwest.request(::reqwest::Method::POST, path);
                        req = req.query(&[("access_token", &self.access_token)]);
                        req = req.query(&[("alt", &self.alt)]);
                        req = req.query(&[("callback", &self.callback)]);
                        req = req.query(&[("fields", &self.fields)]);
                        req = req.query(&[("key", &self.key)]);
                        req = req.query(&[("oauth_token", &self.oauth_token)]);
                        req = req.query(&[("prettyPrint", &self.pretty_print)]);
                        req = req.query(&[("quotaUser", &self.quota_user)]);
                        req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                        req = req.query(&[("uploadType", &self.upload_type)]);
                        req = req.query(&[("$.xgafv", &self.xgafv)]);
                        let access_token = self
                            .auth
                            .access_token()
                            .await
                            .map_err(|err| crate::Error::OAuth2(err))?;
                        req = req.bearer_auth(access_token);
                        Ok(req)
                    }
                }
                #[doc = "Created via [FilesActions::async_batch_annotate()](struct.FilesActions.html#method.async_batch_annotate)"]
                #[derive(Debug, Clone)]
                pub struct AsyncBatchAnnotateRequestBuilder<'a> {
                    pub(crate) reqwest: &'a ::reqwest::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                    request:
                        crate::schemas::GoogleCloudVisionV1P1Beta1AsyncBatchAnnotateFilesRequest,
                    parent: String,
                    access_token: ::std::option::Option<String>,
                    alt: ::std::option::Option<crate::params::Alt>,
                    callback: ::std::option::Option<String>,
                    fields: ::std::option::Option<String>,
                    key: ::std::option::Option<String>,
                    oauth_token: ::std::option::Option<String>,
                    pretty_print: ::std::option::Option<bool>,
                    quota_user: ::std::option::Option<String>,
                    upload_protocol: ::std::option::Option<String>,
                    upload_type: ::std::option::Option<String>,
                    xgafv: ::std::option::Option<crate::params::Xgafv>,
                }
                impl<'a> AsyncBatchAnnotateRequestBuilder<'a> {
                    #[doc = "OAuth access token."]
                    pub fn access_token(mut self, value: impl Into<String>) -> Self {
                        self.access_token = Some(value.into());
                        self
                    }
                    #[doc = "JSONP"]
                    pub fn callback(mut self, value: impl Into<String>) -> Self {
                        self.callback = Some(value.into());
                        self
                    }
                    #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                    pub fn key(mut self, value: impl Into<String>) -> Self {
                        self.key = Some(value.into());
                        self
                    }
                    #[doc = "OAuth 2.0 token for the current user."]
                    pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                        self.oauth_token = Some(value.into());
                        self
                    }
                    #[doc = "Returns response with indentations and line breaks."]
                    pub fn pretty_print(mut self, value: bool) -> Self {
                        self.pretty_print = Some(value);
                        self
                    }
                    #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                    pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                        self.quota_user = Some(value.into());
                        self
                    }
                    #[doc = "Upload protocol for media (e.g. “raw”, “multipart”)."]
                    pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                        self.upload_protocol = Some(value.into());
                        self
                    }
                    #[doc = "Legacy upload protocol for media (e.g. “media”, “multipart”)."]
                    pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                        self.upload_type = Some(value.into());
                        self
                    }
                    #[doc = "V1 error format."]
                    pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                        self.xgafv = Some(value);
                        self
                    }
                    #[doc = r" Execute the given operation. The fields requested are"]
                    #[doc = r" determined by the FieldSelector attribute of the return type."]
                    #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                    #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                    #[doc = r" are not generic over the return type and deserialize the"]
                    #[doc = r" response into an auto-generated struct will all possible"]
                    #[doc = r" fields."]
                    pub async fn execute<T>(self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: ::std::option::Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.execute_with_fields(fields).await
                    }
                    #[doc = r" Execute the given operation. This will not provide any"]
                    #[doc = r" `fields` selector indicating that the server will determine"]
                    #[doc = r" the fields returned. This typically includes the most common"]
                    #[doc = r" fields, but it will not include every possible attribute of"]
                    #[doc = r" the response resource."]
                    pub async fn execute_with_default_fields(
                        self,
                    ) -> Result<crate::schemas::Operation, crate::Error> {
                        self.execute_with_fields(None::<&str>).await
                    }
                    #[doc = r" Execute the given operation. This will provide a `fields`"]
                    #[doc = r" selector of `*`. This will include every attribute of the"]
                    #[doc = r" response resource and should be limited to use during"]
                    #[doc = r" development or debugging."]
                    pub async fn execute_with_all_fields(
                        self,
                    ) -> Result<crate::schemas::Operation, crate::Error> {
                        self.execute_with_fields(Some("*")).await
                    }
                    #[doc = r" Execute the given operation. This will use the `fields`"]
                    #[doc = r" selector provided and will deserialize the response into"]
                    #[doc = r" whatever return value is provided."]
                    pub async fn execute_with_fields<T, F>(
                        mut self,
                        fields: ::std::option::Option<F>,
                    ) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: Into<String>,
                    {
                        self.fields = fields.map(Into::into);
                        self._execute().await
                    }
                    async fn _execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        let req = self._request(&self._path()).await?;
                        let req = req.json(&self.request);
                        Ok(req.send().await?.error_for_status()?.json().await?)
                    }
                    fn _path(&self) -> String {
                        let mut output = "https://vision.googleapis.com/".to_owned();
                        output.push_str("v1p1beta1/");
                        {
                            let var_as_str = &self.parent;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/files:asyncBatchAnnotate");
                        output
                    }
                    async fn _request(
                        &self,
                        path: &str,
                    ) -> Result<::reqwest::RequestBuilder, crate::Error> {
                        let mut req = self.reqwest.request(::reqwest::Method::POST, path);
                        req = req.query(&[("access_token", &self.access_token)]);
                        req = req.query(&[("alt", &self.alt)]);
                        req = req.query(&[("callback", &self.callback)]);
                        req = req.query(&[("fields", &self.fields)]);
                        req = req.query(&[("key", &self.key)]);
                        req = req.query(&[("oauth_token", &self.oauth_token)]);
                        req = req.query(&[("prettyPrint", &self.pretty_print)]);
                        req = req.query(&[("quotaUser", &self.quota_user)]);
                        req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                        req = req.query(&[("uploadType", &self.upload_type)]);
                        req = req.query(&[("$.xgafv", &self.xgafv)]);
                        let access_token = self
                            .auth
                            .access_token()
                            .await
                            .map_err(|err| crate::Error::OAuth2(err))?;
                        req = req.bearer_auth(access_token);
                        Ok(req)
                    }
                }
            }
            pub mod images {
                pub mod params {}
                pub struct ImagesActions<'a> {
                    pub(crate) reqwest: &'a reqwest::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                }
                impl<'a> ImagesActions<'a> {
                    fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                        self.auth
                    }
                    #[doc = "Run image detection and annotation for a batch of images."]
                    pub fn annotate(
                        &self,
                        request : crate :: schemas :: GoogleCloudVisionV1P1Beta1BatchAnnotateImagesRequest,
                        parent: impl Into<String>,
                    ) -> AnnotateRequestBuilder {
                        AnnotateRequestBuilder {
                            reqwest: &self.reqwest,
                            auth: self.auth_ref(),
                            request,
                            access_token: None,
                            alt: None,
                            callback: None,
                            fields: None,
                            key: None,
                            oauth_token: None,
                            pretty_print: None,
                            quota_user: None,
                            upload_protocol: None,
                            upload_type: None,
                            xgafv: None,
                            parent: parent.into(),
                        }
                    }
                    #[doc = "Run asynchronous image detection and annotation for a list of images. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results). This service will write image annotation outputs to json files in customer GCS bucket, each json file containing BatchAnnotateImagesResponse proto."]
                    pub fn async_batch_annotate(
                        &self,
                        request : crate :: schemas :: GoogleCloudVisionV1P1Beta1AsyncBatchAnnotateImagesRequest,
                        parent: impl Into<String>,
                    ) -> AsyncBatchAnnotateRequestBuilder {
                        AsyncBatchAnnotateRequestBuilder {
                            reqwest: &self.reqwest,
                            auth: self.auth_ref(),
                            request,
                            access_token: None,
                            alt: None,
                            callback: None,
                            fields: None,
                            key: None,
                            oauth_token: None,
                            pretty_print: None,
                            quota_user: None,
                            upload_protocol: None,
                            upload_type: None,
                            xgafv: None,
                            parent: parent.into(),
                        }
                    }
                }
                #[doc = "Created via [ImagesActions::annotate()](struct.ImagesActions.html#method.annotate)"]
                #[derive(Debug, Clone)]
                pub struct AnnotateRequestBuilder<'a> {
                    pub(crate) reqwest: &'a ::reqwest::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                    request: crate::schemas::GoogleCloudVisionV1P1Beta1BatchAnnotateImagesRequest,
                    parent: String,
                    access_token: ::std::option::Option<String>,
                    alt: ::std::option::Option<crate::params::Alt>,
                    callback: ::std::option::Option<String>,
                    fields: ::std::option::Option<String>,
                    key: ::std::option::Option<String>,
                    oauth_token: ::std::option::Option<String>,
                    pretty_print: ::std::option::Option<bool>,
                    quota_user: ::std::option::Option<String>,
                    upload_protocol: ::std::option::Option<String>,
                    upload_type: ::std::option::Option<String>,
                    xgafv: ::std::option::Option<crate::params::Xgafv>,
                }
                impl<'a> AnnotateRequestBuilder<'a> {
                    #[doc = "OAuth access token."]
                    pub fn access_token(mut self, value: impl Into<String>) -> Self {
                        self.access_token = Some(value.into());
                        self
                    }
                    #[doc = "JSONP"]
                    pub fn callback(mut self, value: impl Into<String>) -> Self {
                        self.callback = Some(value.into());
                        self
                    }
                    #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                    pub fn key(mut self, value: impl Into<String>) -> Self {
                        self.key = Some(value.into());
                        self
                    }
                    #[doc = "OAuth 2.0 token for the current user."]
                    pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                        self.oauth_token = Some(value.into());
                        self
                    }
                    #[doc = "Returns response with indentations and line breaks."]
                    pub fn pretty_print(mut self, value: bool) -> Self {
                        self.pretty_print = Some(value);
                        self
                    }
                    #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                    pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                        self.quota_user = Some(value.into());
                        self
                    }
                    #[doc = "Upload protocol for media (e.g. “raw”, “multipart”)."]
                    pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                        self.upload_protocol = Some(value.into());
                        self
                    }
                    #[doc = "Legacy upload protocol for media (e.g. “media”, “multipart”)."]
                    pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                        self.upload_type = Some(value.into());
                        self
                    }
                    #[doc = "V1 error format."]
                    pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                        self.xgafv = Some(value);
                        self
                    }
                    #[doc = r" Execute the given operation. The fields requested are"]
                    #[doc = r" determined by the FieldSelector attribute of the return type."]
                    #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                    #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                    #[doc = r" are not generic over the return type and deserialize the"]
                    #[doc = r" response into an auto-generated struct will all possible"]
                    #[doc = r" fields."]
                    pub async fn execute<T>(self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: ::std::option::Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.execute_with_fields(fields).await
                    }
                    #[doc = r" Execute the given operation. This will not provide any"]
                    #[doc = r" `fields` selector indicating that the server will determine"]
                    #[doc = r" the fields returned. This typically includes the most common"]
                    #[doc = r" fields, but it will not include every possible attribute of"]
                    #[doc = r" the response resource."]
                    pub async fn execute_with_default_fields(
                        self,
                    ) -> Result<
                        crate::schemas::GoogleCloudVisionV1P1Beta1BatchAnnotateImagesResponse,
                        crate::Error,
                    > {
                        self.execute_with_fields(None::<&str>).await
                    }
                    #[doc = r" Execute the given operation. This will provide a `fields`"]
                    #[doc = r" selector of `*`. This will include every attribute of the"]
                    #[doc = r" response resource and should be limited to use during"]
                    #[doc = r" development or debugging."]
                    pub async fn execute_with_all_fields(
                        self,
                    ) -> Result<
                        crate::schemas::GoogleCloudVisionV1P1Beta1BatchAnnotateImagesResponse,
                        crate::Error,
                    > {
                        self.execute_with_fields(Some("*")).await
                    }
                    #[doc = r" Execute the given operation. This will use the `fields`"]
                    #[doc = r" selector provided and will deserialize the response into"]
                    #[doc = r" whatever return value is provided."]
                    pub async fn execute_with_fields<T, F>(
                        mut self,
                        fields: ::std::option::Option<F>,
                    ) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: Into<String>,
                    {
                        self.fields = fields.map(Into::into);
                        self._execute().await
                    }
                    async fn _execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        let req = self._request(&self._path()).await?;
                        let req = req.json(&self.request);
                        Ok(req.send().await?.error_for_status()?.json().await?)
                    }
                    fn _path(&self) -> String {
                        let mut output = "https://vision.googleapis.com/".to_owned();
                        output.push_str("v1p1beta1/");
                        {
                            let var_as_str = &self.parent;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/images:annotate");
                        output
                    }
                    async fn _request(
                        &self,
                        path: &str,
                    ) -> Result<::reqwest::RequestBuilder, crate::Error> {
                        let mut req = self.reqwest.request(::reqwest::Method::POST, path);
                        req = req.query(&[("access_token", &self.access_token)]);
                        req = req.query(&[("alt", &self.alt)]);
                        req = req.query(&[("callback", &self.callback)]);
                        req = req.query(&[("fields", &self.fields)]);
                        req = req.query(&[("key", &self.key)]);
                        req = req.query(&[("oauth_token", &self.oauth_token)]);
                        req = req.query(&[("prettyPrint", &self.pretty_print)]);
                        req = req.query(&[("quotaUser", &self.quota_user)]);
                        req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                        req = req.query(&[("uploadType", &self.upload_type)]);
                        req = req.query(&[("$.xgafv", &self.xgafv)]);
                        let access_token = self
                            .auth
                            .access_token()
                            .await
                            .map_err(|err| crate::Error::OAuth2(err))?;
                        req = req.bearer_auth(access_token);
                        Ok(req)
                    }
                }
                #[doc = "Created via [ImagesActions::async_batch_annotate()](struct.ImagesActions.html#method.async_batch_annotate)"]
                #[derive(Debug, Clone)]
                pub struct AsyncBatchAnnotateRequestBuilder<'a> {
                    pub(crate) reqwest: &'a ::reqwest::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                    request:
                        crate::schemas::GoogleCloudVisionV1P1Beta1AsyncBatchAnnotateImagesRequest,
                    parent: String,
                    access_token: ::std::option::Option<String>,
                    alt: ::std::option::Option<crate::params::Alt>,
                    callback: ::std::option::Option<String>,
                    fields: ::std::option::Option<String>,
                    key: ::std::option::Option<String>,
                    oauth_token: ::std::option::Option<String>,
                    pretty_print: ::std::option::Option<bool>,
                    quota_user: ::std::option::Option<String>,
                    upload_protocol: ::std::option::Option<String>,
                    upload_type: ::std::option::Option<String>,
                    xgafv: ::std::option::Option<crate::params::Xgafv>,
                }
                impl<'a> AsyncBatchAnnotateRequestBuilder<'a> {
                    #[doc = "OAuth access token."]
                    pub fn access_token(mut self, value: impl Into<String>) -> Self {
                        self.access_token = Some(value.into());
                        self
                    }
                    #[doc = "JSONP"]
                    pub fn callback(mut self, value: impl Into<String>) -> Self {
                        self.callback = Some(value.into());
                        self
                    }
                    #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                    pub fn key(mut self, value: impl Into<String>) -> Self {
                        self.key = Some(value.into());
                        self
                    }
                    #[doc = "OAuth 2.0 token for the current user."]
                    pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                        self.oauth_token = Some(value.into());
                        self
                    }
                    #[doc = "Returns response with indentations and line breaks."]
                    pub fn pretty_print(mut self, value: bool) -> Self {
                        self.pretty_print = Some(value);
                        self
                    }
                    #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                    pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                        self.quota_user = Some(value.into());
                        self
                    }
                    #[doc = "Upload protocol for media (e.g. “raw”, “multipart”)."]
                    pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                        self.upload_protocol = Some(value.into());
                        self
                    }
                    #[doc = "Legacy upload protocol for media (e.g. “media”, “multipart”)."]
                    pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                        self.upload_type = Some(value.into());
                        self
                    }
                    #[doc = "V1 error format."]
                    pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                        self.xgafv = Some(value);
                        self
                    }
                    #[doc = r" Execute the given operation. The fields requested are"]
                    #[doc = r" determined by the FieldSelector attribute of the return type."]
                    #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                    #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                    #[doc = r" are not generic over the return type and deserialize the"]
                    #[doc = r" response into an auto-generated struct will all possible"]
                    #[doc = r" fields."]
                    pub async fn execute<T>(self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: ::std::option::Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.execute_with_fields(fields).await
                    }
                    #[doc = r" Execute the given operation. This will not provide any"]
                    #[doc = r" `fields` selector indicating that the server will determine"]
                    #[doc = r" the fields returned. This typically includes the most common"]
                    #[doc = r" fields, but it will not include every possible attribute of"]
                    #[doc = r" the response resource."]
                    pub async fn execute_with_default_fields(
                        self,
                    ) -> Result<crate::schemas::Operation, crate::Error> {
                        self.execute_with_fields(None::<&str>).await
                    }
                    #[doc = r" Execute the given operation. This will provide a `fields`"]
                    #[doc = r" selector of `*`. This will include every attribute of the"]
                    #[doc = r" response resource and should be limited to use during"]
                    #[doc = r" development or debugging."]
                    pub async fn execute_with_all_fields(
                        self,
                    ) -> Result<crate::schemas::Operation, crate::Error> {
                        self.execute_with_fields(Some("*")).await
                    }
                    #[doc = r" Execute the given operation. This will use the `fields`"]
                    #[doc = r" selector provided and will deserialize the response into"]
                    #[doc = r" whatever return value is provided."]
                    pub async fn execute_with_fields<T, F>(
                        mut self,
                        fields: ::std::option::Option<F>,
                    ) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: Into<String>,
                    {
                        self.fields = fields.map(Into::into);
                        self._execute().await
                    }
                    async fn _execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        let req = self._request(&self._path()).await?;
                        let req = req.json(&self.request);
                        Ok(req.send().await?.error_for_status()?.json().await?)
                    }
                    fn _path(&self) -> String {
                        let mut output = "https://vision.googleapis.com/".to_owned();
                        output.push_str("v1p1beta1/");
                        {
                            let var_as_str = &self.parent;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/images:asyncBatchAnnotate");
                        output
                    }
                    async fn _request(
                        &self,
                        path: &str,
                    ) -> Result<::reqwest::RequestBuilder, crate::Error> {
                        let mut req = self.reqwest.request(::reqwest::Method::POST, path);
                        req = req.query(&[("access_token", &self.access_token)]);
                        req = req.query(&[("alt", &self.alt)]);
                        req = req.query(&[("callback", &self.callback)]);
                        req = req.query(&[("fields", &self.fields)]);
                        req = req.query(&[("key", &self.key)]);
                        req = req.query(&[("oauth_token", &self.oauth_token)]);
                        req = req.query(&[("prettyPrint", &self.pretty_print)]);
                        req = req.query(&[("quotaUser", &self.quota_user)]);
                        req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                        req = req.query(&[("uploadType", &self.upload_type)]);
                        req = req.query(&[("$.xgafv", &self.xgafv)]);
                        let access_token = self
                            .auth
                            .access_token()
                            .await
                            .map_err(|err| crate::Error::OAuth2(err))?;
                        req = req.bearer_auth(access_token);
                        Ok(req)
                    }
                }
            }
        }
    }
}
#[derive(Debug)]
pub enum Error {
    OAuth2(Box<dyn ::std::error::Error + Send + Sync>),
    JSON(::serde_json::Error),
    Reqwest {
        reqwest_err: ::reqwest::Error,
        body: Option<String>,
    },
    IO(std::io::Error),
    Other(Box<dyn ::std::error::Error + Send + Sync>),
}

impl Error {
    pub fn json_error(&self) -> Option<&::serde_json::Error> {
        match self {
            Error::OAuth2(_) => None,
            Error::JSON(err) => Some(err),
            Error::Reqwest { .. } => None,
            Error::IO(_) => None,
            Error::Other(_) => None,
        }
    }
}

impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            Error::OAuth2(err) => write!(f, "OAuth2 Error: {}", err),
            Error::JSON(err) => write!(f, "JSON Error: {}", err),
            Error::Reqwest { reqwest_err, body } => {
                write!(f, "Reqwest Error: {}", reqwest_err)?;
                if let Some(body) = body {
                    write!(f, ": {}", body)?;
                }
                Ok(())
            }
            Error::IO(err) => write!(f, "IO Error: {}", err),
            Error::Other(err) => write!(f, "Uknown Error: {}", err),
        }
    }
}

impl ::std::error::Error for Error {}

impl From<::serde_json::Error> for Error {
    fn from(err: ::serde_json::Error) -> Error {
        Error::JSON(err)
    }
}

impl From<::reqwest::Error> for Error {
    fn from(reqwest_err: ::reqwest::Error) -> Error {
        Error::Reqwest {
            reqwest_err,
            body: None,
        }
    }
}

impl From<std::io::Error> for Error {
    fn from(err: std::io::Error) -> Error {
        Error::IO(err)
    }
}
#[allow(dead_code)]
const SIMPLE: &::percent_encoding::AsciiSet = &::percent_encoding::NON_ALPHANUMERIC
    .remove(b'-')
    .remove(b'.')
    .remove(b'_')
    .remove(b'~');

#[allow(dead_code)]
const RESERVED: &::percent_encoding::AsciiSet = &SIMPLE
    .remove(b'%')
    .remove(b':')
    .remove(b'/')
    .remove(b'?')
    .remove(b'#')
    .remove(b'[')
    .remove(b']')
    .remove(b'@')
    .remove(b'!')
    .remove(b'$')
    .remove(b'&')
    .remove(b'\'')
    .remove(b'(')
    .remove(b')')
    .remove(b'*')
    .remove(b'+')
    .remove(b',')
    .remove(b';')
    .remove(b'=');
#[allow(dead_code)]
mod multipart {
    pub(crate) struct RelatedMultiPart {
        parts: Vec<Part>,
        boundary: String,
    }

    impl RelatedMultiPart {
        pub(crate) fn new() -> Self {
            RelatedMultiPart {
                parts: Vec::new(),
                boundary: ::textnonce::TextNonce::sized(68).unwrap().0,
            }
        }

        pub(crate) fn new_part(&mut self, part: Part) {
            self.parts.push(part);
        }

        pub(crate) fn boundary(&self) -> &str {
            &self.boundary
        }

        pub(crate) fn into_reader(self) -> RelatedMultiPartReader {
            let boundary_marker = boundary_marker(&self.boundary);
            RelatedMultiPartReader {
                state: RelatedMultiPartReaderState::WriteBoundary {
                    start: 0,
                    boundary: format!("{}\r\n", &boundary_marker),
                },
                boundary: boundary_marker,
                next_body: None,
                parts: self.parts.into_iter(),
            }
        }
    }

    pub(crate) struct Part {
        content_type: ::mime::Mime,
        body: Box<dyn futures::io::AsyncRead + std::marker::Unpin + Send>,
    }

    impl Part {
        pub(crate) fn new(
            content_type: ::mime::Mime,
            body: Box<dyn futures::io::AsyncRead + std::marker::Unpin + Send>,
        ) -> Part {
            Part { content_type, body }
        }
    }

    pub(crate) struct RelatedMultiPartReader {
        state: RelatedMultiPartReaderState,
        boundary: String,
        next_body: Option<Box<dyn futures::io::AsyncRead + std::marker::Unpin + Send>>,
        parts: std::vec::IntoIter<Part>,
    }

    enum RelatedMultiPartReaderState {
        WriteBoundary {
            start: usize,
            boundary: String,
        },
        WriteContentType {
            start: usize,
            content_type: Vec<u8>,
        },
        WriteBody {
            body: Box<dyn futures::io::AsyncRead + std::marker::Unpin + Send>,
        },
    }

    impl futures::io::AsyncRead for RelatedMultiPartReader {
        fn poll_read(
            mut self: std::pin::Pin<&mut Self>,
            ctx: &mut futures::task::Context,
            buf: &mut [u8],
        ) -> futures::task::Poll<Result<usize, futures::io::Error>> {
            use RelatedMultiPartReaderState::*;

            let mut bytes_written: usize = 0;
            loop {
                let rem_buf = &mut buf[bytes_written..];
                match &mut self.state {
                    WriteBoundary { start, boundary } => {
                        let bytes_to_copy = std::cmp::min(boundary.len() - *start, rem_buf.len());
                        rem_buf[..bytes_to_copy]
                            .copy_from_slice(&boundary.as_bytes()[*start..*start + bytes_to_copy]);
                        *start += bytes_to_copy;
                        bytes_written += bytes_to_copy;
                        if *start == boundary.len() {
                            let next_part = match self.parts.next() {
                                None => break,
                                Some(part) => part,
                            };
                            self.next_body = Some(next_part.body);
                            self.state = WriteContentType {
                                start: 0,
                                content_type: format!(
                                    "Content-Type: {}\r\n\r\n",
                                    next_part.content_type
                                )
                                .into_bytes(),
                            };
                        } else {
                            break;
                        }
                    }
                    WriteContentType {
                        start,
                        content_type,
                    } => {
                        let bytes_to_copy =
                            std::cmp::min(content_type.len() - *start, rem_buf.len());
                        rem_buf[..bytes_to_copy]
                            .copy_from_slice(&content_type[*start..*start + bytes_to_copy]);
                        *start += bytes_to_copy;
                        bytes_written += bytes_to_copy;
                        if *start == content_type.len() {
                            self.state = WriteBody {
                                body: self.next_body.take().unwrap(),
                            };
                        } else {
                            break;
                        }
                    }
                    WriteBody { body } => {
                        let body = std::pin::Pin::new(body);
                        let written = match futures::io::AsyncRead::poll_read(body, ctx, rem_buf) {
                            futures::task::Poll::Ready(Ok(n)) => n,
                            futures::task::Poll::Ready(Err(err)) => {
                                return futures::task::Poll::Ready(Err(err));
                            }
                            futures::task::Poll::Pending => return futures::task::Poll::Pending,
                        };
                        bytes_written += written;
                        if written == 0 {
                            self.state = WriteBoundary {
                                start: 0,
                                boundary: format!("\r\n{}\r\n", &self.boundary),
                            };
                        } else {
                            break;
                        }
                    }
                }
            }

            futures::task::Poll::Ready(Ok(bytes_written))
        }
    }

    fn boundary_marker(boundary: &str) -> String {
        let mut marker = String::with_capacity(boundary.len() + 2);
        marker.push_str("--");
        marker.push_str(boundary);
        marker
    }
}
// A serde helper module that can be used with the `with` attribute
// to deserialize any string to a FromStr type and serialize any
// Display type to a String. Google API's encode i64, u64 values as
// strings.
#[allow(dead_code)]
mod parsed_string {
    pub fn serialize<T, S>(
        value: &Option<T>,
        serializer: S,
    ) -> ::std::result::Result<S::Ok, S::Error>
    where
        T: ::std::fmt::Display,
        S: ::serde::Serializer,
    {
        use ::serde::Serialize;
        value.as_ref().map(|x| x.to_string()).serialize(serializer)
    }

    pub fn deserialize<'de, T, D>(deserializer: D) -> ::std::result::Result<Option<T>, D::Error>
    where
        T: ::std::str::FromStr,
        T::Err: ::std::fmt::Display,
        D: ::serde::de::Deserializer<'de>,
    {
        use ::serde::Deserialize;
        match Option::<String>::deserialize(deserializer)? {
            Some(x) => Ok(Some(x.parse().map_err(::serde::de::Error::custom)?)),
            None => Ok(None),
        }
    }
}
/// Represent the ability to extract the `nextPageToken` from a response.
pub trait GetNextPageToken<T> {
    /// Get the `nextPageToken` from a response if present.
    fn next_page_token(&self) -> ::std::option::Option<T>;
}

impl<T: ::std::convert::From<::std::string::String>> GetNextPageToken<T>
    for ::serde_json::Map<::std::string::String, ::serde_json::Value>
{
    fn next_page_token(&self) -> ::std::option::Option<T> {
        self.get("nextPageToken")
            .and_then(|t| t.as_str())
            .map(|s| s.to_owned().into())
    }
}
